
C:\workspace\hsm\Debug\hsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cdc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002ec0  08002ec0  00012ec0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002eec  08002eec  00012eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002ef0  08002ef0  00012ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08002ef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000304  2000000c  08002f00  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000310  08002f00  00020310  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_line   00004c52  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000dd7d  00000000  00000000  00024c87  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001fb2  00000000  00000000  00032a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000898  00000000  00000000  000349b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c70  00000000  00000000  00035250  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000069f7  00000000  00000000  00035ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000030fb  00000000  00000000  0003c8b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0003f9b2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000197c  00000000  00000000  0003fa30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002ea8 	.word	0x08002ea8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08002ea8 	.word	0x08002ea8

08000224 <__aeabi_frsub>:
 8000224:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000228:	e002      	b.n	8000230 <__addsf3>
 800022a:	bf00      	nop

0800022c <__aeabi_fsub>:
 800022c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000230 <__addsf3>:
 8000230:	0042      	lsls	r2, r0, #1
 8000232:	bf1f      	itttt	ne
 8000234:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000238:	ea92 0f03 	teqne	r2, r3
 800023c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000240:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000244:	d06a      	beq.n	800031c <__addsf3+0xec>
 8000246:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800024a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800024e:	bfc1      	itttt	gt
 8000250:	18d2      	addgt	r2, r2, r3
 8000252:	4041      	eorgt	r1, r0
 8000254:	4048      	eorgt	r0, r1
 8000256:	4041      	eorgt	r1, r0
 8000258:	bfb8      	it	lt
 800025a:	425b      	neglt	r3, r3
 800025c:	2b19      	cmp	r3, #25
 800025e:	bf88      	it	hi
 8000260:	4770      	bxhi	lr
 8000262:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000266:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800026a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800026e:	bf18      	it	ne
 8000270:	4240      	negne	r0, r0
 8000272:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000276:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800027a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800027e:	bf18      	it	ne
 8000280:	4249      	negne	r1, r1
 8000282:	ea92 0f03 	teq	r2, r3
 8000286:	d03f      	beq.n	8000308 <__addsf3+0xd8>
 8000288:	f1a2 0201 	sub.w	r2, r2, #1
 800028c:	fa41 fc03 	asr.w	ip, r1, r3
 8000290:	eb10 000c 	adds.w	r0, r0, ip
 8000294:	f1c3 0320 	rsb	r3, r3, #32
 8000298:	fa01 f103 	lsl.w	r1, r1, r3
 800029c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a0:	d502      	bpl.n	80002a8 <__addsf3+0x78>
 80002a2:	4249      	negs	r1, r1
 80002a4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002ac:	d313      	bcc.n	80002d6 <__addsf3+0xa6>
 80002ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002b2:	d306      	bcc.n	80002c2 <__addsf3+0x92>
 80002b4:	0840      	lsrs	r0, r0, #1
 80002b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ba:	f102 0201 	add.w	r2, r2, #1
 80002be:	2afe      	cmp	r2, #254	; 0xfe
 80002c0:	d251      	bcs.n	8000366 <__addsf3+0x136>
 80002c2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002ca:	bf08      	it	eq
 80002cc:	f020 0001 	biceq.w	r0, r0, #1
 80002d0:	ea40 0003 	orr.w	r0, r0, r3
 80002d4:	4770      	bx	lr
 80002d6:	0049      	lsls	r1, r1, #1
 80002d8:	eb40 0000 	adc.w	r0, r0, r0
 80002dc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80002e0:	f1a2 0201 	sub.w	r2, r2, #1
 80002e4:	d1ed      	bne.n	80002c2 <__addsf3+0x92>
 80002e6:	fab0 fc80 	clz	ip, r0
 80002ea:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ee:	ebb2 020c 	subs.w	r2, r2, ip
 80002f2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002f6:	bfaa      	itet	ge
 80002f8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002fc:	4252      	neglt	r2, r2
 80002fe:	4318      	orrge	r0, r3
 8000300:	bfbc      	itt	lt
 8000302:	40d0      	lsrlt	r0, r2
 8000304:	4318      	orrlt	r0, r3
 8000306:	4770      	bx	lr
 8000308:	f092 0f00 	teq	r2, #0
 800030c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000310:	bf06      	itte	eq
 8000312:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000316:	3201      	addeq	r2, #1
 8000318:	3b01      	subne	r3, #1
 800031a:	e7b5      	b.n	8000288 <__addsf3+0x58>
 800031c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000320:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000324:	bf18      	it	ne
 8000326:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800032a:	d021      	beq.n	8000370 <__addsf3+0x140>
 800032c:	ea92 0f03 	teq	r2, r3
 8000330:	d004      	beq.n	800033c <__addsf3+0x10c>
 8000332:	f092 0f00 	teq	r2, #0
 8000336:	bf08      	it	eq
 8000338:	4608      	moveq	r0, r1
 800033a:	4770      	bx	lr
 800033c:	ea90 0f01 	teq	r0, r1
 8000340:	bf1c      	itt	ne
 8000342:	2000      	movne	r0, #0
 8000344:	4770      	bxne	lr
 8000346:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800034a:	d104      	bne.n	8000356 <__addsf3+0x126>
 800034c:	0040      	lsls	r0, r0, #1
 800034e:	bf28      	it	cs
 8000350:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800035a:	bf3c      	itt	cc
 800035c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000360:	4770      	bxcc	lr
 8000362:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000366:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800036a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800036e:	4770      	bx	lr
 8000370:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000374:	bf16      	itet	ne
 8000376:	4608      	movne	r0, r1
 8000378:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800037c:	4601      	movne	r1, r0
 800037e:	0242      	lsls	r2, r0, #9
 8000380:	bf06      	itte	eq
 8000382:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000386:	ea90 0f01 	teqeq	r0, r1
 800038a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800038e:	4770      	bx	lr

08000390 <__aeabi_ui2f>:
 8000390:	f04f 0300 	mov.w	r3, #0
 8000394:	e004      	b.n	80003a0 <__aeabi_i2f+0x8>
 8000396:	bf00      	nop

08000398 <__aeabi_i2f>:
 8000398:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800039c:	bf48      	it	mi
 800039e:	4240      	negmi	r0, r0
 80003a0:	ea5f 0c00 	movs.w	ip, r0
 80003a4:	bf08      	it	eq
 80003a6:	4770      	bxeq	lr
 80003a8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003ac:	4601      	mov	r1, r0
 80003ae:	f04f 0000 	mov.w	r0, #0
 80003b2:	e01c      	b.n	80003ee <__aeabi_l2f+0x2a>

080003b4 <__aeabi_ul2f>:
 80003b4:	ea50 0201 	orrs.w	r2, r0, r1
 80003b8:	bf08      	it	eq
 80003ba:	4770      	bxeq	lr
 80003bc:	f04f 0300 	mov.w	r3, #0
 80003c0:	e00a      	b.n	80003d8 <__aeabi_l2f+0x14>
 80003c2:	bf00      	nop

080003c4 <__aeabi_l2f>:
 80003c4:	ea50 0201 	orrs.w	r2, r0, r1
 80003c8:	bf08      	it	eq
 80003ca:	4770      	bxeq	lr
 80003cc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003d0:	d502      	bpl.n	80003d8 <__aeabi_l2f+0x14>
 80003d2:	4240      	negs	r0, r0
 80003d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003d8:	ea5f 0c01 	movs.w	ip, r1
 80003dc:	bf02      	ittt	eq
 80003de:	4684      	moveq	ip, r0
 80003e0:	4601      	moveq	r1, r0
 80003e2:	2000      	moveq	r0, #0
 80003e4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003e8:	bf08      	it	eq
 80003ea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003ee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003f2:	fabc f28c 	clz	r2, ip
 80003f6:	3a08      	subs	r2, #8
 80003f8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003fc:	db10      	blt.n	8000420 <__aeabi_l2f+0x5c>
 80003fe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000402:	4463      	add	r3, ip
 8000404:	fa00 fc02 	lsl.w	ip, r0, r2
 8000408:	f1c2 0220 	rsb	r2, r2, #32
 800040c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000410:	fa20 f202 	lsr.w	r2, r0, r2
 8000414:	eb43 0002 	adc.w	r0, r3, r2
 8000418:	bf08      	it	eq
 800041a:	f020 0001 	biceq.w	r0, r0, #1
 800041e:	4770      	bx	lr
 8000420:	f102 0220 	add.w	r2, r2, #32
 8000424:	fa01 fc02 	lsl.w	ip, r1, r2
 8000428:	f1c2 0220 	rsb	r2, r2, #32
 800042c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000430:	fa21 f202 	lsr.w	r2, r1, r2
 8000434:	eb43 0002 	adc.w	r0, r3, r2
 8000438:	bf08      	it	eq
 800043a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043e:	4770      	bx	lr

08000440 <__aeabi_fmul>:
 8000440:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000444:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000448:	bf1e      	ittt	ne
 800044a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800044e:	ea92 0f0c 	teqne	r2, ip
 8000452:	ea93 0f0c 	teqne	r3, ip
 8000456:	d06f      	beq.n	8000538 <__aeabi_fmul+0xf8>
 8000458:	441a      	add	r2, r3
 800045a:	ea80 0c01 	eor.w	ip, r0, r1
 800045e:	0240      	lsls	r0, r0, #9
 8000460:	bf18      	it	ne
 8000462:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000466:	d01e      	beq.n	80004a6 <__aeabi_fmul+0x66>
 8000468:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800046c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000470:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000474:	fba0 3101 	umull	r3, r1, r0, r1
 8000478:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800047c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000480:	bf3e      	ittt	cc
 8000482:	0049      	lslcc	r1, r1, #1
 8000484:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000488:	005b      	lslcc	r3, r3, #1
 800048a:	ea40 0001 	orr.w	r0, r0, r1
 800048e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000492:	2afd      	cmp	r2, #253	; 0xfd
 8000494:	d81d      	bhi.n	80004d2 <__aeabi_fmul+0x92>
 8000496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800049a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800049e:	bf08      	it	eq
 80004a0:	f020 0001 	biceq.w	r0, r0, #1
 80004a4:	4770      	bx	lr
 80004a6:	f090 0f00 	teq	r0, #0
 80004aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004ae:	bf08      	it	eq
 80004b0:	0249      	lsleq	r1, r1, #9
 80004b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ba:	3a7f      	subs	r2, #127	; 0x7f
 80004bc:	bfc2      	ittt	gt
 80004be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004c6:	4770      	bxgt	lr
 80004c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004cc:	f04f 0300 	mov.w	r3, #0
 80004d0:	3a01      	subs	r2, #1
 80004d2:	dc5d      	bgt.n	8000590 <__aeabi_fmul+0x150>
 80004d4:	f112 0f19 	cmn.w	r2, #25
 80004d8:	bfdc      	itt	le
 80004da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004de:	4770      	bxle	lr
 80004e0:	f1c2 0200 	rsb	r2, r2, #0
 80004e4:	0041      	lsls	r1, r0, #1
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	f1c2 0220 	rsb	r2, r2, #32
 80004ee:	fa00 fc02 	lsl.w	ip, r0, r2
 80004f2:	ea5f 0031 	movs.w	r0, r1, rrx
 80004f6:	f140 0000 	adc.w	r0, r0, #0
 80004fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004fe:	bf08      	it	eq
 8000500:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000504:	4770      	bx	lr
 8000506:	f092 0f00 	teq	r2, #0
 800050a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800050e:	bf02      	ittt	eq
 8000510:	0040      	lsleq	r0, r0, #1
 8000512:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000516:	3a01      	subeq	r2, #1
 8000518:	d0f9      	beq.n	800050e <__aeabi_fmul+0xce>
 800051a:	ea40 000c 	orr.w	r0, r0, ip
 800051e:	f093 0f00 	teq	r3, #0
 8000522:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000526:	bf02      	ittt	eq
 8000528:	0049      	lsleq	r1, r1, #1
 800052a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800052e:	3b01      	subeq	r3, #1
 8000530:	d0f9      	beq.n	8000526 <__aeabi_fmul+0xe6>
 8000532:	ea41 010c 	orr.w	r1, r1, ip
 8000536:	e78f      	b.n	8000458 <__aeabi_fmul+0x18>
 8000538:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800053c:	ea92 0f0c 	teq	r2, ip
 8000540:	bf18      	it	ne
 8000542:	ea93 0f0c 	teqne	r3, ip
 8000546:	d00a      	beq.n	800055e <__aeabi_fmul+0x11e>
 8000548:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800054c:	bf18      	it	ne
 800054e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000552:	d1d8      	bne.n	8000506 <__aeabi_fmul+0xc6>
 8000554:	ea80 0001 	eor.w	r0, r0, r1
 8000558:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800055c:	4770      	bx	lr
 800055e:	f090 0f00 	teq	r0, #0
 8000562:	bf17      	itett	ne
 8000564:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000568:	4608      	moveq	r0, r1
 800056a:	f091 0f00 	teqne	r1, #0
 800056e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000572:	d014      	beq.n	800059e <__aeabi_fmul+0x15e>
 8000574:	ea92 0f0c 	teq	r2, ip
 8000578:	d101      	bne.n	800057e <__aeabi_fmul+0x13e>
 800057a:	0242      	lsls	r2, r0, #9
 800057c:	d10f      	bne.n	800059e <__aeabi_fmul+0x15e>
 800057e:	ea93 0f0c 	teq	r3, ip
 8000582:	d103      	bne.n	800058c <__aeabi_fmul+0x14c>
 8000584:	024b      	lsls	r3, r1, #9
 8000586:	bf18      	it	ne
 8000588:	4608      	movne	r0, r1
 800058a:	d108      	bne.n	800059e <__aeabi_fmul+0x15e>
 800058c:	ea80 0001 	eor.w	r0, r0, r1
 8000590:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000594:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000598:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800059c:	4770      	bx	lr
 800059e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_fdiv>:
 80005a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005b0:	bf1e      	ittt	ne
 80005b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005b6:	ea92 0f0c 	teqne	r2, ip
 80005ba:	ea93 0f0c 	teqne	r3, ip
 80005be:	d069      	beq.n	8000694 <__aeabi_fdiv+0xec>
 80005c0:	eba2 0203 	sub.w	r2, r2, r3
 80005c4:	ea80 0c01 	eor.w	ip, r0, r1
 80005c8:	0249      	lsls	r1, r1, #9
 80005ca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005ce:	d037      	beq.n	8000640 <__aeabi_fdiv+0x98>
 80005d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005d4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005d8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005e0:	428b      	cmp	r3, r1
 80005e2:	bf38      	it	cc
 80005e4:	005b      	lslcc	r3, r3, #1
 80005e6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005ea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005ee:	428b      	cmp	r3, r1
 80005f0:	bf24      	itt	cs
 80005f2:	1a5b      	subcs	r3, r3, r1
 80005f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80005f8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005fc:	bf24      	itt	cs
 80005fe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000602:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000606:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800060a:	bf24      	itt	cs
 800060c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000610:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000614:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000618:	bf24      	itt	cs
 800061a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800061e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000622:	011b      	lsls	r3, r3, #4
 8000624:	bf18      	it	ne
 8000626:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800062a:	d1e0      	bne.n	80005ee <__aeabi_fdiv+0x46>
 800062c:	2afd      	cmp	r2, #253	; 0xfd
 800062e:	f63f af50 	bhi.w	80004d2 <__aeabi_fmul+0x92>
 8000632:	428b      	cmp	r3, r1
 8000634:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000638:	bf08      	it	eq
 800063a:	f020 0001 	biceq.w	r0, r0, #1
 800063e:	4770      	bx	lr
 8000640:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000644:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000648:	327f      	adds	r2, #127	; 0x7f
 800064a:	bfc2      	ittt	gt
 800064c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000650:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000654:	4770      	bxgt	lr
 8000656:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800065a:	f04f 0300 	mov.w	r3, #0
 800065e:	3a01      	subs	r2, #1
 8000660:	e737      	b.n	80004d2 <__aeabi_fmul+0x92>
 8000662:	f092 0f00 	teq	r2, #0
 8000666:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800066a:	bf02      	ittt	eq
 800066c:	0040      	lsleq	r0, r0, #1
 800066e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000672:	3a01      	subeq	r2, #1
 8000674:	d0f9      	beq.n	800066a <__aeabi_fdiv+0xc2>
 8000676:	ea40 000c 	orr.w	r0, r0, ip
 800067a:	f093 0f00 	teq	r3, #0
 800067e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000682:	bf02      	ittt	eq
 8000684:	0049      	lsleq	r1, r1, #1
 8000686:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800068a:	3b01      	subeq	r3, #1
 800068c:	d0f9      	beq.n	8000682 <__aeabi_fdiv+0xda>
 800068e:	ea41 010c 	orr.w	r1, r1, ip
 8000692:	e795      	b.n	80005c0 <__aeabi_fdiv+0x18>
 8000694:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000698:	ea92 0f0c 	teq	r2, ip
 800069c:	d108      	bne.n	80006b0 <__aeabi_fdiv+0x108>
 800069e:	0242      	lsls	r2, r0, #9
 80006a0:	f47f af7d 	bne.w	800059e <__aeabi_fmul+0x15e>
 80006a4:	ea93 0f0c 	teq	r3, ip
 80006a8:	f47f af70 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006ac:	4608      	mov	r0, r1
 80006ae:	e776      	b.n	800059e <__aeabi_fmul+0x15e>
 80006b0:	ea93 0f0c 	teq	r3, ip
 80006b4:	d104      	bne.n	80006c0 <__aeabi_fdiv+0x118>
 80006b6:	024b      	lsls	r3, r1, #9
 80006b8:	f43f af4c 	beq.w	8000554 <__aeabi_fmul+0x114>
 80006bc:	4608      	mov	r0, r1
 80006be:	e76e      	b.n	800059e <__aeabi_fmul+0x15e>
 80006c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006c4:	bf18      	it	ne
 80006c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006ca:	d1ca      	bne.n	8000662 <__aeabi_fdiv+0xba>
 80006cc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006d0:	f47f af5c 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006d4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006d8:	f47f af3c 	bne.w	8000554 <__aeabi_fmul+0x114>
 80006dc:	e75f      	b.n	800059e <__aeabi_fmul+0x15e>
 80006de:	bf00      	nop

080006e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006e0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006e2:	e003      	b.n	80006ec <LoopCopyDataInit>

080006e4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <LoopFillZerobss+0x10>)
  ldr r3, [r3, r1]
 80006e6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006e8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006ea:	3104      	adds	r1, #4

080006ec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006ec:	4809      	ldr	r0, [pc, #36]	; (8000714 <LoopFillZerobss+0x14>)
  ldr r3, =_edata
 80006ee:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <LoopFillZerobss+0x18>)
  adds r2, r0, r1
 80006f0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006f2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006f4:	d3f6      	bcc.n	80006e4 <CopyDataInit>
  ldr r2, =_sbss
 80006f6:	4a09      	ldr	r2, [pc, #36]	; (800071c <LoopFillZerobss+0x1c>)
  b LoopFillZerobss
 80006f8:	e002      	b.n	8000700 <LoopFillZerobss>

080006fa <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006fa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006fc:	f842 3b04 	str.w	r3, [r2], #4

08000700 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <LoopFillZerobss+0x20>)
  cmp r2, r3
 8000702:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000704:	d3f9      	bcc.n	80006fa <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000706:	f000 f80f 	bl	8000728 <SystemInit>
/* Call the application's entry point.*/
  bl main
 800070a:	f002 f847 	bl	800279c <main>
  bx lr
 800070e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8000710:	08002ef4 	.word	0x08002ef4
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8000714:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000718:	2000000c 	.word	0x2000000c
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 800071c:	2000000c 	.word	0x2000000c
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8000720:	20000310 	.word	0x20000310

08000724 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000724:	e7fe      	b.n	8000724 <ADC1_2_IRQHandler>
	...

08000728 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <SystemInit+0x4c>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	f042 0201 	orr.w	r2, r2, #1
 8000730:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
 8000732:	6859      	ldr	r1, [r3, #4]
 8000734:	4a10      	ldr	r2, [pc, #64]	; (8000778 <SystemInit+0x50>)
 8000736:	400a      	ands	r2, r1
 8000738:	605a      	str	r2, [r3, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000740:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000744:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800074c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800074e:	685a      	ldr	r2, [r3, #4]
 8000750:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000754:	605a      	str	r2, [r3, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEBFFFFFF;
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	f022 52a0 	bic.w	r2, r2, #335544320	; 0x14000000
 800075c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000;
 800075e:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8000762:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
 8000764:	2200      	movs	r2, #0
 8000766:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <SystemInit+0x54>)
 800076a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40021000 	.word	0x40021000
 8000778:	f0ff0000 	.word	0xf0ff0000
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000780:	b510      	push	{r4, lr}
 8000782:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000784:	f001 f9be 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8000788:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000790:	f000 fc7c 	bl	800108c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000794:	2200      	movs	r2, #0
 8000796:	4621      	mov	r1, r4
 8000798:	f04f 30ff 	mov.w	r0, #4294967295
 800079c:	f000 fc36 	bl	800100c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80007a0:	2000      	movs	r0, #0
 80007a2:	bd10      	pop	{r4, pc}

080007a4 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a4:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <HAL_Init+0x20>)
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a6:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a8:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007aa:	2003      	movs	r0, #3
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007ac:	f043 0310 	orr.w	r3, r3, #16
 80007b0:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b2:	f000 fc19 	bl	8000fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f7ff ffe2 	bl	8000780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007bc:	f002 fa28 	bl	8002c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80007c0:	2000      	movs	r0, #0
 80007c2:	bd08      	pop	{r3, pc}
 80007c4:	40022000 	.word	0x40022000

080007c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80007c8:	4a02      	ldr	r2, [pc, #8]	; (80007d4 <HAL_IncTick+0xc>)
 80007ca:	6813      	ldr	r3, [r2, #0]
 80007cc:	3301      	adds	r3, #1
 80007ce:	6013      	str	r3, [r2, #0]
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	20000028 	.word	0x20000028

080007d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80007d8:	4b01      	ldr	r3, [pc, #4]	; (80007e0 <HAL_GetTick+0x8>)
 80007da:	6818      	ldr	r0, [r3, #0]
}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	20000028 	.word	0x20000028

080007e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80007e4:	b513      	push	{r0, r1, r4, lr}
 80007e6:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80007e8:	f7ff fff6 	bl	80007d8 <HAL_GetTick>
 80007ec:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80007ee:	f7ff fff3 	bl	80007d8 <HAL_GetTick>
 80007f2:	9b01      	ldr	r3, [sp, #4]
 80007f4:	1b00      	subs	r0, r0, r4
 80007f6:	4298      	cmp	r0, r3
 80007f8:	d3f9      	bcc.n	80007ee <HAL_Delay+0xa>
  {
  }
}
 80007fa:	b002      	add	sp, #8
 80007fc:	bd10      	pop	{r4, pc}
	...

08000800 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000806:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800080a:	2b01      	cmp	r3, #1
 800080c:	f000 80ae 	beq.w	800096c <HAL_ADC_ConfigChannel+0x16c>
 8000810:	2301      	movs	r3, #1
 8000812:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000816:	684b      	ldr	r3, [r1, #4]
 8000818:	6804      	ldr	r4, [r0, #0]
 800081a:	2b06      	cmp	r3, #6
 800081c:	680d      	ldr	r5, [r1, #0]
 800081e:	d818      	bhi.n	8000852 <HAL_ADC_ConfigChannel+0x52>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000820:	6b67      	ldr	r7, [r4, #52]	; 0x34
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000822:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8000826:	fa92 f6a2 	rbit	r6, r2
 800082a:	fab6 f686 	clz	r6, r6
 800082e:	3b01      	subs	r3, #1
 8000830:	fa92 f2a2 	rbit	r2, r2
 8000834:	fab2 f282 	clz	r2, r2
 8000838:	435e      	muls	r6, r3
 800083a:	4353      	muls	r3, r2
 800083c:	f04f 0e1f 	mov.w	lr, #31
 8000840:	fa0e f606 	lsl.w	r6, lr, r6
 8000844:	ea27 0606 	bic.w	r6, r7, r6
 8000848:	fa05 f303 	lsl.w	r3, r5, r3
 800084c:	4333      	orrs	r3, r6
 800084e:	6363      	str	r3, [r4, #52]	; 0x34
 8000850:	e030      	b.n	80008b4 <HAL_ADC_ConfigChannel+0xb4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000852:	2b0c      	cmp	r3, #12
 8000854:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8000858:	d816      	bhi.n	8000888 <HAL_ADC_ConfigChannel+0x88>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800085a:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800085c:	fa92 f6a2 	rbit	r6, r2
 8000860:	fab6 f686 	clz	r6, r6
 8000864:	3b07      	subs	r3, #7
 8000866:	fa92 f2a2 	rbit	r2, r2
 800086a:	fab2 f282 	clz	r2, r2
 800086e:	435e      	muls	r6, r3
 8000870:	435a      	muls	r2, r3
 8000872:	f04f 0e1f 	mov.w	lr, #31
 8000876:	fa0e f606 	lsl.w	r6, lr, r6
 800087a:	ea27 0606 	bic.w	r6, r7, r6
 800087e:	fa05 f202 	lsl.w	r2, r5, r2
 8000882:	4332      	orrs	r2, r6
 8000884:	6322      	str	r2, [r4, #48]	; 0x30
 8000886:	e015      	b.n	80008b4 <HAL_ADC_ConfigChannel+0xb4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000888:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800088a:	fa92 f6a2 	rbit	r6, r2
 800088e:	fab6 f686 	clz	r6, r6
 8000892:	3b0d      	subs	r3, #13
 8000894:	fa92 f2a2 	rbit	r2, r2
 8000898:	fab2 f282 	clz	r2, r2
 800089c:	435e      	muls	r6, r3
 800089e:	4353      	muls	r3, r2
 80008a0:	f04f 0e1f 	mov.w	lr, #31
 80008a4:	fa0e f606 	lsl.w	r6, lr, r6
 80008a8:	ea27 0606 	bic.w	r6, r7, r6
 80008ac:	fa05 f303 	lsl.w	r3, r5, r3
 80008b0:	4333      	orrs	r3, r6
 80008b2:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80008b4:	2d09      	cmp	r5, #9
 80008b6:	f04f 0338 	mov.w	r3, #56	; 0x38
 80008ba:	688e      	ldr	r6, [r1, #8]
 80008bc:	d918      	bls.n	80008f0 <HAL_ADC_ConfigChannel+0xf0>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80008be:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 80008c2:	fa93 f7a3 	rbit	r7, r3
 80008c6:	fab7 f787 	clz	r7, r7
 80008ca:	f1a5 010a 	sub.w	r1, r5, #10
 80008ce:	fa93 f3a3 	rbit	r3, r3
 80008d2:	fab3 f283 	clz	r2, r3
 80008d6:	fb01 f307 	mul.w	r3, r1, r7
 80008da:	4351      	muls	r1, r2
 80008dc:	2707      	movs	r7, #7
 80008de:	fa07 f303 	lsl.w	r3, r7, r3
 80008e2:	ea2e 0303 	bic.w	r3, lr, r3
 80008e6:	fa06 f201 	lsl.w	r2, r6, r1
 80008ea:	431a      	orrs	r2, r3
 80008ec:	60e2      	str	r2, [r4, #12]
 80008ee:	e013      	b.n	8000918 <HAL_ADC_ConfigChannel+0x118>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80008f0:	6927      	ldr	r7, [r4, #16]
 80008f2:	fa93 f1a3 	rbit	r1, r3
 80008f6:	fab1 f181 	clz	r1, r1
 80008fa:	fa93 f3a3 	rbit	r3, r3
 80008fe:	fab3 f383 	clz	r3, r3
 8000902:	4369      	muls	r1, r5
 8000904:	436b      	muls	r3, r5
 8000906:	2207      	movs	r2, #7
 8000908:	fa02 f101 	lsl.w	r1, r2, r1
 800090c:	ea27 0101 	bic.w	r1, r7, r1
 8000910:	fa06 f203 	lsl.w	r2, r6, r3
 8000914:	430a      	orrs	r2, r1
 8000916:	6122      	str	r2, [r4, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000918:	f1a5 0310 	sub.w	r3, r5, #16
 800091c:	2b01      	cmp	r3, #1
 800091e:	d901      	bls.n	8000924 <HAL_ADC_ConfigChannel+0x124>
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000920:	2300      	movs	r3, #0
 8000922:	e01e      	b.n	8000962 <HAL_ADC_ConfigChannel+0x162>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <HAL_ADC_ConfigChannel+0x174>)
 8000926:	429c      	cmp	r4, r3
 8000928:	d116      	bne.n	8000958 <HAL_ADC_ConfigChannel+0x158>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800092a:	68a3      	ldr	r3, [r4, #8]
 800092c:	021b      	lsls	r3, r3, #8
 800092e:	d4f7      	bmi.n	8000920 <HAL_ADC_ConfigChannel+0x120>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000930:	68a3      	ldr	r3, [r4, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000932:	2d10      	cmp	r5, #16
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000934:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000938:	60a3      	str	r3, [r4, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800093a:	d1f1      	bne.n	8000920 <HAL_ADC_ConfigChannel+0x120>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800093c:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <HAL_ADC_ConfigChannel+0x178>)
 800093e:	4a0f      	ldr	r2, [pc, #60]	; (800097c <HAL_ADC_ConfigChannel+0x17c>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	fbb3 f2f2 	udiv	r2, r3, r2
 8000946:	230a      	movs	r3, #10
 8000948:	4353      	muls	r3, r2
          while(wait_loop_index != 0)
          {
            wait_loop_index--;
 800094a:	9301      	str	r3, [sp, #4]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
          while(wait_loop_index != 0)
 800094c:	9b01      	ldr	r3, [sp, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d0e6      	beq.n	8000920 <HAL_ADC_ConfigChannel+0x120>
          {
            wait_loop_index--;
 8000952:	9b01      	ldr	r3, [sp, #4]
 8000954:	3b01      	subs	r3, #1
 8000956:	e7f8      	b.n	800094a <HAL_ADC_ConfigChannel+0x14a>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000958:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800095a:	f043 0320 	orr.w	r3, r3, #32
 800095e:	6283      	str	r3, [r0, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000960:	2301      	movs	r3, #1
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000962:	2200      	movs	r2, #0
 8000964:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000968:	4618      	mov	r0, r3
 800096a:	e000      	b.n	800096e <HAL_ADC_ConfigChannel+0x16e>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800096c:	2002      	movs	r0, #2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
}
 800096e:	b003      	add	sp, #12
 8000970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000972:	bf00      	nop
 8000974:	40012400 	.word	0x40012400
 8000978:	20000000 	.word	0x20000000
 800097c:	000f4240 	.word	0x000f4240

08000980 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000980:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0;
  __IO uint32_t wait_loop_index = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000986:	6803      	ldr	r3, [r0, #0]
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000988:	4604      	mov	r4, r0
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800098a:	689a      	ldr	r2, [r3, #8]
 800098c:	07d2      	lsls	r2, r2, #31
 800098e:	d501      	bpl.n	8000994 <ADC_Enable+0x14>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000990:	2000      	movs	r0, #0
 8000992:	e026      	b.n	80009e2 <ADC_Enable+0x62>
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000994:	689a      	ldr	r2, [r3, #8]
 8000996:	f042 0201 	orr.w	r2, r2, #1
 800099a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <ADC_Enable+0x68>)
 800099e:	4a13      	ldr	r2, [pc, #76]	; (80009ec <ADC_Enable+0x6c>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	fbb3 f3f2 	udiv	r3, r3, r2
    while(wait_loop_index != 0)
    {
      wait_loop_index--;
 80009a6:	9301      	str	r3, [sp, #4]
    __HAL_ADC_ENABLE(hadc);
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
    while(wait_loop_index != 0)
 80009a8:	9b01      	ldr	r3, [sp, #4]
 80009aa:	b113      	cbz	r3, 80009b2 <ADC_Enable+0x32>
    {
      wait_loop_index--;
 80009ac:	9b01      	ldr	r3, [sp, #4]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	e7f9      	b.n	80009a6 <ADC_Enable+0x26>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80009b2:	f7ff ff11 	bl	80007d8 <HAL_GetTick>
 80009b6:	4606      	mov	r6, r0

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80009b8:	6823      	ldr	r3, [r4, #0]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	f013 0501 	ands.w	r5, r3, #1
 80009c0:	d1e6      	bne.n	8000990 <ADC_Enable+0x10>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80009c2:	f7ff ff09 	bl	80007d8 <HAL_GetTick>
 80009c6:	1b80      	subs	r0, r0, r6
 80009c8:	2802      	cmp	r0, #2
 80009ca:	d9f5      	bls.n	80009b8 <ADC_Enable+0x38>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80009ce:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    while(ADC_IS_ENABLE(hadc) == RESET)
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009d2:	f043 0310 	orr.w	r3, r3, #16
 80009d6:	62a3      	str	r3, [r4, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80009da:	2001      	movs	r0, #1
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	62e3      	str	r3, [r4, #44]	; 0x2c
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
}
 80009e2:	b002      	add	sp, #8
 80009e4:	bd70      	pop	{r4, r5, r6, pc}
 80009e6:	bf00      	nop
 80009e8:	20000000 	.word	0x20000000
 80009ec:	000f4240 	.word	0x000f4240

080009f0 <HAL_ADC_Start>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80009f0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80009f4:	b510      	push	{r4, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80009f6:	2b01      	cmp	r3, #1
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80009f8:	4604      	mov	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80009fa:	d055      	beq.n	8000aa8 <HAL_ADC_Start+0xb8>
 80009fc:	2301      	movs	r3, #1
 80009fe:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000a02:	f7ff ffbd 	bl	8000980 <ADC_Enable>
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000a06:	2800      	cmp	r0, #0
 8000a08:	d14a      	bne.n	8000aa0 <HAL_ADC_Start+0xb0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000a0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a0c:	4a27      	ldr	r2, [pc, #156]	; (8000aac <HAL_ADC_Start+0xbc>)
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a12:	f023 0301 	bic.w	r3, r3, #1
 8000a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a1a:	62a3      	str	r3, [r4, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a1c:	6823      	ldr	r3, [r4, #0]
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d104      	bne.n	8000a2c <HAL_ADC_Start+0x3c>
 8000a22:	4923      	ldr	r1, [pc, #140]	; (8000ab0 <HAL_ADC_Start+0xc0>)
 8000a24:	684a      	ldr	r2, [r1, #4]
 8000a26:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000a2a:	d105      	bne.n	8000a38 <HAL_ADC_Start+0x48>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a2c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000a2e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8000a32:	62a2      	str	r2, [r4, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a34:	685a      	ldr	r2, [r3, #4]
 8000a36:	e004      	b.n	8000a42 <HAL_ADC_Start+0x52>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a38:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000a3a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000a3e:	62a2      	str	r2, [r4, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000a40:	684a      	ldr	r2, [r1, #4]
 8000a42:	0552      	lsls	r2, r2, #21
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000a44:	bf41      	itttt	mi
 8000a46:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 8000a48:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000a4c:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000a50:	62a2      	strmi	r2, [r4, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a52:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000a54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000a58:	bf1c      	itt	ne
 8000a5a:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8000a5c:	f022 0206 	bicne.w	r2, r2, #6
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a60:	62e2      	str	r2, [r4, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000a62:	2200      	movs	r2, #0
 8000a64:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000a68:	f06f 0202 	mvn.w	r2, #2
 8000a6c:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a6e:	689a      	ldr	r2, [r3, #8]
 8000a70:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000a74:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000a78:	d10c      	bne.n	8000a94 <HAL_ADC_Start+0xa4>
 8000a7a:	4a0c      	ldr	r2, [pc, #48]	; (8000aac <HAL_ADC_Start+0xbc>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d105      	bne.n	8000a8c <HAL_ADC_Start+0x9c>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a80:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8000a84:	6852      	ldr	r2, [r2, #4]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a86:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000a8a:	d103      	bne.n	8000a94 <HAL_ADC_Start+0xa4>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000a8c:	689a      	ldr	r2, [r3, #8]
 8000a8e:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000a92:	e002      	b.n	8000a9a <HAL_ADC_Start+0xaa>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000a94:	689a      	ldr	r2, [r3, #8]
 8000a96:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	bd10      	pop	{r4, pc}
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000aa6:	bd10      	pop	{r4, pc}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000aa8:	2002      	movs	r0, #2
    __HAL_UNLOCK(hadc);
  }
    
  /* Return function status */
  return tmp_hal_status;
}
 8000aaa:	bd10      	pop	{r4, pc}
 8000aac:	40012800 	.word	0x40012800
 8000ab0:	40012400 	.word	0x40012400

08000ab4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000ab4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ab6:	6803      	ldr	r3, [r0, #0]
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000ab8:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000aba:	689a      	ldr	r2, [r3, #8]
 8000abc:	07d2      	lsls	r2, r2, #31
 8000abe:	d401      	bmi.n	8000ac4 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	bd38      	pop	{r3, r4, r5, pc}
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000ac4:	689a      	ldr	r2, [r3, #8]
 8000ac6:	f022 0201 	bic.w	r2, r2, #1
 8000aca:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000acc:	f7ff fe84 	bl	80007d8 <HAL_GetTick>
 8000ad0:	4605      	mov	r5, r0
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ad2:	6823      	ldr	r3, [r4, #0]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	07db      	lsls	r3, r3, #31
 8000ad8:	d5f2      	bpl.n	8000ac0 <ADC_ConversionStop_Disable+0xc>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ada:	f7ff fe7d 	bl	80007d8 <HAL_GetTick>
 8000ade:	1b40      	subs	r0, r0, r5
 8000ae0:	2802      	cmp	r0, #2
 8000ae2:	d9f6      	bls.n	8000ad2 <ADC_ConversionStop_Disable+0x1e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ae4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ae6:	2001      	movs	r0, #1
    while(ADC_IS_ENABLE(hadc) != RESET)
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ae8:	f043 0310 	orr.w	r3, r3, #16
 8000aec:	62a3      	str	r3, [r4, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000aee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000af6:	bd38      	pop	{r3, r4, r5, pc}

08000af8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000af8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  uint32_t tmp_sqr1 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000afa:	4604      	mov	r4, r0
 8000afc:	2800      	cmp	r0, #0
 8000afe:	f000 8088 	beq.w	8000c12 <HAL_ADC_Init+0x11a>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b02:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000b04:	b923      	cbnz	r3, 8000b10 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b06:	62c3      	str	r3, [r0, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b08:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b0c:	f002 f8c6 	bl	8002c9c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b10:	4620      	mov	r0, r4
 8000b12:	f7ff ffcf 	bl	8000ab4 <ADC_ConversionStop_Disable>
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000b18:	f013 0f10 	tst.w	r3, #16
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b1e:	d175      	bne.n	8000c0c <HAL_ADC_Init+0x114>
 8000b20:	2800      	cmp	r0, #0
 8000b22:	d173      	bne.n	8000c0c <HAL_ADC_Init+0x114>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b28:	f023 0302 	bic.w	r3, r3, #2
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	62a3      	str	r3, [r4, #40]	; 0x28
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000b32:	68e0      	ldr	r0, [r4, #12]
 8000b34:	2302      	movs	r3, #2
 8000b36:	fa93 f3a3 	rbit	r3, r3
 8000b3a:	fab3 f383 	clz	r3, r3
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000b3e:	6861      	ldr	r1, [r4, #4]
 8000b40:	69e2      	ldr	r2, [r4, #28]
 8000b42:	fa00 f303 	lsl.w	r3, r0, r3
 8000b46:	430a      	orrs	r2, r1
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b48:	68a1      	ldr	r1, [r4, #8]
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000b4a:	4313      	orrs	r3, r2
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b4c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8000b50:	d005      	beq.n	8000b5e <HAL_ADC_Init+0x66>
 8000b52:	2901      	cmp	r1, #1
 8000b54:	bf14      	ite	ne
 8000b56:	2200      	movne	r2, #0
 8000b58:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8000b5c:	e000      	b.n	8000b60 <HAL_ADC_Init+0x68>
 8000b5e:	460a      	mov	r2, r1
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b60:	6965      	ldr	r5, [r4, #20]
 8000b62:	2d01      	cmp	r5, #1
 8000b64:	d115      	bne.n	8000b92 <HAL_ADC_Init+0x9a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b66:	b960      	cbnz	r0, 8000b82 <HAL_ADC_Init+0x8a>
 8000b68:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 8000b6c:	fa90 f0a0 	rbit	r0, r0
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b70:	fab0 f580 	clz	r5, r0
 8000b74:	69a0      	ldr	r0, [r4, #24]
 8000b76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000b7a:	3801      	subs	r0, #1
 8000b7c:	40a8      	lsls	r0, r5
 8000b7e:	4302      	orrs	r2, r0
 8000b80:	e007      	b.n	8000b92 <HAL_ADC_Init+0x9a>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b82:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000b84:	f040 0020 	orr.w	r0, r0, #32
 8000b88:	62a0      	str	r0, [r4, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b8a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000b8c:	f040 0001 	orr.w	r0, r0, #1
 8000b90:	62e0      	str	r0, [r4, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b92:	6820      	ldr	r0, [r4, #0]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b94:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b98:	6845      	ldr	r5, [r0, #4]
 8000b9a:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000b9e:	ea42 0205 	orr.w	r2, r2, r5
 8000ba2:	6042      	str	r2, [r0, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ba4:	6885      	ldr	r5, [r0, #8]
 8000ba6:	4a1c      	ldr	r2, [pc, #112]	; (8000c18 <HAL_ADC_Init+0x120>)
 8000ba8:	ea02 0205 	and.w	r2, r2, r5
 8000bac:	ea42 0203 	orr.w	r2, r2, r3
 8000bb0:	6082      	str	r2, [r0, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000bb2:	d001      	beq.n	8000bb8 <HAL_ADC_Init+0xc0>
 8000bb4:	2901      	cmp	r1, #1
 8000bb6:	d10a      	bne.n	8000bce <HAL_ADC_Init+0xd6>
 8000bb8:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 8000bbc:	fa92 f2a2 	rbit	r2, r2
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000bc0:	fab2 f282 	clz	r2, r2
 8000bc4:	6921      	ldr	r1, [r4, #16]
 8000bc6:	3901      	subs	r1, #1
 8000bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bcc:	e000      	b.n	8000bd0 <HAL_ADC_Init+0xd8>
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  uint32_t tmp_sqr1 = 0;
 8000bce:	2200      	movs	r2, #0
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000bd0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8000bd2:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	62c2      	str	r2, [r0, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bda:	6881      	ldr	r1, [r0, #8]
 8000bdc:	4a0f      	ldr	r2, [pc, #60]	; (8000c1c <HAL_ADC_Init+0x124>)
 8000bde:	400a      	ands	r2, r1
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d108      	bne.n	8000bf6 <HAL_ADC_Init+0xfe>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000be4:	2000      	movs	r0, #0
 8000be6:	62e0      	str	r0, [r4, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000be8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000bea:	f023 0303 	bic.w	r3, r3, #3
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	62a3      	str	r3, [r4, #40]	; 0x28
 8000bf4:	bd38      	pop	{r3, r4, r5, pc}
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bf6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000bf8:	f023 0312 	bic.w	r3, r3, #18
 8000bfc:	f043 0310 	orr.w	r3, r3, #16
 8000c00:	62a3      	str	r3, [r4, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c0a:	e002      	b.n	8000c12 <HAL_ADC_Init+0x11a>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c0c:	f043 0310 	orr.w	r3, r3, #16
 8000c10:	62a3      	str	r3, [r4, #40]	; 0x28
  uint32_t tmp_sqr1 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8000c12:	2001      	movs	r0, #1
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8000c14:	bd38      	pop	{r3, r4, r5, pc}
 8000c16:	bf00      	nop
 8000c18:	ffe1f7fd 	.word	0xffe1f7fd
 8000c1c:	ff1f0efe 	.word	0xff1f0efe

08000c20 <HAL_CAN_Init>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 8000c20:	b570      	push	{r4, r5, r6, lr}
  uint32_t status = CAN_INITSTATUS_FAILED;  /* Default init status */
  uint32_t tickstart = 0;
  uint32_t tmp_mcr = 0;
  
  /* Check CAN handle */
  if(hcan == NULL)
 8000c22:	4604      	mov	r4, r0
 8000c24:	2800      	cmp	r0, #0
 8000c26:	d076      	beq.n	8000d16 <HAL_CAN_Init+0xf6>
  assert_param(IS_CAN_SJW(hcan->Init.SJW));
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  
  if(hcan->State == HAL_CAN_STATE_RESET)
 8000c28:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000c2c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c30:	b91b      	cbnz	r3, 8000c3a <HAL_CAN_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 8000c32:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 8000c36:	f002 f863 	bl	8002d00 <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c40:	6823      	ldr	r3, [r4, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	f022 0202 	bic.w	r2, r2, #2
 8000c48:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	f042 0201 	orr.w	r2, r2, #1
 8000c50:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();   
 8000c52:	f7ff fdc1 	bl	80007d8 <HAL_GetTick>
 8000c56:	4606      	mov	r6, r0
  
  /* Wait the acknowledge */
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8000c58:	6822      	ldr	r2, [r4, #0]
 8000c5a:	6853      	ldr	r3, [r2, #4]
 8000c5c:	f013 0501 	ands.w	r5, r3, #1
 8000c60:	d105      	bne.n	8000c6e <HAL_CAN_Init+0x4e>
  {
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8000c62:	f7ff fdb9 	bl	80007d8 <HAL_GetTick>
 8000c66:	1b80      	subs	r0, r0, r6
 8000c68:	280a      	cmp	r0, #10
 8000c6a:	d9f5      	bls.n	8000c58 <HAL_CAN_Init+0x38>
 8000c6c:	e041      	b.n	8000cf2 <HAL_CAN_Init+0xd2>
      return HAL_TIMEOUT;
    }
  }

  /* Check acknowledge */
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000c6e:	6853      	ldr	r3, [r2, #4]
 8000c70:	07d9      	lsls	r1, r3, #31
 8000c72:	d54d      	bpl.n	8000d10 <HAL_CAN_Init+0xf0>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 8000c74:	69a3      	ldr	r3, [r4, #24]
    {
      SET_BIT(tmp_mcr, CAN_MCR_TTCM);
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 8000c76:	69e1      	ldr	r1, [r4, #28]
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
    {
      SET_BIT(tmp_mcr, CAN_MCR_TTCM);
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	bf0c      	ite	eq
 8000c7c:	2380      	moveq	r3, #128	; 0x80
 8000c7e:	2300      	movne	r3, #0
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 8000c80:	2901      	cmp	r1, #1
    {
      SET_BIT(tmp_mcr, CAN_MCR_ABOM);
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 8000c82:	6a21      	ldr	r1, [r4, #32]
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
    {
      SET_BIT(tmp_mcr, CAN_MCR_ABOM);
 8000c84:	bf08      	it	eq
 8000c86:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 8000c8a:	2901      	cmp	r1, #1
    {
      SET_BIT(tmp_mcr, CAN_MCR_AWUM);
    }
    
    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 8000c8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
    {
      SET_BIT(tmp_mcr, CAN_MCR_AWUM);
 8000c8e:	bf08      	it	eq
 8000c90:	f043 0320 	orreq.w	r3, r3, #32
    }
    
    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 8000c94:	2901      	cmp	r1, #1
    {
      SET_BIT(tmp_mcr, CAN_MCR_NART);
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 8000c96:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    }
    
    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
    {
      SET_BIT(tmp_mcr, CAN_MCR_NART);
 8000c98:	bf08      	it	eq
 8000c9a:	f043 0310 	orreq.w	r3, r3, #16
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 8000c9e:	2901      	cmp	r1, #1
    {
      SET_BIT(tmp_mcr, CAN_MCR_RFLM);
    }
    
    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 8000ca0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
    {
      SET_BIT(tmp_mcr, CAN_MCR_RFLM);
 8000ca2:	bf08      	it	eq
 8000ca4:	f043 0308 	orreq.w	r3, r3, #8
    }
    
    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 8000ca8:	2901      	cmp	r1, #1
    {
      SET_BIT(tmp_mcr, CAN_MCR_TXFP);
    }
    
    /* Update register MCR */
    MODIFY_REG(hcan->Instance->MCR,
 8000caa:	6811      	ldr	r1, [r2, #0]
    }
    
    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
    {
      SET_BIT(tmp_mcr, CAN_MCR_TXFP);
 8000cac:	bf08      	it	eq
 8000cae:	f043 0304 	orreq.w	r3, r3, #4
    }
    
    /* Update register MCR */
    MODIFY_REG(hcan->Instance->MCR,
 8000cb2:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
 8000cb6:	430b      	orrs	r3, r1
 8000cb8:	6013      	str	r3, [r2, #0]
               CAN_MCR_RFLM |
               CAN_MCR_TXFP,
               tmp_mcr);
    
    /* Set the bit timing register */
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000cba:	68a1      	ldr	r1, [r4, #8]
 8000cbc:	68e3      	ldr	r3, [r4, #12]
 8000cbe:	4319      	orrs	r1, r3
 8000cc0:	6923      	ldr	r3, [r4, #16]
 8000cc2:	4319      	orrs	r1, r3
 8000cc4:	6963      	ldr	r3, [r4, #20]
 8000cc6:	4319      	orrs	r1, r3
 8000cc8:	6863      	ldr	r3, [r4, #4]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	430b      	orrs	r3, r1
 8000cce:	61d3      	str	r3, [r2, #28]
                                              hcan->Init.BS1            |
                                              hcan->Init.BS2            |
                                              (hcan->Init.Prescaler - 1) ));

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cd0:	6813      	ldr	r3, [r2, #0]
 8000cd2:	f023 0301 	bic.w	r3, r3, #1
 8000cd6:	6013      	str	r3, [r2, #0]

    /* Get timeout */
    tickstart = HAL_GetTick();   
 8000cd8:	f7ff fd7e 	bl	80007d8 <HAL_GetTick>
 8000cdc:	4606      	mov	r6, r0
   
    /* Wait the acknowledge */
    while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8000cde:	6822      	ldr	r2, [r4, #0]
 8000ce0:	6853      	ldr	r3, [r2, #4]
 8000ce2:	f013 0501 	ands.w	r5, r3, #1
 8000ce6:	d10a      	bne.n	8000cfe <HAL_CAN_Init+0xde>
    {
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8000ce8:	f7ff fd76 	bl	80007d8 <HAL_GetTick>
 8000cec:	1b80      	subs	r0, r0, r6
 8000cee:	280a      	cmp	r0, #10
 8000cf0:	d9f5      	bls.n	8000cde <HAL_CAN_Init+0xbe>
      {
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000cf2:	2003      	movs	r0, #3
 8000cf4:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hcan);
 8000cf8:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38

        return HAL_TIMEOUT;
 8000cfc:	bd70      	pop	{r4, r5, r6, pc}
      }
    }

    /* Check acknowledged */
    if (HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8000cfe:	6853      	ldr	r3, [r2, #4]
 8000d00:	07db      	lsls	r3, r3, #31
 8000d02:	d505      	bpl.n	8000d10 <HAL_CAN_Init+0xf0>
  }
 
  if(status == CAN_INITSTATUS_SUCCESS)
  {
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d04:	2000      	movs	r0, #0
    
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 8000d06:	2301      	movs	r3, #1
  }
 
  if(status == CAN_INITSTATUS_SUCCESS)
  {
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d08:	63e0      	str	r0, [r4, #60]	; 0x3c
    
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 8000d0a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
    /* Return function status */
    return HAL_OK;
 8000d0e:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 8000d10:	2304      	movs	r3, #4
 8000d12:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
    /* Return function status */
    return HAL_ERROR;
 8000d16:	2001      	movs	r0, #1
  }
}
 8000d18:	bd70      	pop	{r4, r5, r6, pc}

08000d1a <HAL_CAN_Receive_IT>:
HAL_StatusTypeDef HAL_CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));
  
  if((hcan->State == HAL_CAN_STATE_READY) || (hcan->State == HAL_CAN_STATE_BUSY_TX))
 8000d1a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
  * @param  FIFONumber: Specify the FIFO number    
  * @retval HAL status
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 8000d1e:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));
  
  if((hcan->State == HAL_CAN_STATE_READY) || (hcan->State == HAL_CAN_STATE_BUSY_TX))
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d003      	beq.n	8000d2c <HAL_CAN_Receive_IT+0x12>
 8000d24:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000d28:	2b12      	cmp	r3, #18
 8000d2a:	d126      	bne.n	8000d7a <HAL_CAN_Receive_IT+0x60>
  {
    /* Process locked */
    __HAL_LOCK(hcan);
 8000d2c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d022      	beq.n	8000d7a <HAL_CAN_Receive_IT+0x60>
 8000d34:	2301      	movs	r3, #1
 8000d36:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
    if(hcan->State == HAL_CAN_STATE_BUSY_TX) 
 8000d3a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
    /*  - Enable Error passive Interrupt */
    /*  - Enable Bus-off Interrupt */
    /*  - Enable Last error code Interrupt */
    /*  - Enable Error Interrupt */
    /*  - Enable Transmit mailbox empty Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 8000d3e:	6802      	ldr	r2, [r0, #0]
  if((hcan->State == HAL_CAN_STATE_READY) || (hcan->State == HAL_CAN_STATE_BUSY_TX))
  {
    /* Process locked */
    __HAL_LOCK(hcan);
  
    if(hcan->State == HAL_CAN_STATE_BUSY_TX) 
 8000d40:	2b12      	cmp	r3, #18
    {
      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
 8000d42:	bf0c      	ite	eq
 8000d44:	2332      	moveq	r3, #50	; 0x32
    }
    else
    {
      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_BUSY_RX;
 8000d46:	2322      	movne	r3, #34	; 0x22
 8000d48:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    }
    
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	63c3      	str	r3, [r0, #60]	; 0x3c
    /*  - Enable Error passive Interrupt */
    /*  - Enable Bus-off Interrupt */
    /*  - Enable Last error code Interrupt */
    /*  - Enable Error Interrupt */
    /*  - Enable Transmit mailbox empty Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 8000d50:	6954      	ldr	r4, [r2, #20]
 8000d52:	f444 440f 	orr.w	r4, r4, #36608	; 0x8f00
 8000d56:	f044 0401 	orr.w	r4, r4, #1
 8000d5a:	6154      	str	r4, [r2, #20]
                              CAN_IT_LEC |
                              CAN_IT_ERR |
                              CAN_IT_TME  );

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 8000d5c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    if(FIFONumber == CAN_FIFO0)
 8000d60:	b929      	cbnz	r1, 8000d6e <HAL_CAN_Receive_IT+0x54>
    {
      /* Enable FIFO 0 message pending Interrupt */
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP0);
 8000d62:	6953      	ldr	r3, [r2, #20]
  {
    return HAL_BUSY;
  }
  
  /* Return function status */
  return HAL_OK;
 8000d64:	4608      	mov	r0, r1
    __HAL_UNLOCK(hcan);

    if(FIFONumber == CAN_FIFO0)
    {
      /* Enable FIFO 0 message pending Interrupt */
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP0);
 8000d66:	f043 0302 	orr.w	r3, r3, #2
 8000d6a:	6153      	str	r3, [r2, #20]
 8000d6c:	bd10      	pop	{r4, pc}
    }
    else
    {
      /* Enable FIFO 1 message pending Interrupt */
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP1);
 8000d6e:	6951      	ldr	r1, [r2, #20]
  {
    return HAL_BUSY;
  }
  
  /* Return function status */
  return HAL_OK;
 8000d70:	4618      	mov	r0, r3
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP0);
    }
    else
    {
      /* Enable FIFO 1 message pending Interrupt */
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP1);
 8000d72:	f041 0110 	orr.w	r1, r1, #16
 8000d76:	6151      	str	r1, [r2, #20]
 8000d78:	bd10      	pop	{r4, pc}
    }
    
  }
  else
  {
    return HAL_BUSY;
 8000d7a:	2002      	movs	r0, #2
  }
  
  /* Return function status */
  return HAL_OK;
}
 8000d7c:	bd10      	pop	{r4, pc}

08000d7e <HAL_CAN_TxCpltCallback>:
 8000d7e:	4770      	bx	lr

08000d80 <CAN_Receive_IT>:
  * @param  FIFONumber: Specify the FIFO number    
  * @retval HAL status
  * @retval None
  */
static HAL_StatusTypeDef CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 8000d80:	b570      	push	{r4, r5, r6, lr}
  /* Get the Id */
  hcan->pRxMsg->IDE = (uint8_t)0x04 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8000d82:	6805      	ldr	r5, [r0, #0]
 8000d84:	010b      	lsls	r3, r1, #4
 8000d86:	18ec      	adds	r4, r5, r3
 8000d88:	f8d4 61b0 	ldr.w	r6, [r4, #432]	; 0x1b0
 8000d8c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8000d8e:	f006 0604 	and.w	r6, r6, #4
 8000d92:	6096      	str	r6, [r2, #8]
  if (hcan->pRxMsg->IDE == CAN_ID_STD)
 8000d94:	b926      	cbnz	r6, 8000da0 <CAN_Receive_IT+0x20>
  {
    hcan->pRxMsg->StdId = (uint32_t)0x000007FF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 21);
 8000d96:	f8d4 61b0 	ldr.w	r6, [r4, #432]	; 0x1b0
 8000d9a:	0d76      	lsrs	r6, r6, #21
 8000d9c:	6016      	str	r6, [r2, #0]
 8000d9e:	e003      	b.n	8000da8 <CAN_Receive_IT+0x28>
  }
  else
  {
    hcan->pRxMsg->ExtId = (uint32_t)0x1FFFFFFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3);
 8000da0:	f8d4 61b0 	ldr.w	r6, [r4, #432]	; 0x1b0
 8000da4:	08f6      	lsrs	r6, r6, #3
 8000da6:	6056      	str	r6, [r2, #4]
  }
  
  hcan->pRxMsg->RTR = (uint8_t)0x02 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8000da8:	f8d4 61b0 	ldr.w	r6, [r4, #432]	; 0x1b0
  /* Get the DLC */
  hcan->pRxMsg->DLC = (uint8_t)0x0F & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
  /* Get the FMI */
  hcan->pRxMsg->FMI = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8);
  /* Get the data field */
  hcan->pRxMsg->Data[0] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
 8000dac:	441d      	add	r5, r3
  else
  {
    hcan->pRxMsg->ExtId = (uint32_t)0x1FFFFFFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3);
  }
  
  hcan->pRxMsg->RTR = (uint8_t)0x02 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8000dae:	f006 0602 	and.w	r6, r6, #2
 8000db2:	60d6      	str	r6, [r2, #12]
  /* Get the DLC */
  hcan->pRxMsg->DLC = (uint8_t)0x0F & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 8000db4:	f8d4 61b4 	ldr.w	r6, [r4, #436]	; 0x1b4
 8000db8:	f006 060f 	and.w	r6, r6, #15
 8000dbc:	6116      	str	r6, [r2, #16]
  /* Get the FMI */
  hcan->pRxMsg->FMI = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8000dbe:	f8d4 41b4 	ldr.w	r4, [r4, #436]	; 0x1b4
 8000dc2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8000dc6:	61d4      	str	r4, [r2, #28]
  /* Get the data field */
  hcan->pRxMsg->Data[0] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
 8000dc8:	f8d5 41b8 	ldr.w	r4, [r5, #440]	; 0x1b8
 8000dcc:	7514      	strb	r4, [r2, #20]
  hcan->pRxMsg->Data[1] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8000dce:	6802      	ldr	r2, [r0, #0]
 8000dd0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8000dd2:	441a      	add	r2, r3
 8000dd4:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000dd8:	0a12      	lsrs	r2, r2, #8
 8000dda:	7562      	strb	r2, [r4, #21]
  hcan->pRxMsg->Data[2] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8000ddc:	6802      	ldr	r2, [r0, #0]
 8000dde:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8000de0:	441a      	add	r2, r3
 8000de2:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000de6:	0c12      	lsrs	r2, r2, #16
 8000de8:	75a2      	strb	r2, [r4, #22]
  hcan->pRxMsg->Data[3] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8000dea:	6802      	ldr	r2, [r0, #0]
 8000dec:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8000dee:	441a      	add	r2, r3
 8000df0:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000df4:	0e12      	lsrs	r2, r2, #24
 8000df6:	75e2      	strb	r2, [r4, #23]
  hcan->pRxMsg->Data[4] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR;
 8000df8:	6802      	ldr	r2, [r0, #0]
 8000dfa:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8000dfc:	441a      	add	r2, r3
 8000dfe:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000e02:	7622      	strb	r2, [r4, #24]
  hcan->pRxMsg->Data[5] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 8);
 8000e04:	6802      	ldr	r2, [r0, #0]
 8000e06:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8000e08:	441a      	add	r2, r3
 8000e0a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000e0e:	0a12      	lsrs	r2, r2, #8
 8000e10:	7662      	strb	r2, [r4, #25]
  hcan->pRxMsg->Data[6] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8000e12:	6802      	ldr	r2, [r0, #0]
 8000e14:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8000e16:	441a      	add	r2, r3
 8000e18:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000e1c:	0c12      	lsrs	r2, r2, #16
 8000e1e:	76a2      	strb	r2, [r4, #26]
  hcan->pRxMsg->Data[7] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 24);
 8000e20:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8000e22:	6804      	ldr	r4, [r0, #0]
 8000e24:	4423      	add	r3, r4
 8000e26:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8000e2a:	0e1b      	lsrs	r3, r3, #24
 8000e2c:	76d3      	strb	r3, [r2, #27]
 8000e2e:	6803      	ldr	r3, [r0, #0]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8000e30:	b939      	cbnz	r1, 8000e42 <CAN_Receive_IT+0xc2>
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 8000e32:	68da      	ldr	r2, [r3, #12]
 8000e34:	f042 0220 	orr.w	r2, r2, #32
 8000e38:	60da      	str	r2, [r3, #12]
    
    /* Disable FIFO 0 message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP0);
 8000e3a:	695a      	ldr	r2, [r3, #20]
 8000e3c:	f022 0202 	bic.w	r2, r2, #2
 8000e40:	e006      	b.n	8000e50 <CAN_Receive_IT+0xd0>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
 8000e42:	691a      	ldr	r2, [r3, #16]
 8000e44:	f042 0220 	orr.w	r2, r2, #32
 8000e48:	611a      	str	r2, [r3, #16]
    
    /* Disable FIFO 1 message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP1);
 8000e4a:	695a      	ldr	r2, [r3, #20]
 8000e4c:	f022 0210 	bic.w	r2, r2, #16
 8000e50:	615a      	str	r2, [r3, #20]
  }
  
  if(hcan->State == HAL_CAN_STATE_BUSY_RX)
 8000e52:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 8000e56:	2a22      	cmp	r2, #34	; 0x22
    /*  - Disable Error warning Interrupt */
    /*  - Disable Error passive Interrupt */
    /*  - Disable Bus-off Interrupt */
    /*  - Disable Last error code Interrupt */
    /*  - Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8000e58:	bf02      	ittt	eq
 8000e5a:	695a      	ldreq	r2, [r3, #20]
 8000e5c:	f422 420f 	biceq.w	r2, r2, #36608	; 0x8f00
 8000e60:	615a      	streq	r2, [r3, #20]
                               CAN_IT_BOF |
                               CAN_IT_LEC |
                               CAN_IT_ERR  );
  }
  
  if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
 8000e62:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000e66:	2b32      	cmp	r3, #50	; 0x32
  {
    /* Disable CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_TX;
 8000e68:	bf0c      	ite	eq
 8000e6a:	2312      	moveq	r3, #18
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 8000e6c:	2301      	movne	r3, #1
 8000e6e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  }

  /* Receive complete callback */ 
  HAL_CAN_RxCpltCallback(hcan);
 8000e72:	f001 fbd3 	bl	800261c <HAL_CAN_RxCpltCallback>

  /* Return function status */
  return HAL_OK;
}
 8000e76:	2000      	movs	r0, #0
 8000e78:	bd70      	pop	{r4, r5, r6, pc}

08000e7a <HAL_CAN_ErrorCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000e7a:	4770      	bx	lr

08000e7c <HAL_CAN_IRQHandler>:
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef* hcan)
{
  /* Check End of transmission flag */
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 8000e7c:	6803      	ldr	r3, [r0, #0]
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef* hcan)
{
 8000e7e:	b510      	push	{r4, lr}
  /* Check End of transmission flag */
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 8000e80:	695a      	ldr	r2, [r3, #20]
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef* hcan)
{
 8000e82:	4604      	mov	r4, r0
  /* Check End of transmission flag */
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 8000e84:	07d2      	lsls	r2, r2, #31
 8000e86:	d528      	bpl.n	8000eda <HAL_CAN_IRQHandler+0x5e>
  {
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 8000e88:	6899      	ldr	r1, [r3, #8]
 8000e8a:	4a54      	ldr	r2, [pc, #336]	; (8000fdc <HAL_CAN_IRQHandler+0x160>)
 8000e8c:	400a      	ands	r2, r1
 8000e8e:	4953      	ldr	r1, [pc, #332]	; (8000fdc <HAL_CAN_IRQHandler+0x160>)
 8000e90:	428a      	cmp	r2, r1
 8000e92:	d00b      	beq.n	8000eac <HAL_CAN_IRQHandler+0x30>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 8000e94:	6899      	ldr	r1, [r3, #8]
void HAL_CAN_IRQHandler(CAN_HandleTypeDef* hcan)
{
  /* Check End of transmission flag */
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
  {
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 8000e96:	4a52      	ldr	r2, [pc, #328]	; (8000fe0 <HAL_CAN_IRQHandler+0x164>)
 8000e98:	400a      	ands	r2, r1
 8000e9a:	4951      	ldr	r1, [pc, #324]	; (8000fe0 <HAL_CAN_IRQHandler+0x164>)
 8000e9c:	428a      	cmp	r2, r1
 8000e9e:	d005      	beq.n	8000eac <HAL_CAN_IRQHandler+0x30>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2)))
 8000ea0:	6899      	ldr	r1, [r3, #8]
{
  /* Check End of transmission flag */
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
  {
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 8000ea2:	4a50      	ldr	r2, [pc, #320]	; (8000fe4 <HAL_CAN_IRQHandler+0x168>)
 8000ea4:	400a      	ands	r2, r1
 8000ea6:	494f      	ldr	r1, [pc, #316]	; (8000fe4 <HAL_CAN_IRQHandler+0x168>)
 8000ea8:	428a      	cmp	r2, r1
 8000eaa:	d116      	bne.n	8000eda <HAL_CAN_IRQHandler+0x5e>
  * @retval HAL status
  */
static HAL_StatusTypeDef CAN_Transmit_IT(CAN_HandleTypeDef* hcan)
{
  /* Disable Transmit mailbox empty Interrupt */
  __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
 8000eac:	695a      	ldr	r2, [r3, #20]
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_READY;
  }
  
  /* Transmission complete callback */ 
  HAL_CAN_TxCpltCallback(hcan);
 8000eae:	4620      	mov	r0, r4
  * @retval HAL status
  */
static HAL_StatusTypeDef CAN_Transmit_IT(CAN_HandleTypeDef* hcan)
{
  /* Disable Transmit mailbox empty Interrupt */
  __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
 8000eb0:	f022 0201 	bic.w	r2, r2, #1
 8000eb4:	615a      	str	r2, [r3, #20]
  
  if(hcan->State == HAL_CAN_STATE_BUSY_TX)
 8000eb6:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8000eba:	2a12      	cmp	r2, #18
    /*  - Disable Error warning Interrupt */
    /*  - Disable Error passive Interrupt */
    /*  - Disable Bus-off Interrupt */
    /*  - Disable Last error code Interrupt */
    /*  - Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8000ebc:	bf02      	ittt	eq
 8000ebe:	695a      	ldreq	r2, [r3, #20]
 8000ec0:	f422 420f 	biceq.w	r2, r2, #36608	; 0x8f00
 8000ec4:	615a      	streq	r2, [r3, #20]
                               CAN_IT_BOF |
                               CAN_IT_LEC |
                               CAN_IT_ERR  );
  }
  
  if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
 8000ec6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8000eca:	2b32      	cmp	r3, #50	; 0x32
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_RX;
 8000ecc:	bf0c      	ite	eq
 8000ece:	2322      	moveq	r3, #34	; 0x22
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 8000ed0:	2301      	movne	r3, #1
 8000ed2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  }
  
  /* Transmission complete callback */ 
  HAL_CAN_TxCpltCallback(hcan);
 8000ed6:	f7ff ff52 	bl	8000d7e <HAL_CAN_TxCpltCallback>
      CAN_Transmit_IT(hcan);
    }
  }
  
  /* Check End of reception flag for FIFO0 */
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 8000eda:	6823      	ldr	r3, [r4, #0]
 8000edc:	695a      	ldr	r2, [r3, #20]
 8000ede:	0790      	lsls	r0, r2, #30
 8000ee0:	d506      	bpl.n	8000ef0 <HAL_CAN_IRQHandler+0x74>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0) != 0))
 8000ee2:	68db      	ldr	r3, [r3, #12]
      CAN_Transmit_IT(hcan);
    }
  }
  
  /* Check End of reception flag for FIFO0 */
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 8000ee4:	0799      	lsls	r1, r3, #30
 8000ee6:	d003      	beq.n	8000ef0 <HAL_CAN_IRQHandler+0x74>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0) != 0))
  {
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO0);
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4620      	mov	r0, r4
 8000eec:	f7ff ff48 	bl	8000d80 <CAN_Receive_IT>
  }
  
  /* Check End of reception flag for FIFO1 */
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 8000ef0:	6823      	ldr	r3, [r4, #0]
 8000ef2:	695a      	ldr	r2, [r3, #20]
 8000ef4:	06d2      	lsls	r2, r2, #27
 8000ef6:	d506      	bpl.n	8000f06 <HAL_CAN_IRQHandler+0x8a>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1) != 0))
 8000ef8:	691b      	ldr	r3, [r3, #16]
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO0);
  }
  
  /* Check End of reception flag for FIFO1 */
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 8000efa:	0798      	lsls	r0, r3, #30
 8000efc:	d003      	beq.n	8000f06 <HAL_CAN_IRQHandler+0x8a>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1) != 0))
  {
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO1);
 8000efe:	2101      	movs	r1, #1
 8000f00:	4620      	mov	r0, r4
 8000f02:	f7ff ff3d 	bl	8000d80 <CAN_Receive_IT>
  }
  
  /* Check Error Warning Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 8000f06:	6823      	ldr	r3, [r4, #0]
 8000f08:	699a      	ldr	r2, [r3, #24]
 8000f0a:	07d1      	lsls	r1, r2, #31
 8000f0c:	d509      	bpl.n	8000f22 <HAL_CAN_IRQHandler+0xa6>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 8000f0e:	695a      	ldr	r2, [r3, #20]
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO1);
  }
  
  /* Check Error Warning Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 8000f10:	05d2      	lsls	r2, r2, #23
 8000f12:	d506      	bpl.n	8000f22 <HAL_CAN_IRQHandler+0xa6>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8000f14:	695a      	ldr	r2, [r3, #20]
    CAN_Receive_IT(hcan, CAN_FIFO1);
  }
  
  /* Check Error Warning Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 8000f16:	0410      	lsls	r0, r2, #16
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
  {
    /* Set CAN error code to EWG error */
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
 8000f18:	bf42      	ittt	mi
 8000f1a:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8000f1c:	f042 0201 	orrmi.w	r2, r2, #1
 8000f20:	63e2      	strmi	r2, [r4, #60]	; 0x3c
    /* No need for clear of Error Warning Flag as read-only */
  }
  
  /* Check Error Passive Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 8000f22:	699a      	ldr	r2, [r3, #24]
 8000f24:	0791      	lsls	r1, r2, #30
 8000f26:	d509      	bpl.n	8000f3c <HAL_CAN_IRQHandler+0xc0>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 8000f28:	695a      	ldr	r2, [r3, #20]
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
    /* No need for clear of Error Warning Flag as read-only */
  }
  
  /* Check Error Passive Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 8000f2a:	0592      	lsls	r2, r2, #22
 8000f2c:	d506      	bpl.n	8000f3c <HAL_CAN_IRQHandler+0xc0>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8000f2e:	695a      	ldr	r2, [r3, #20]
    /* No need for clear of Error Warning Flag as read-only */
  }
  
  /* Check Error Passive Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 8000f30:	0410      	lsls	r0, r2, #16
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
  {
    /* Set CAN error code to EPV error */
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
 8000f32:	bf42      	ittt	mi
 8000f34:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8000f36:	f042 0202 	orrmi.w	r2, r2, #2
 8000f3a:	63e2      	strmi	r2, [r4, #60]	; 0x3c
    /* No need for clear of Error Passive Flag as read-only */ 
  }
  
  /* Check Bus-Off Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 8000f3c:	699a      	ldr	r2, [r3, #24]
 8000f3e:	0751      	lsls	r1, r2, #29
 8000f40:	d509      	bpl.n	8000f56 <HAL_CAN_IRQHandler+0xda>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 8000f42:	695a      	ldr	r2, [r3, #20]
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
    /* No need for clear of Error Passive Flag as read-only */ 
  }
  
  /* Check Bus-Off Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 8000f44:	0552      	lsls	r2, r2, #21
 8000f46:	d506      	bpl.n	8000f56 <HAL_CAN_IRQHandler+0xda>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8000f48:	695a      	ldr	r2, [r3, #20]
    /* No need for clear of Error Passive Flag as read-only */ 
  }
  
  /* Check Bus-Off Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 8000f4a:	0410      	lsls	r0, r2, #16
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
  {
    /* Set CAN error code to BOF error */
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
 8000f4c:	bf42      	ittt	mi
 8000f4e:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8000f50:	f042 0204 	orrmi.w	r2, r2, #4
 8000f54:	63e2      	strmi	r2, [r4, #60]	; 0x3c
    /* No need for clear of Bus-Off Flag as read-only */
  }
  
  /* Check Last error code Flag */
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 8000f56:	699a      	ldr	r2, [r3, #24]
 8000f58:	f012 0f70 	tst.w	r2, #112	; 0x70
 8000f5c:	d031      	beq.n	8000fc2 <HAL_CAN_IRQHandler+0x146>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 8000f5e:	695a      	ldr	r2, [r3, #20]
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
    /* No need for clear of Bus-Off Flag as read-only */
  }
  
  /* Check Last error code Flag */
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 8000f60:	0511      	lsls	r1, r2, #20
 8000f62:	d52e      	bpl.n	8000fc2 <HAL_CAN_IRQHandler+0x146>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8000f64:	695a      	ldr	r2, [r3, #20]
    /* No need for clear of Bus-Off Flag as read-only */
  }
  
  /* Check Last error code Flag */
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 8000f66:	0412      	lsls	r2, r2, #16
 8000f68:	d52b      	bpl.n	8000fc2 <HAL_CAN_IRQHandler+0x146>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
  {
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
 8000f6a:	699a      	ldr	r2, [r3, #24]
 8000f6c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8000f70:	2a30      	cmp	r2, #48	; 0x30
 8000f72:	d016      	beq.n	8000fa2 <HAL_CAN_IRQHandler+0x126>
 8000f74:	d807      	bhi.n	8000f86 <HAL_CAN_IRQHandler+0x10a>
 8000f76:	2a10      	cmp	r2, #16
 8000f78:	d00f      	beq.n	8000f9a <HAL_CAN_IRQHandler+0x11e>
 8000f7a:	2a20      	cmp	r2, #32
 8000f7c:	d11d      	bne.n	8000fba <HAL_CAN_IRQHandler+0x13e>
          /* Set CAN error code to STF error */
          hcan->ErrorCode |= HAL_CAN_ERROR_STF;
          break;
      case(CAN_ESR_LEC_1):
          /* Set CAN error code to FOR error */
          hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
 8000f7e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000f80:	f042 0210 	orr.w	r2, r2, #16
 8000f84:	e018      	b.n	8000fb8 <HAL_CAN_IRQHandler+0x13c>
  /* Check Last error code Flag */
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
  {
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
 8000f86:	2a50      	cmp	r2, #80	; 0x50
 8000f88:	d00f      	beq.n	8000faa <HAL_CAN_IRQHandler+0x12e>
 8000f8a:	2a60      	cmp	r2, #96	; 0x60
 8000f8c:	d011      	beq.n	8000fb2 <HAL_CAN_IRQHandler+0x136>
 8000f8e:	2a40      	cmp	r2, #64	; 0x40
 8000f90:	d113      	bne.n	8000fba <HAL_CAN_IRQHandler+0x13e>
          /* Set CAN error code to ACK error */
          hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
          break;
      case(CAN_ESR_LEC_2):
          /* Set CAN error code to BR error */
          hcan->ErrorCode |= HAL_CAN_ERROR_BR;
 8000f92:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000f94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f98:	e00e      	b.n	8000fb8 <HAL_CAN_IRQHandler+0x13c>
  {
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
    {
      case(CAN_ESR_LEC_0):
          /* Set CAN error code to STF error */
          hcan->ErrorCode |= HAL_CAN_ERROR_STF;
 8000f9a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000f9c:	f042 0208 	orr.w	r2, r2, #8
 8000fa0:	e00a      	b.n	8000fb8 <HAL_CAN_IRQHandler+0x13c>
          /* Set CAN error code to FOR error */
          hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
          break;
      case(CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
          /* Set CAN error code to ACK error */
          hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
 8000fa2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000fa4:	f042 0220 	orr.w	r2, r2, #32
 8000fa8:	e006      	b.n	8000fb8 <HAL_CAN_IRQHandler+0x13c>
          /* Set CAN error code to BR error */
          hcan->ErrorCode |= HAL_CAN_ERROR_BR;
          break;
      case(CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
          /* Set CAN error code to BD error */
          hcan->ErrorCode |= HAL_CAN_ERROR_BD;
 8000faa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000fac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fb0:	e002      	b.n	8000fb8 <HAL_CAN_IRQHandler+0x13c>
          break;
      case(CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
          /* Set CAN error code to CRC error */
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 8000fb2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000fb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fb8:	63e2      	str	r2, [r4, #60]	; 0x3c
      default:
          break;
    }

    /* Clear Last error code Flag */ 
    CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000fba:	699a      	ldr	r2, [r3, #24]
 8000fbc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000fc0:	619a      	str	r2, [r3, #24]
  }
  
  /* Call the Error call Back in case of Errors */
  if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
 8000fc2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000fc4:	b14a      	cbz	r2, 8000fda <HAL_CAN_IRQHandler+0x15e>
  {
    /* Clear ERRI Flag */ 
    hcan->Instance->MSR |= CAN_MSR_ERRI; 
 8000fc6:	685a      	ldr	r2, [r3, #4]
    /* Set the CAN state ready to be able to start again the process */
    hcan->State = HAL_CAN_STATE_READY;
    
    /* Call Error callback function */
    HAL_CAN_ErrorCallback(hcan);
 8000fc8:	4620      	mov	r0, r4
  
  /* Call the Error call Back in case of Errors */
  if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
  {
    /* Clear ERRI Flag */ 
    hcan->Instance->MSR |= CAN_MSR_ERRI; 
 8000fca:	f042 0204 	orr.w	r2, r2, #4
 8000fce:	605a      	str	r2, [r3, #4]
    /* Set the CAN state ready to be able to start again the process */
    hcan->State = HAL_CAN_STATE_READY;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
    /* Call Error callback function */
    HAL_CAN_ErrorCallback(hcan);
 8000fd6:	f7ff ff50 	bl	8000e7a <HAL_CAN_ErrorCallback>
 8000fda:	bd10      	pop	{r4, pc}
 8000fdc:	04000003 	.word	0x04000003
 8000fe0:	08000300 	.word	0x08000300
 8000fe4:	10030000 	.word	0x10030000

08000fe8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe8:	4a07      	ldr	r2, [pc, #28]	; (8001008 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000fea:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fec:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000fee:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000ff2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ff6:	041b      	lsls	r3, r3, #16
 8000ff8:	0c1b      	lsrs	r3, r3, #16
 8000ffa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001002:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8001004:	60d3      	str	r3, [r2, #12]
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100c:	4b17      	ldr	r3, [pc, #92]	; (800106c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100e:	b530      	push	{r4, r5, lr}
 8001010:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001012:	f3c3 2302 	ubfx	r3, r3, #8, #3
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001016:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101a:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800101c:	2c04      	cmp	r4, #4
 800101e:	bf28      	it	cs
 8001020:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001022:	2d06      	cmp	r5, #6

  return (
 8001024:	f04f 0501 	mov.w	r5, #1
 8001028:	fa05 f404 	lsl.w	r4, r5, r4
 800102c:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001030:	bf8c      	ite	hi
 8001032:	3b03      	subhi	r3, #3
 8001034:	2300      	movls	r3, #0

  return (
 8001036:	400c      	ands	r4, r1
 8001038:	409c      	lsls	r4, r3
 800103a:	fa05 f303 	lsl.w	r3, r5, r3
 800103e:	3b01      	subs	r3, #1
 8001040:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8001042:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001044:	ea42 0204 	orr.w	r2, r2, r4
 8001048:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104c:	bfaf      	iteee	ge
 800104e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001052:	4b07      	ldrlt	r3, [pc, #28]	; (8001070 <HAL_NVIC_SetPriority+0x64>)
 8001054:	f000 000f 	andlt.w	r0, r0, #15
 8001058:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105a:	bfa5      	ittet	ge
 800105c:	b2d2      	uxtbge	r2, r2
 800105e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001062:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001068:	bd30      	pop	{r4, r5, pc}
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00
 8001070:	e000ed14 	.word	0xe000ed14

08001074 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001074:	0942      	lsrs	r2, r0, #5
 8001076:	2301      	movs	r3, #1
 8001078:	f000 001f 	and.w	r0, r0, #31
 800107c:	fa03 f000 	lsl.w	r0, r3, r0
 8001080:	4b01      	ldr	r3, [pc, #4]	; (8001088 <HAL_NVIC_EnableIRQ+0x14>)
 8001082:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001086:	4770      	bx	lr
 8001088:	e000e100 	.word	0xe000e100

0800108c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800108c:	3801      	subs	r0, #1
 800108e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001092:	d20a      	bcs.n	80010aa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001096:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <HAL_SYSTICK_Config+0x28>)
 8001098:	21f0      	movs	r1, #240	; 0xf0
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109a:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a2:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000e010 	.word	0xe000e010
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80010ba:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	bf0c      	ite	eq
 80010c0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80010c4:	f022 0204 	bicne.w	r2, r2, #4
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	4770      	bx	lr
 80010cc:	e000e010 	.word	0xe000e010

080010d0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80010d0:	4770      	bx	lr

080010d2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80010d2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80010d4:	f7ff fffc 	bl	80010d0 <HAL_SYSTICK_Callback>
 80010d8:	bd08      	pop	{r3, pc}
	...

080010dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 80010e0:	2400      	movs	r4, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80010e2:	4626      	mov	r6, r4
 80010e4:	4b62      	ldr	r3, [pc, #392]	; (8001270 <HAL_GPIO_Init+0x194>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010e6:	f8df e194 	ldr.w	lr, [pc, #404]	; 800127c <HAL_GPIO_Init+0x1a0>
 80010ea:	f8df c194 	ldr.w	ip, [pc, #404]	; 8001280 <HAL_GPIO_Init+0x1a4>

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80010ee:	2201      	movs	r2, #1
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 80010f0:	680d      	ldr	r5, [r1, #0]

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80010f2:	40b2      	lsls	r2, r6
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 80010f4:	ea32 0505 	bics.w	r5, r2, r5
 80010f8:	f040 80b3 	bne.w	8001262 <HAL_GPIO_Init+0x186>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010fc:	684d      	ldr	r5, [r1, #4]
 80010fe:	2d12      	cmp	r5, #18
 8001100:	d028      	beq.n	8001154 <HAL_GPIO_Init+0x78>
 8001102:	d80e      	bhi.n	8001122 <HAL_GPIO_Init+0x46>
 8001104:	2d02      	cmp	r5, #2
 8001106:	d022      	beq.n	800114e <HAL_GPIO_Init+0x72>
 8001108:	d804      	bhi.n	8001114 <HAL_GPIO_Init+0x38>
 800110a:	b335      	cbz	r5, 800115a <HAL_GPIO_Init+0x7e>
 800110c:	2d01      	cmp	r5, #1
 800110e:	d12d      	bne.n	800116c <HAL_GPIO_Init+0x90>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001110:	68cc      	ldr	r4, [r1, #12]
          break;
 8001112:	e02b      	b.n	800116c <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001114:	2d03      	cmp	r5, #3
 8001116:	d018      	beq.n	800114a <HAL_GPIO_Init+0x6e>
 8001118:	2d11      	cmp	r5, #17
 800111a:	d127      	bne.n	800116c <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800111c:	68cc      	ldr	r4, [r1, #12]
 800111e:	3404      	adds	r4, #4
          break;
 8001120:	e024      	b.n	800116c <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001122:	4f54      	ldr	r7, [pc, #336]	; (8001274 <HAL_GPIO_Init+0x198>)
 8001124:	42bd      	cmp	r5, r7
 8001126:	d018      	beq.n	800115a <HAL_GPIO_Init+0x7e>
 8001128:	d806      	bhi.n	8001138 <HAL_GPIO_Init+0x5c>
 800112a:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8001284 <HAL_GPIO_Init+0x1a8>
 800112e:	4545      	cmp	r5, r8
 8001130:	d013      	beq.n	800115a <HAL_GPIO_Init+0x7e>
 8001132:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8001136:	e005      	b.n	8001144 <HAL_GPIO_Init+0x68>
 8001138:	4575      	cmp	r5, lr
 800113a:	d00e      	beq.n	800115a <HAL_GPIO_Init+0x7e>
 800113c:	4565      	cmp	r5, ip
 800113e:	d00c      	beq.n	800115a <HAL_GPIO_Init+0x7e>
 8001140:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8001288 <HAL_GPIO_Init+0x1ac>
 8001144:	4545      	cmp	r5, r8
 8001146:	d111      	bne.n	800116c <HAL_GPIO_Init+0x90>
 8001148:	e007      	b.n	800115a <HAL_GPIO_Init+0x7e>
          }
          break; 
          
        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800114a:	2400      	movs	r4, #0
 800114c:	e00e      	b.n	800116c <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800114e:	68cc      	ldr	r4, [r1, #12]
 8001150:	3408      	adds	r4, #8
          break;
 8001152:	e00b      	b.n	800116c <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001154:	68cc      	ldr	r4, [r1, #12]
 8001156:	340c      	adds	r4, #12
          break;
 8001158:	e008      	b.n	800116c <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
 800115a:	688c      	ldr	r4, [r1, #8]
 800115c:	b12c      	cbz	r4, 800116a <HAL_GPIO_Init+0x8e>
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 800115e:	2c01      	cmp	r4, #1
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 8001160:	bf0c      	ite	eq
 8001162:	6102      	streq	r2, [r0, #16]
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8001164:	6142      	strne	r2, [r0, #20]
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
          }
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001166:	2408      	movs	r4, #8
 8001168:	e000      	b.n	800116c <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800116a:	2404      	movs	r4, #4
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800116c:	2aff      	cmp	r2, #255	; 0xff
 800116e:	bf97      	itett	ls
 8001170:	4683      	movls	fp, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8001172:	f1a6 0508 	subhi.w	r5, r6, #8
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001176:	f8d0 9000 	ldrls.w	r9, [r0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 800117a:	00b5      	lslls	r5, r6, #2
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800117c:	bf84      	itt	hi
 800117e:	f8d0 9004 	ldrhi.w	r9, [r0, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8001182:	00ad      	lslhi	r5, r5, #2
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8001184:	f04f 080f 	mov.w	r8, #15
 8001188:	fa08 fa05 	lsl.w	sl, r8, r5
 800118c:	ea29 090a 	bic.w	r9, r9, sl
 8001190:	fa04 f505 	lsl.w	r5, r4, r5
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001194:	bf88      	it	hi
 8001196:	f100 0b04 	addhi.w	fp, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800119a:	ea49 0505 	orr.w	r5, r9, r5
 800119e:	f8cb 5000 	str.w	r5, [fp]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80011a2:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80011a6:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 80011aa:	d05a      	beq.n	8001262 <HAL_GPIO_Init+0x186>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011ac:	4d32      	ldr	r5, [pc, #200]	; (8001278 <HAL_GPIO_Init+0x19c>)
 80011ae:	4f32      	ldr	r7, [pc, #200]	; (8001278 <HAL_GPIO_Init+0x19c>)
 80011b0:	69ad      	ldr	r5, [r5, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011b2:	f006 0a03 	and.w	sl, r6, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011b6:	f045 0501 	orr.w	r5, r5, #1
 80011ba:	61bd      	str	r5, [r7, #24]
 80011bc:	69bd      	ldr	r5, [r7, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011be:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011c2:	f005 0501 	and.w	r5, r5, #1
 80011c6:	9501      	str	r5, [sp, #4]
 80011c8:	9d01      	ldr	r5, [sp, #4]
 80011ca:	f026 0503 	bic.w	r5, r6, #3
 80011ce:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80011d2:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2];
 80011d6:	f8d5 b008 	ldr.w	fp, [r5, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80011da:	f5a7 3784 	sub.w	r7, r7, #67584	; 0x10800
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011de:	fa08 f80a 	lsl.w	r8, r8, sl
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80011e2:	42b8      	cmp	r0, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011e4:	ea2b 0808 	bic.w	r8, fp, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80011e8:	d010      	beq.n	800120c <HAL_GPIO_Init+0x130>
 80011ea:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80011ee:	42b8      	cmp	r0, r7
 80011f0:	d00f      	beq.n	8001212 <HAL_GPIO_Init+0x136>
 80011f2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80011f6:	42b8      	cmp	r0, r7
 80011f8:	d00e      	beq.n	8001218 <HAL_GPIO_Init+0x13c>
 80011fa:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80011fe:	42b8      	cmp	r0, r7
 8001200:	bf0c      	ite	eq
 8001202:	f04f 0b03 	moveq.w	fp, #3
 8001206:	f04f 0b04 	movne.w	fp, #4
 800120a:	e007      	b.n	800121c <HAL_GPIO_Init+0x140>
 800120c:	f04f 0b00 	mov.w	fp, #0
 8001210:	e004      	b.n	800121c <HAL_GPIO_Init+0x140>
 8001212:	f04f 0b01 	mov.w	fp, #1
 8001216:	e001      	b.n	800121c <HAL_GPIO_Init+0x140>
 8001218:	f04f 0b02 	mov.w	fp, #2
 800121c:	fa0b fa0a 	lsl.w	sl, fp, sl
 8001220:	ea4a 0a08 	orr.w	sl, sl, r8
        AFIO->EXTICR[position >> 2] = temp;
 8001224:	f8c5 a008 	str.w	sl, [r5, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8001228:	681d      	ldr	r5, [r3, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        AFIO->EXTICR[position >> 2] = temp;
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800122a:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 800122e:	bf14      	ite	ne
 8001230:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8001232:	4395      	biceq	r5, r2
 8001234:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8001236:	685d      	ldr	r5, [r3, #4]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001238:	f419 3f00 	tst.w	r9, #131072	; 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 800123c:	bf14      	ite	ne
 800123e:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8001240:	4395      	biceq	r5, r2
 8001242:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8001244:	689d      	ldr	r5, [r3, #8]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001246:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 800124a:	bf14      	ite	ne
 800124c:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 800124e:	4395      	biceq	r5, r2
 8001250:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8001252:	68dd      	ldr	r5, [r3, #12]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001254:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8001258:	bf14      	ite	ne
 800125a:	432a      	orrne	r2, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 800125c:	ea25 0202 	biceq.w	r2, r5, r2
 8001260:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001262:	3601      	adds	r6, #1
 8001264:	2e10      	cmp	r6, #16
 8001266:	f47f af42 	bne.w	80010ee <HAL_GPIO_Init+0x12>
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
        }
      }
    }
  }
}
 800126a:	b003      	add	sp, #12
 800126c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001270:	40010400 	.word	0x40010400
 8001274:	10210000 	.word	0x10210000
 8001278:	40021000 	.word	0x40021000
 800127c:	10310000 	.word	0x10310000
 8001280:	10320000 	.word	0x10320000
 8001284:	10110000 	.word	0x10110000
 8001288:	10220000 	.word	0x10220000

0800128c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800128c:	b902      	cbnz	r2, 8001290 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800128e:	0409      	lsls	r1, r1, #16
 8001290:	6101      	str	r1, [r0, #16]
 8001292:	4770      	bx	lr

08001294 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001294:	68c3      	ldr	r3, [r0, #12]
 8001296:	4059      	eors	r1, r3
 8001298:	60c1      	str	r1, [r0, #12]
 800129a:	4770      	bx	lr

0800129c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800129c:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800129e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a2:	07dc      	lsls	r4, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a4:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a6:	d403      	bmi.n	80012b0 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a8:	682b      	ldr	r3, [r5, #0]
 80012aa:	0798      	lsls	r0, r3, #30
 80012ac:	d473      	bmi.n	8001396 <HAL_RCC_OscConfig+0xfa>
 80012ae:	e0f2      	b.n	8001496 <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012b0:	4cb9      	ldr	r4, [pc, #740]	; (8001598 <HAL_RCC_OscConfig+0x2fc>)
 80012b2:	6863      	ldr	r3, [r4, #4]
 80012b4:	f003 030c 	and.w	r3, r3, #12
 80012b8:	2b04      	cmp	r3, #4
 80012ba:	d007      	beq.n	80012cc <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012bc:	6863      	ldr	r3, [r4, #4]
 80012be:	f003 030c 	and.w	r3, r3, #12
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d116      	bne.n	80012f4 <HAL_RCC_OscConfig+0x58>
 80012c6:	6863      	ldr	r3, [r4, #4]
 80012c8:	03d9      	lsls	r1, r3, #15
 80012ca:	d513      	bpl.n	80012f4 <HAL_RCC_OscConfig+0x58>
 80012cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012d0:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d4:	6822      	ldr	r2, [r4, #0]
 80012d6:	fa93 f3a3 	rbit	r3, r3
 80012da:	fab3 f383 	clz	r3, r3
 80012de:	f003 031f 	and.w	r3, r3, #31
 80012e2:	fa22 f303 	lsr.w	r3, r2, r3
 80012e6:	07da      	lsls	r2, r3, #31
 80012e8:	d5de      	bpl.n	80012a8 <HAL_RCC_OscConfig+0xc>
 80012ea:	68ab      	ldr	r3, [r5, #8]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1db      	bne.n	80012a8 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 80012f0:	2001      	movs	r0, #1
 80012f2:	e2d0      	b.n	8001896 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f4:	68ab      	ldr	r3, [r5, #8]
 80012f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012fa:	d015      	beq.n	8001328 <HAL_RCC_OscConfig+0x8c>
 80012fc:	b96b      	cbnz	r3, 800131a <HAL_RCC_OscConfig+0x7e>
 80012fe:	6823      	ldr	r3, [r4, #0]
 8001300:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001304:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001308:	6023      	str	r3, [r4, #0]
 800130a:	6823      	ldr	r3, [r4, #0]
 800130c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001310:	6023      	str	r3, [r4, #0]
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001312:	f7ff fa61 	bl	80007d8 <HAL_GetTick>
 8001316:	4607      	mov	r7, r0
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001318:	e02f      	b.n	800137a <HAL_RCC_OscConfig+0xde>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800131a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800131e:	6823      	ldr	r3, [r4, #0]
 8001320:	d106      	bne.n	8001330 <HAL_RCC_OscConfig+0x94>
 8001322:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001326:	6023      	str	r3, [r4, #0]
 8001328:	6823      	ldr	r3, [r4, #0]
 800132a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800132e:	e005      	b.n	800133c <HAL_RCC_OscConfig+0xa0>
 8001330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001334:	6023      	str	r3, [r4, #0]
 8001336:	6823      	ldr	r3, [r4, #0]
 8001338:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800133c:	6023      	str	r3, [r4, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133e:	f7ff fa4b 	bl	80007d8 <HAL_GetTick>
 8001342:	4607      	mov	r7, r0
 8001344:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001348:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134c:	6822      	ldr	r2, [r4, #0]
 800134e:	fa96 f3a6 	rbit	r3, r6
 8001352:	fab3 f383 	clz	r3, r3
 8001356:	f003 031f 	and.w	r3, r3, #31
 800135a:	fa22 f303 	lsr.w	r3, r2, r3
 800135e:	07db      	lsls	r3, r3, #31
 8001360:	d4a2      	bmi.n	80012a8 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001362:	f7ff fa39 	bl	80007d8 <HAL_GetTick>
 8001366:	1bc0      	subs	r0, r0, r7
 8001368:	2864      	cmp	r0, #100	; 0x64
 800136a:	d9ed      	bls.n	8001348 <HAL_RCC_OscConfig+0xac>
          {
            return HAL_TIMEOUT;
 800136c:	2003      	movs	r0, #3
 800136e:	e292      	b.n	8001896 <HAL_RCC_OscConfig+0x5fa>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001370:	f7ff fa32 	bl	80007d8 <HAL_GetTick>
 8001374:	1bc0      	subs	r0, r0, r7
 8001376:	2864      	cmp	r0, #100	; 0x64
 8001378:	d8f8      	bhi.n	800136c <HAL_RCC_OscConfig+0xd0>
 800137a:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137e:	6822      	ldr	r2, [r4, #0]
 8001380:	fa96 f3a6 	rbit	r3, r6
 8001384:	fab3 f383 	clz	r3, r3
 8001388:	f003 031f 	and.w	r3, r3, #31
 800138c:	fa22 f303 	lsr.w	r3, r2, r3
 8001390:	07d8      	lsls	r0, r3, #31
 8001392:	d4ed      	bmi.n	8001370 <HAL_RCC_OscConfig+0xd4>
 8001394:	e788      	b.n	80012a8 <HAL_RCC_OscConfig+0xc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001396:	4c80      	ldr	r4, [pc, #512]	; (8001598 <HAL_RCC_OscConfig+0x2fc>)
 8001398:	6863      	ldr	r3, [r4, #4]
 800139a:	f013 0f0c 	tst.w	r3, #12
 800139e:	d007      	beq.n	80013b0 <HAL_RCC_OscConfig+0x114>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013a0:	6863      	ldr	r3, [r4, #4]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	2b08      	cmp	r3, #8
 80013a8:	d121      	bne.n	80013ee <HAL_RCC_OscConfig+0x152>
 80013aa:	6863      	ldr	r3, [r4, #4]
 80013ac:	03d9      	lsls	r1, r3, #15
 80013ae:	d41e      	bmi.n	80013ee <HAL_RCC_OscConfig+0x152>
 80013b0:	2302      	movs	r3, #2
 80013b2:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b6:	6822      	ldr	r2, [r4, #0]
 80013b8:	fa93 f3a3 	rbit	r3, r3
 80013bc:	fab3 f383 	clz	r3, r3
 80013c0:	f003 031f 	and.w	r3, r3, #31
 80013c4:	fa22 f303 	lsr.w	r3, r2, r3
 80013c8:	07da      	lsls	r2, r3, #31
 80013ca:	d502      	bpl.n	80013d2 <HAL_RCC_OscConfig+0x136>
 80013cc:	696b      	ldr	r3, [r5, #20]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d18e      	bne.n	80012f0 <HAL_RCC_OscConfig+0x54>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d2:	6823      	ldr	r3, [r4, #0]
 80013d4:	22f8      	movs	r2, #248	; 0xf8
 80013d6:	fa92 f2a2 	rbit	r2, r2
 80013da:	fab2 f282 	clz	r2, r2
 80013de:	69a9      	ldr	r1, [r5, #24]
 80013e0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80013e4:	fa01 f202 	lsl.w	r2, r1, r2
 80013e8:	4313      	orrs	r3, r2
 80013ea:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ec:	e053      	b.n	8001496 <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013ee:	696a      	ldr	r2, [r5, #20]
 80013f0:	2301      	movs	r3, #1
 80013f2:	b37a      	cbz	r2, 8001454 <HAL_RCC_OscConfig+0x1b8>
 80013f4:	fa93 f2a3 	rbit	r2, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f8:	fab2 f282 	clz	r2, r2
 80013fc:	0092      	lsls	r2, r2, #2
 80013fe:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 8001402:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 8001406:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001408:	f7ff f9e6 	bl	80007d8 <HAL_GetTick>
 800140c:	4607      	mov	r7, r0
 800140e:	2602      	movs	r6, #2
 8001410:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001414:	4860      	ldr	r0, [pc, #384]	; (8001598 <HAL_RCC_OscConfig+0x2fc>)
 8001416:	6822      	ldr	r2, [r4, #0]
 8001418:	fa96 f3a6 	rbit	r3, r6
 800141c:	fab3 f383 	clz	r3, r3
 8001420:	f003 031f 	and.w	r3, r3, #31
 8001424:	fa22 f303 	lsr.w	r3, r2, r3
 8001428:	07db      	lsls	r3, r3, #31
 800142a:	d405      	bmi.n	8001438 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800142c:	f7ff f9d4 	bl	80007d8 <HAL_GetTick>
 8001430:	1bc0      	subs	r0, r0, r7
 8001432:	2802      	cmp	r0, #2
 8001434:	d9ec      	bls.n	8001410 <HAL_RCC_OscConfig+0x174>
 8001436:	e799      	b.n	800136c <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001438:	6803      	ldr	r3, [r0, #0]
 800143a:	22f8      	movs	r2, #248	; 0xf8
 800143c:	fa92 f2a2 	rbit	r2, r2
 8001440:	fab2 f282 	clz	r2, r2
 8001444:	69a9      	ldr	r1, [r5, #24]
 8001446:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800144a:	fa01 f202 	lsl.w	r2, r1, r2
 800144e:	4313      	orrs	r3, r2
 8001450:	6003      	str	r3, [r0, #0]
 8001452:	e020      	b.n	8001496 <HAL_RCC_OscConfig+0x1fa>
 8001454:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001458:	fab3 f383 	clz	r3, r3
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001462:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001466:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff f9b6 	bl	80007d8 <HAL_GetTick>
 800146c:	4607      	mov	r7, r0
 800146e:	2602      	movs	r6, #2
 8001470:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001474:	6822      	ldr	r2, [r4, #0]
 8001476:	fa96 f3a6 	rbit	r3, r6
 800147a:	fab3 f383 	clz	r3, r3
 800147e:	f003 031f 	and.w	r3, r3, #31
 8001482:	fa22 f303 	lsr.w	r3, r2, r3
 8001486:	07d8      	lsls	r0, r3, #31
 8001488:	d505      	bpl.n	8001496 <HAL_RCC_OscConfig+0x1fa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800148a:	f7ff f9a5 	bl	80007d8 <HAL_GetTick>
 800148e:	1bc0      	subs	r0, r0, r7
 8001490:	2802      	cmp	r0, #2
 8001492:	d9ed      	bls.n	8001470 <HAL_RCC_OscConfig+0x1d4>
 8001494:	e76a      	b.n	800136c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001496:	682b      	ldr	r3, [r5, #0]
 8001498:	0719      	lsls	r1, r3, #28
 800149a:	d546      	bpl.n	800152a <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800149c:	69ea      	ldr	r2, [r5, #28]
 800149e:	4c3e      	ldr	r4, [pc, #248]	; (8001598 <HAL_RCC_OscConfig+0x2fc>)
 80014a0:	2301      	movs	r3, #1
 80014a2:	493e      	ldr	r1, [pc, #248]	; (800159c <HAL_RCC_OscConfig+0x300>)
 80014a4:	b312      	cbz	r2, 80014ec <HAL_RCC_OscConfig+0x250>
 80014a6:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014aa:	fab2 f282 	clz	r2, r2
 80014ae:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b2:	f7ff f991 	bl	80007d8 <HAL_GetTick>
 80014b6:	4607      	mov	r7, r0
 80014b8:	2602      	movs	r6, #2
 80014ba:	fa96 f3a6 	rbit	r3, r6
 80014be:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80014c4:	fa96 f3a6 	rbit	r3, r6
 80014c8:	fab3 f383 	clz	r3, r3
 80014cc:	f003 031f 	and.w	r3, r3, #31
 80014d0:	fa22 f303 	lsr.w	r3, r2, r3
 80014d4:	07da      	lsls	r2, r3, #31
 80014d6:	d405      	bmi.n	80014e4 <HAL_RCC_OscConfig+0x248>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d8:	f7ff f97e 	bl	80007d8 <HAL_GetTick>
 80014dc:	1bc0      	subs	r0, r0, r7
 80014de:	2802      	cmp	r0, #2
 80014e0:	d9eb      	bls.n	80014ba <HAL_RCC_OscConfig+0x21e>
 80014e2:	e743      	b.n	800136c <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 80014e4:	2001      	movs	r0, #1
 80014e6:	f7ff f97d 	bl	80007e4 <HAL_Delay>
 80014ea:	e01e      	b.n	800152a <HAL_RCC_OscConfig+0x28e>
 80014ec:	fa93 f3a3 	rbit	r3, r3
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f0:	fab3 f383 	clz	r3, r3
 80014f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f8:	f7ff f96e 	bl	80007d8 <HAL_GetTick>
 80014fc:	4607      	mov	r7, r0
 80014fe:	2602      	movs	r6, #2
 8001500:	fa96 f3a6 	rbit	r3, r6
 8001504:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001508:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800150a:	fa96 f3a6 	rbit	r3, r6
 800150e:	fab3 f383 	clz	r3, r3
 8001512:	f003 031f 	and.w	r3, r3, #31
 8001516:	fa22 f303 	lsr.w	r3, r2, r3
 800151a:	07db      	lsls	r3, r3, #31
 800151c:	d505      	bpl.n	800152a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800151e:	f7ff f95b 	bl	80007d8 <HAL_GetTick>
 8001522:	1bc0      	subs	r0, r0, r7
 8001524:	2802      	cmp	r0, #2
 8001526:	d9eb      	bls.n	8001500 <HAL_RCC_OscConfig+0x264>
 8001528:	e720      	b.n	800136c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800152a:	682b      	ldr	r3, [r5, #0]
 800152c:	0758      	lsls	r0, r3, #29
 800152e:	d404      	bmi.n	800153a <HAL_RCC_OscConfig+0x29e>

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001530:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001532:	2a00      	cmp	r2, #0
 8001534:	f040 8081 	bne.w	800163a <HAL_RCC_OscConfig+0x39e>
 8001538:	e0d3      	b.n	80016e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	4c17      	ldr	r4, [pc, #92]	; (8001598 <HAL_RCC_OscConfig+0x2fc>)
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800153c:	4e18      	ldr	r6, [pc, #96]	; (80015a0 <HAL_RCC_OscConfig+0x304>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	69e3      	ldr	r3, [r4, #28]
 8001540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001544:	61e3      	str	r3, [r4, #28]
 8001546:	69e3      	ldr	r3, [r4, #28]
 8001548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154c:	9301      	str	r3, [sp, #4]
 800154e:	9b01      	ldr	r3, [sp, #4]
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001550:	6833      	ldr	r3, [r6, #0]
 8001552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001556:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001558:	f7ff f93e 	bl	80007d8 <HAL_GetTick>
 800155c:	4607      	mov	r7, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800155e:	6833      	ldr	r3, [r6, #0]
 8001560:	05d9      	lsls	r1, r3, #23
 8001562:	d405      	bmi.n	8001570 <HAL_RCC_OscConfig+0x2d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001564:	f7ff f938 	bl	80007d8 <HAL_GetTick>
 8001568:	1bc0      	subs	r0, r0, r7
 800156a:	2864      	cmp	r0, #100	; 0x64
 800156c:	d9f7      	bls.n	800155e <HAL_RCC_OscConfig+0x2c2>
 800156e:	e6fd      	b.n	800136c <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001570:	692b      	ldr	r3, [r5, #16]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d01c      	beq.n	80015b0 <HAL_RCC_OscConfig+0x314>
 8001576:	b9ab      	cbnz	r3, 80015a4 <HAL_RCC_OscConfig+0x308>
 8001578:	6a23      	ldr	r3, [r4, #32]
 800157a:	2602      	movs	r6, #2
 800157c:	f023 0301 	bic.w	r3, r3, #1
 8001580:	6223      	str	r3, [r4, #32]
 8001582:	6a23      	ldr	r3, [r4, #32]
 8001584:	4637      	mov	r7, r6
 8001586:	f023 0304 	bic.w	r3, r3, #4
 800158a:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158c:	f7ff f924 	bl	80007d8 <HAL_GetTick>
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001590:	f241 3988 	movw	r9, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001594:	4680      	mov	r8, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001596:	e048      	b.n	800162a <HAL_RCC_OscConfig+0x38e>
 8001598:	40021000 	.word	0x40021000
 800159c:	42420480 	.word	0x42420480
 80015a0:	40007000 	.word	0x40007000
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a4:	2b05      	cmp	r3, #5
 80015a6:	6a23      	ldr	r3, [r4, #32]
 80015a8:	d106      	bne.n	80015b8 <HAL_RCC_OscConfig+0x31c>
 80015aa:	f043 0304 	orr.w	r3, r3, #4
 80015ae:	6223      	str	r3, [r4, #32]
 80015b0:	6a23      	ldr	r3, [r4, #32]
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	e005      	b.n	80015c4 <HAL_RCC_OscConfig+0x328>
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	6223      	str	r3, [r4, #32]
 80015be:	6a23      	ldr	r3, [r4, #32]
 80015c0:	f023 0304 	bic.w	r3, r3, #4
 80015c4:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c6:	f7ff f907 	bl	80007d8 <HAL_GetTick>
 80015ca:	2602      	movs	r6, #2
 80015cc:	4681      	mov	r9, r0
 80015ce:	46b0      	mov	r8, r6
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d0:	f241 3788 	movw	r7, #5000	; 0x1388
 80015d4:	fa96 f3a6 	rbit	r3, r6
 80015d8:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015dc:	b10b      	cbz	r3, 80015e2 <HAL_RCC_OscConfig+0x346>
 80015de:	6a22      	ldr	r2, [r4, #32]
 80015e0:	e000      	b.n	80015e4 <HAL_RCC_OscConfig+0x348>
 80015e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80015e4:	fa98 f3a8 	rbit	r3, r8
 80015e8:	fab3 f383 	clz	r3, r3
 80015ec:	f003 031f 	and.w	r3, r3, #31
 80015f0:	fa22 f303 	lsr.w	r3, r2, r3
 80015f4:	07da      	lsls	r2, r3, #31
 80015f6:	d49b      	bmi.n	8001530 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f8:	f7ff f8ee 	bl	80007d8 <HAL_GetTick>
 80015fc:	ebc9 0000 	rsb	r0, r9, r0
 8001600:	42b8      	cmp	r0, r7
 8001602:	d9e7      	bls.n	80015d4 <HAL_RCC_OscConfig+0x338>
 8001604:	e6b2      	b.n	800136c <HAL_RCC_OscConfig+0xd0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001606:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001608:	fa97 f3a7 	rbit	r3, r7
 800160c:	fab3 f383 	clz	r3, r3
 8001610:	f003 031f 	and.w	r3, r3, #31
 8001614:	fa22 f303 	lsr.w	r3, r2, r3
 8001618:	07db      	lsls	r3, r3, #31
 800161a:	d589      	bpl.n	8001530 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800161c:	f7ff f8dc 	bl	80007d8 <HAL_GetTick>
 8001620:	ebc8 0000 	rsb	r0, r8, r0
 8001624:	4548      	cmp	r0, r9
 8001626:	f63f aea1 	bhi.w	800136c <HAL_RCC_OscConfig+0xd0>
 800162a:	fa96 f3a6 	rbit	r3, r6
 800162e:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0e7      	beq.n	8001606 <HAL_RCC_OscConfig+0x36a>
 8001636:	6a22      	ldr	r2, [r4, #32]
 8001638:	e7e6      	b.n	8001608 <HAL_RCC_OscConfig+0x36c>
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system 
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800163a:	4c98      	ldr	r4, [pc, #608]	; (800189c <HAL_RCC_OscConfig+0x600>)
 800163c:	6863      	ldr	r3, [r4, #4]
 800163e:	03df      	lsls	r7, r3, #15
 8001640:	d453      	bmi.n	80016ea <HAL_RCC_OscConfig+0x44e>
    {
      return HAL_ERROR;
    }
    else
    {
      if((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001642:	2a02      	cmp	r2, #2
 8001644:	d170      	bne.n	8001728 <HAL_RCC_OscConfig+0x48c>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 8001646:	6823      	ldr	r3, [r4, #0]
 8001648:	00d8      	lsls	r0, r3, #3
 800164a:	d458      	bmi.n	80016fe <HAL_RCC_OscConfig+0x462>
 800164c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001650:	fa93 f3a3 	rbit	r3, r3
        {
          return HAL_ERROR;
        }
        
        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001654:	fab3 f383 	clz	r3, r3
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800165e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001666:	f7ff f8b7 	bl	80007d8 <HAL_GetTick>
 800166a:	4607      	mov	r7, r0
 800166c:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 8001670:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL2 is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001674:	4a89      	ldr	r2, [pc, #548]	; (800189c <HAL_RCC_OscConfig+0x600>)
 8001676:	6821      	ldr	r1, [r4, #0]
 8001678:	fa96 f3a6 	rbit	r3, r6
 800167c:	fab3 f383 	clz	r3, r3
 8001680:	f003 031f 	and.w	r3, r3, #31
 8001684:	fa21 f303 	lsr.w	r3, r1, r3
 8001688:	07d9      	lsls	r1, r3, #31
 800168a:	d441      	bmi.n	8001710 <HAL_RCC_OscConfig+0x474>
            return HAL_TIMEOUT;
          }
        }
        
        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 800168c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800168e:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
 8001692:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001694:	430b      	orrs	r3, r1
 8001696:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001698:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800169a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800169e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80016a0:	430b      	orrs	r3, r1
 80016a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80016a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016a8:	fa93 f3a3 	rbit	r3, r3
        
        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80016ac:	fab3 f383 	clz	r3, r3
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80016b6:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80016ba:	2201      	movs	r2, #1
 80016bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016be:	f7ff f88b 	bl	80007d8 <HAL_GetTick>
 80016c2:	4607      	mov	r7, r0
 80016c4:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 80016c8:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL2 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80016cc:	6822      	ldr	r2, [r4, #0]
 80016ce:	fa96 f3a6 	rbit	r3, r6
 80016d2:	fab3 f383 	clz	r3, r3
 80016d6:	f003 031f 	and.w	r3, r3, #31
 80016da:	fa22 f303 	lsr.w	r3, r2, r3
 80016de:	07db      	lsls	r3, r3, #31
 80016e0:	d51c      	bpl.n	800171c <HAL_RCC_OscConfig+0x480>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016e2:	6a2a      	ldr	r2, [r5, #32]
 80016e4:	2a00      	cmp	r2, #0
 80016e6:	d148      	bne.n	800177a <HAL_RCC_OscConfig+0x4de>
 80016e8:	e0a4      	b.n	8001834 <HAL_RCC_OscConfig+0x598>
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system 
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80016ea:	6863      	ldr	r3, [r4, #4]
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system 
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80016ec:	f003 030c 	and.w	r3, r3, #12
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d1a6      	bne.n	8001642 <HAL_RCC_OscConfig+0x3a6>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
        ((READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80016f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system 
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80016f6:	03de      	lsls	r6, r3, #15
 80016f8:	f53f adfa 	bmi.w	80012f0 <HAL_RCC_OscConfig+0x54>
 80016fc:	e7a1      	b.n	8001642 <HAL_RCC_OscConfig+0x3a6>
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
          (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80016fe:	4b67      	ldr	r3, [pc, #412]	; (800189c <HAL_RCC_OscConfig+0x600>)
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 8001700:	6b6a      	ldr	r2, [r5, #52]	; 0x34
          (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 8001704:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001708:	4293      	cmp	r3, r2
 800170a:	f47f adf1 	bne.w	80012f0 <HAL_RCC_OscConfig+0x54>
 800170e:	e79d      	b.n	800164c <HAL_RCC_OscConfig+0x3b0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL2 is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001710:	f7ff f862 	bl	80007d8 <HAL_GetTick>
 8001714:	1bc0      	subs	r0, r0, r7
 8001716:	2864      	cmp	r0, #100	; 0x64
 8001718:	d9aa      	bls.n	8001670 <HAL_RCC_OscConfig+0x3d4>
 800171a:	e627      	b.n	800136c <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL2 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800171c:	f7ff f85c 	bl	80007d8 <HAL_GetTick>
 8001720:	1bc0      	subs	r0, r0, r7
 8001722:	2864      	cmp	r0, #100	; 0x64
 8001724:	d9d0      	bls.n	80016c8 <HAL_RCC_OscConfig+0x42c>
 8001726:	e621      	b.n	800136c <HAL_RCC_OscConfig+0xd0>
        }
      }
      else
      {
       /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8001728:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800172a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800172e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001730:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001734:	fa93 f3a3 	rbit	r3, r3

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001738:	fab3 f383 	clz	r3, r3
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001742:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174a:	f7ff f845 	bl	80007d8 <HAL_GetTick>
 800174e:	4607      	mov	r7, r0
 8001750:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 8001754:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL2 is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001758:	6822      	ldr	r2, [r4, #0]
 800175a:	fa96 f3a6 	rbit	r3, r6
 800175e:	fab3 f383 	clz	r3, r3
 8001762:	f003 031f 	and.w	r3, r3, #31
 8001766:	fa22 f303 	lsr.w	r3, r2, r3
 800176a:	07d8      	lsls	r0, r3, #31
 800176c:	d5b9      	bpl.n	80016e2 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800176e:	f7ff f833 	bl	80007d8 <HAL_GetTick>
 8001772:	1bc0      	subs	r0, r0, r7
 8001774:	2864      	cmp	r0, #100	; 0x64
 8001776:	d9ed      	bls.n	8001754 <HAL_RCC_OscConfig+0x4b8>
 8001778:	e5f8      	b.n	800136c <HAL_RCC_OscConfig+0xd0>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800177a:	4c48      	ldr	r4, [pc, #288]	; (800189c <HAL_RCC_OscConfig+0x600>)
 800177c:	6863      	ldr	r3, [r4, #4]
 800177e:	f003 030c 	and.w	r3, r3, #12
 8001782:	2b08      	cmp	r3, #8
 8001784:	f43f adb4 	beq.w	80012f0 <HAL_RCC_OscConfig+0x54>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001788:	2a02      	cmp	r2, #2
 800178a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800178e:	d15f      	bne.n	8001850 <HAL_RCC_OscConfig+0x5b4>
 8001790:	fa93 f3a3 	rbit	r3, r3
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001794:	fab3 f383 	clz	r3, r3
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800179e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a6:	f7ff f817 	bl	80007d8 <HAL_GetTick>
 80017aa:	4607      	mov	r7, r0
 80017ac:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 80017b0:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b4:	4a39      	ldr	r2, [pc, #228]	; (800189c <HAL_RCC_OscConfig+0x600>)
 80017b6:	6821      	ldr	r1, [r4, #0]
 80017b8:	fa96 f3a6 	rbit	r3, r6
 80017bc:	fab3 f383 	clz	r3, r3
 80017c0:	f003 031f 	and.w	r3, r3, #31
 80017c4:	fa21 f303 	lsr.w	r3, r1, r3
 80017c8:	07d9      	lsls	r1, r3, #31
 80017ca:	d435      	bmi.n	8001838 <HAL_RCC_OscConfig+0x59c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017cc:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 80017ce:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 80017d2:	d109      	bne.n	80017e8 <HAL_RCC_OscConfig+0x54c>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));
          
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80017d4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80017d6:	6869      	ldr	r1, [r5, #4]
 80017d8:	4319      	orrs	r1, r3
 80017da:	62d1      	str	r1, [r2, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017dc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80017de:	f021 000f 	bic.w	r0, r1, #15
 80017e2:	68e9      	ldr	r1, [r5, #12]
 80017e4:	4301      	orrs	r1, r0
 80017e6:	62d1      	str	r1, [r2, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017e8:	6863      	ldr	r3, [r4, #4]
 80017ea:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80017ec:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80017f0:	4332      	orrs	r2, r6
 80017f2:	4313      	orrs	r3, r2
 80017f4:	6063      	str	r3, [r4, #4]
 80017f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017fa:	fa93 f3a3 	rbit	r3, r3
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017fe:	fab3 f383 	clz	r3, r3
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001808:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800180c:	2201      	movs	r2, #1
 800180e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001810:	f7fe ffe2 	bl	80007d8 <HAL_GetTick>
 8001814:	4606      	mov	r6, r0
 8001816:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800181a:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800181e:	6822      	ldr	r2, [r4, #0]
 8001820:	fa95 f3a5 	rbit	r3, r5
 8001824:	fab3 f383 	clz	r3, r3
 8001828:	f003 031f 	and.w	r3, r3, #31
 800182c:	fa22 f303 	lsr.w	r3, r2, r3
 8001830:	07da      	lsls	r2, r3, #31
 8001832:	d507      	bpl.n	8001844 <HAL_RCC_OscConfig+0x5a8>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001834:	2000      	movs	r0, #0
 8001836:	e02e      	b.n	8001896 <HAL_RCC_OscConfig+0x5fa>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001838:	f7fe ffce 	bl	80007d8 <HAL_GetTick>
 800183c:	1bc0      	subs	r0, r0, r7
 800183e:	2802      	cmp	r0, #2
 8001840:	d9b6      	bls.n	80017b0 <HAL_RCC_OscConfig+0x514>
 8001842:	e593      	b.n	800136c <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001844:	f7fe ffc8 	bl	80007d8 <HAL_GetTick>
 8001848:	1b80      	subs	r0, r0, r6
 800184a:	2802      	cmp	r0, #2
 800184c:	d9e5      	bls.n	800181a <HAL_RCC_OscConfig+0x57e>
 800184e:	e58d      	b.n	800136c <HAL_RCC_OscConfig+0xd0>
 8001850:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001854:	fab3 f383 	clz	r3, r3
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800185e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001866:	f7fe ffb7 	bl	80007d8 <HAL_GetTick>
 800186a:	4606      	mov	r6, r0
 800186c:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001870:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001874:	6822      	ldr	r2, [r4, #0]
 8001876:	fa95 f3a5 	rbit	r3, r5
 800187a:	fab3 f383 	clz	r3, r3
 800187e:	f003 031f 	and.w	r3, r3, #31
 8001882:	fa22 f303 	lsr.w	r3, r2, r3
 8001886:	07db      	lsls	r3, r3, #31
 8001888:	d5d4      	bpl.n	8001834 <HAL_RCC_OscConfig+0x598>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800188a:	f7fe ffa5 	bl	80007d8 <HAL_GetTick>
 800188e:	1b80      	subs	r0, r0, r6
 8001890:	2802      	cmp	r0, #2
 8001892:	d9ed      	bls.n	8001870 <HAL_RCC_OscConfig+0x5d4>
 8001894:	e56a      	b.n	800136c <HAL_RCC_OscConfig+0xd0>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8001896:	b003      	add	sp, #12
 8001898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800189c:	40021000 	.word	0x40021000

080018a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018a0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
 80018a2:	4b3a      	ldr	r3, [pc, #232]	; (800198c <HAL_RCC_GetSysClockFreq+0xec>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018a4:	b089      	sub	sp, #36	; 0x24
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
 80018a6:	6818      	ldr	r0, [r3, #0]
 80018a8:	6859      	ldr	r1, [r3, #4]
 80018aa:	aa01      	add	r2, sp, #4
 80018ac:	c203      	stmia	r2!, {r0, r1}
 80018ae:	6898      	ldr	r0, [r3, #8]
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
 80018b0:	ad04      	add	r5, sp, #16
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
 80018b2:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
 80018b4:	f103 020c 	add.w	r2, r3, #12
 80018b8:	331c      	adds	r3, #28
 80018ba:	462c      	mov	r4, r5
 80018bc:	6810      	ldr	r0, [r2, #0]
 80018be:	6851      	ldr	r1, [r2, #4]
 80018c0:	3208      	adds	r2, #8
 80018c2:	c403      	stmia	r4!, {r0, r1}
 80018c4:	429a      	cmp	r2, r3
 80018c6:	4625      	mov	r5, r4
 80018c8:	d1f7      	bne.n	80018ba <HAL_RCC_GetSysClockFreq+0x1a>
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 80018ca:	4f31      	ldr	r7, [pc, #196]	; (8001990 <HAL_RCC_GetSysClockFreq+0xf0>)
 80018cc:	6879      	ldr	r1, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018ce:	f001 030c 	and.w	r3, r1, #12
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	d057      	beq.n	8001986 <HAL_RCC_GetSysClockFreq+0xe6>
 80018d6:	2b08      	cmp	r3, #8
 80018d8:	d001      	beq.n	80018de <HAL_RCC_GetSysClockFreq+0x3e>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018da:	482e      	ldr	r0, [pc, #184]	; (8001994 <HAL_RCC_GetSysClockFreq+0xf4>)
 80018dc:	e054      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0xe8>
 80018de:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80018e2:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 80018e6:	fab3 f383 	clz	r3, r3
 80018ea:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 80018ee:	fa22 f303 	lsr.w	r3, r2, r3
 80018f2:	aa08      	add	r2, sp, #32
 80018f4:	4413      	add	r3, r2
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018f6:	03ca      	lsls	r2, r1, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 80018f8:	f813 4c1c 	ldrb.w	r4, [r3, #-28]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018fc:	d540      	bpl.n	8001980 <HAL_RCC_GetSysClockFreq+0xe0>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
 80018fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001900:	230f      	movs	r3, #15
 8001902:	fa93 f3a3 	rbit	r3, r3
 8001906:	fab3 f183 	clz	r1, r3
 800190a:	f002 030f 	and.w	r3, r2, #15
 800190e:	40cb      	lsrs	r3, r1
 8001910:	aa08      	add	r2, sp, #32
 8001912:	4413      	add	r3, r2
 8001914:	f813 0c10 	ldrb.w	r0, [r3, #-16]
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if(HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8001918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191a:	03db      	lsls	r3, r3, #15
 800191c:	d51a      	bpl.n	8001954 <HAL_RCC_GetSysClockFreq+0xb4>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> POSITION_VAL(RCC_CFGR2_PREDIV2)) + 1;
 800191e:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8001920:	21f0      	movs	r1, #240	; 0xf0
 8001922:	fa91 f1a1 	rbit	r1, r1
 8001926:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800192a:	fab1 f681 	clz	r6, r1
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> POSITION_VAL(RCC_CFGR2_PLL2MUL)) + 2;
 800192e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001930:	fa93 f3a3 	rbit	r3, r3
          pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv) * pllmul);
 8001934:	f005 01f0 	and.w	r1, r5, #240	; 0xf0
        if(HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> POSITION_VAL(RCC_CFGR2_PREDIV2)) + 1;
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> POSITION_VAL(RCC_CFGR2_PLL2MUL)) + 2;
 8001938:	fab3 f383 	clz	r3, r3
          pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv) * pllmul);
 800193c:	40f1      	lsrs	r1, r6
 800193e:	4d16      	ldr	r5, [pc, #88]	; (8001998 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001940:	3101      	adds	r1, #1
 8001942:	fbb5 f1f1 	udiv	r1, r5, r1
 8001946:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800194a:	fa22 f303 	lsr.w	r3, r2, r3
 800194e:	3302      	adds	r3, #2
 8001950:	434b      	muls	r3, r1
 8001952:	e000      	b.n	8001956 <HAL_RCC_GetSysClockFreq+0xb6>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8001954:	4b10      	ldr	r3, [pc, #64]	; (8001998 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001956:	fbb3 f0f0 	udiv	r0, r3, r0
 800195a:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800195e:	4360      	muls	r0, r4
 8001960:	fa93 f3a3 	rbit	r3, r3
        }
        
        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> POSITION_VAL(RCC_CFGR_PLLMULL)])
 8001964:	fab3 f383 	clz	r3, r3
 8001968:	f44f 1250 	mov.w	r2, #3407872	; 0x340000
 800196c:	fa22 f303 	lsr.w	r3, r2, r3
 8001970:	aa08      	add	r2, sp, #32
 8001972:	4413      	add	r3, r2
 8001974:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001978:	429c      	cmp	r4, r3
 800197a:	d105      	bne.n	8001988 <HAL_RCC_GetSysClockFreq+0xe8>
        {
            pllclk = pllclk / 2;
 800197c:	0840      	lsrs	r0, r0, #1
 800197e:	e003      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0xe8>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001980:	4806      	ldr	r0, [pc, #24]	; (800199c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001982:	4360      	muls	r0, r4
 8001984:	e000      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0xe8>
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001986:	4804      	ldr	r0, [pc, #16]	; (8001998 <HAL_RCC_GetSysClockFreq+0xf8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001988:	b009      	add	sp, #36	; 0x24
 800198a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800198c:	08002ec0 	.word	0x08002ec0
 8001990:	40021000 	.word	0x40021000
 8001994:	007a1200 	.word	0x007a1200
 8001998:	00f42400 	.word	0x00f42400
 800199c:	003d0900 	.word	0x003d0900

080019a0 <HAL_RCC_ClockConfig>:
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019a0:	4a54      	ldr	r2, [pc, #336]	; (8001af4 <HAL_RCC_ClockConfig+0x154>)
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019a6:	6813      	ldr	r3, [r2, #0]
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a8:	4606      	mov	r6, r0
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b0:	460d      	mov	r5, r1
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019b2:	d30a      	bcc.n	80019ca <HAL_RCC_ClockConfig+0x2a>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b4:	6831      	ldr	r1, [r6, #0]
 80019b6:	078c      	lsls	r4, r1, #30
 80019b8:	d514      	bpl.n	80019e4 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ba:	484f      	ldr	r0, [pc, #316]	; (8001af8 <HAL_RCC_ClockConfig+0x158>)
 80019bc:	6843      	ldr	r3, [r0, #4]
 80019be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c2:	68b3      	ldr	r3, [r6, #8]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	6043      	str	r3, [r0, #4]
 80019c8:	e00c      	b.n	80019e4 <HAL_RCC_ClockConfig+0x44>
#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	6813      	ldr	r3, [r2, #0]
 80019cc:	f023 0307 	bic.w	r3, r3, #7
 80019d0:	430b      	orrs	r3, r1
 80019d2:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019d4:	6813      	ldr	r3, [r2, #0]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	4299      	cmp	r1, r3
 80019dc:	d0ea      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 80019de:	2001      	movs	r0, #1
 80019e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019e4:	07c8      	lsls	r0, r1, #31
 80019e6:	d406      	bmi.n	80019f6 <HAL_RCC_ClockConfig+0x56>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80019e8:	4a42      	ldr	r2, [pc, #264]	; (8001af4 <HAL_RCC_ClockConfig+0x154>)
 80019ea:	6813      	ldr	r3, [r2, #0]
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	429d      	cmp	r5, r3
 80019f2:	d34a      	bcc.n	8001a8a <HAL_RCC_ClockConfig+0xea>
 80019f4:	e053      	b.n	8001a9e <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f6:	6872      	ldr	r2, [r6, #4]
 80019f8:	4c3f      	ldr	r4, [pc, #252]	; (8001af8 <HAL_RCC_ClockConfig+0x158>)
 80019fa:	2a01      	cmp	r2, #1
 80019fc:	d102      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x64>
 80019fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a02:	e004      	b.n	8001a0e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a04:	2a02      	cmp	r2, #2
 8001a06:	bf0c      	ite	eq
 8001a08:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001a0c:	2302      	movne	r3, #2
 8001a0e:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a12:	6821      	ldr	r1, [r4, #0]
 8001a14:	fa93 f3a3 	rbit	r3, r3
 8001a18:	fab3 f383 	clz	r3, r3
 8001a1c:	f003 031f 	and.w	r3, r3, #31
 8001a20:	fa21 f303 	lsr.w	r3, r1, r3
 8001a24:	07d9      	lsls	r1, r3, #31
 8001a26:	d5da      	bpl.n	80019de <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a28:	6863      	ldr	r3, [r4, #4]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a2a:	f241 3888 	movw	r8, #5000	; 0x1388
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a2e:	f023 0303 	bic.w	r3, r3, #3
 8001a32:	431a      	orrs	r2, r3
 8001a34:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a36:	f7fe fecf 	bl	80007d8 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3a:	6873      	ldr	r3, [r6, #4]
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a3c:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d10c      	bne.n	8001a5c <HAL_RCC_ClockConfig+0xbc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a42:	6863      	ldr	r3, [r4, #4]
 8001a44:	f003 030c 	and.w	r3, r3, #12
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d0cd      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4c:	f7fe fec4 	bl	80007d8 <HAL_GetTick>
 8001a50:	1bc0      	subs	r0, r0, r7
 8001a52:	4540      	cmp	r0, r8
 8001a54:	d9f5      	bls.n	8001a42 <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
 8001a56:	2003      	movs	r0, #3
 8001a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d10f      	bne.n	8001a80 <HAL_RCC_ClockConfig+0xe0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a60:	6863      	ldr	r3, [r4, #4]
 8001a62:	f003 030c 	and.w	r3, r3, #12
 8001a66:	2b08      	cmp	r3, #8
 8001a68:	d0be      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a6a:	f7fe feb5 	bl	80007d8 <HAL_GetTick>
 8001a6e:	1bc0      	subs	r0, r0, r7
 8001a70:	4540      	cmp	r0, r8
 8001a72:	d9f5      	bls.n	8001a60 <HAL_RCC_ClockConfig+0xc0>
 8001a74:	e7ef      	b.n	8001a56 <HAL_RCC_ClockConfig+0xb6>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a76:	f7fe feaf 	bl	80007d8 <HAL_GetTick>
 8001a7a:	1bc0      	subs	r0, r0, r7
 8001a7c:	4540      	cmp	r0, r8
 8001a7e:	d8ea      	bhi.n	8001a56 <HAL_RCC_ClockConfig+0xb6>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a80:	6863      	ldr	r3, [r4, #4]
 8001a82:	f013 0f0c 	tst.w	r3, #12
 8001a86:	d1f6      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xd6>
 8001a88:	e7ae      	b.n	80019e8 <HAL_RCC_ClockConfig+0x48>
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8a:	6813      	ldr	r3, [r2, #0]
 8001a8c:	f023 0307 	bic.w	r3, r3, #7
 8001a90:	432b      	orrs	r3, r5
 8001a92:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a94:	6813      	ldr	r3, [r2, #0]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	429d      	cmp	r5, r3
 8001a9c:	d19f      	bne.n	80019de <HAL_RCC_ClockConfig+0x3e>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a9e:	6831      	ldr	r1, [r6, #0]
 8001aa0:	4c15      	ldr	r4, [pc, #84]	; (8001af8 <HAL_RCC_ClockConfig+0x158>)
 8001aa2:	f011 0f04 	tst.w	r1, #4
 8001aa6:	d005      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa8:	6863      	ldr	r3, [r4, #4]
 8001aaa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001aae:	68f3      	ldr	r3, [r6, #12]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab4:	070b      	lsls	r3, r1, #28
 8001ab6:	d506      	bpl.n	8001ac6 <HAL_RCC_ClockConfig+0x126>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ab8:	6863      	ldr	r3, [r4, #4]
 8001aba:	6932      	ldr	r2, [r6, #16]
 8001abc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001ac0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001ac4:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ac6:	f7ff feeb 	bl	80018a0 <HAL_RCC_GetSysClockFreq>
 8001aca:	6863      	ldr	r3, [r4, #4]
 8001acc:	22f0      	movs	r2, #240	; 0xf0
 8001ace:	fa92 f2a2 	rbit	r2, r2
 8001ad2:	fab2 f282 	clz	r2, r2
 8001ad6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ada:	40d3      	lsrs	r3, r2
 8001adc:	4a07      	ldr	r2, [pc, #28]	; (8001afc <HAL_RCC_ClockConfig+0x15c>)
 8001ade:	5cd3      	ldrb	r3, [r2, r3]
 8001ae0:	40d8      	lsrs	r0, r3
 8001ae2:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <HAL_RCC_ClockConfig+0x160>)
 8001ae4:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f7fe fe4a 	bl	8000780 <HAL_InitTick>
  
  return HAL_OK;
 8001aec:	2000      	movs	r0, #0
}
 8001aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001af2:	bf00      	nop
 8001af4:	40022000 	.word	0x40022000
 8001af8:	40021000 	.word	0x40021000
 8001afc:	08002edc 	.word	0x08002edc
 8001b00:	20000000 	.word	0x20000000

08001b04 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001b04:	4b01      	ldr	r3, [pc, #4]	; (8001b0c <HAL_RCC_GetHCLKFreq+0x8>)
 8001b06:	6818      	ldr	r0, [r3, #0]
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000000 	.word	0x20000000

08001b10 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b10:	6803      	ldr	r3, [r0, #0]
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b12:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b16:	f013 0f01 	tst.w	r3, #1
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b1a:	4605      	mov	r5, r0
 8001b1c:	4c6c      	ldr	r4, [pc, #432]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b1e:	d063      	beq.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b20:	69e3      	ldr	r3, [r4, #28]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b22:	4e6c      	ldr	r6, [pc, #432]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b28:	61e3      	str	r3, [r4, #28]
 8001b2a:	69e3      	ldr	r3, [r4, #28]
 8001b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b30:	9301      	str	r3, [sp, #4]
 8001b32:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b34:	6833      	ldr	r3, [r6, #0]
 8001b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3a:	6033      	str	r3, [r6, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b3c:	f7fe fe4c 	bl	80007d8 <HAL_GetTick>
 8001b40:	4607      	mov	r7, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001b42:	6833      	ldr	r3, [r6, #0]
 8001b44:	05db      	lsls	r3, r3, #23
 8001b46:	d406      	bmi.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b48:	f7fe fe46 	bl	80007d8 <HAL_GetTick>
 8001b4c:	1bc0      	subs	r0, r0, r7
 8001b4e:	2864      	cmp	r0, #100	; 0x64
 8001b50:	d9f7      	bls.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0x32>
      {
        return HAL_TIMEOUT;
 8001b52:	2003      	movs	r0, #3
 8001b54:	e0b9      	b.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b56:	6a23      	ldr	r3, [r4, #32]
 8001b58:	485d      	ldr	r0, [pc, #372]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b5a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001b5e:	d106      	bne.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x5e>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001b60:	6a23      	ldr	r3, [r4, #32]
 8001b62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b66:	686b      	ldr	r3, [r5, #4]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	6223      	str	r3, [r4, #32]
 8001b6c:	e03c      	b.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b6e:	686a      	ldr	r2, [r5, #4]
 8001b70:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d0f3      	beq.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b78:	6a01      	ldr	r1, [r0, #32]
 8001b7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b7e:	f421 7740 	bic.w	r7, r1, #768	; 0x300
 8001b82:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b86:	fab2 f282 	clz	r2, r2
 8001b8a:	4e53      	ldr	r6, [pc, #332]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001b8c:	f04f 0e01 	mov.w	lr, #1
 8001b90:	f846 e022 	str.w	lr, [r6, r2, lsl #2]
 8001b94:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b98:	fab3 f383 	clz	r3, r3
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ba2:	6207      	str	r7, [r0, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ba4:	07c8      	lsls	r0, r1, #31
 8001ba6:	d5db      	bpl.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x50>
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ba8:	f7fe fe16 	bl	80007d8 <HAL_GetTick>
 8001bac:	2602      	movs	r6, #2
 8001bae:	4680      	mov	r8, r0
 8001bb0:	4637      	mov	r7, r6
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb2:	f241 3988 	movw	r9, #5000	; 0x1388
 8001bb6:	fa96 f3a6 	rbit	r3, r6
 8001bba:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bbe:	b10b      	cbz	r3, 8001bc4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8001bc0:	6a22      	ldr	r2, [r4, #32]
 8001bc2:	e000      	b.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
 8001bc4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001bc6:	fa97 f3a7 	rbit	r3, r7
 8001bca:	fab3 f383 	clz	r3, r3
 8001bce:	f003 031f 	and.w	r3, r3, #31
 8001bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd6:	07d9      	lsls	r1, r3, #31
 8001bd8:	d4c2      	bmi.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x50>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bda:	f7fe fdfd 	bl	80007d8 <HAL_GetTick>
 8001bde:	ebc8 0000 	rsb	r0, r8, r0
 8001be2:	4548      	cmp	r0, r9
 8001be4:	d9e7      	bls.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8001be6:	e7b4      	b.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001be8:	682b      	ldr	r3, [r5, #0]
 8001bea:	079a      	lsls	r2, r3, #30
 8001bec:	d505      	bpl.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001bee:	6862      	ldr	r2, [r4, #4]
 8001bf0:	f422 4140 	bic.w	r1, r2, #49152	; 0xc000
 8001bf4:	68aa      	ldr	r2, [r5, #8]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	6062      	str	r2, [r4, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8001bfa:	075f      	lsls	r7, r3, #29
 8001bfc:	d505      	bpl.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8001bfe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c00:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8001c04:	68ea      	ldr	r2, [r5, #12]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	62e2      	str	r2, [r4, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8001c0a:	071e      	lsls	r6, r3, #28
 8001c0c:	d505      	bpl.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));
    
    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8001c0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c10:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8001c14:	692b      	ldr	r3, [r5, #16]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/ 
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8001c1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c1c:	0398      	lsls	r0, r3, #14
 8001c1e:	d40f      	bmi.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8001c20:	4b2b      	ldr	r3, [pc, #172]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c24:	0359      	lsls	r1, r3, #13
 8001c26:	d40b      	bmi.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x130>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c28:	6828      	ldr	r0, [r5, #0]
 8001c2a:	f010 0010 	ands.w	r0, r0, #16
 8001c2e:	d04c      	beq.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c30:	6863      	ldr	r3, [r4, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001c32:	2000      	movs	r0, #0
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c34:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c38:	69eb      	ldr	r3, [r5, #28]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	6063      	str	r3, [r4, #4]
 8001c3e:	e044      	b.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x1ba>

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8001c40:	6823      	ldr	r3, [r4, #0]
 8001c42:	4a23      	ldr	r2, [pc, #140]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	d439      	bmi.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
 8001c48:	6813      	ldr	r3, [r2, #0]
 8001c4a:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8001c4e:	69ab      	ldr	r3, [r5, #24]
 8001c50:	d004      	beq.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x14c>
        (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8001c52:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
 8001c54:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d135      	bne.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      {
        return HAL_ERROR;
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8001c5c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c5e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001c62:	4313      	orrs	r3, r2
 8001c64:	62e3      	str	r3, [r4, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8001c66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c68:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8001c6c:	696b      	ldr	r3, [r5, #20]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001c72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c76:	fa93 f3a3 	rbit	r3, r3
      
      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8001c7a:	fab3 f383 	clz	r3, r3
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001c84:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001c88:	2201      	movs	r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8c:	f7fe fda4 	bl	80007d8 <HAL_GetTick>
 8001c90:	4607      	mov	r7, r0
 8001c92:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
 8001c96:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till PLLI2S is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c9a:	6822      	ldr	r2, [r4, #0]
 8001c9c:	fa96 f3a6 	rbit	r3, r6
 8001ca0:	fab3 f383 	clz	r3, r3
 8001ca4:	f003 031f 	and.w	r3, r3, #31
 8001ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cac:	07da      	lsls	r2, r3, #31
 8001cae:	d4bb      	bmi.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x118>
      {
        if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001cb0:	f7fe fd92 	bl	80007d8 <HAL_GetTick>
 8001cb4:	1bc0      	subs	r0, r0, r7
 8001cb6:	2864      	cmp	r0, #100	; 0x64
 8001cb8:	d9ed      	bls.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001cba:	e74a      	b.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x42>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8001cbc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001cbe:	696a      	ldr	r2, [r5, #20]
 8001cc0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d0af      	beq.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x118>
      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
        (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
      {
        return HAL_ERROR;
 8001cc8:	2001      	movs	r0, #1
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
}
 8001cca:	b003      	add	sp, #12
 8001ccc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40007000 	.word	0x40007000
 8001cd8:	42420400 	.word	0x42420400

08001cdc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cdc:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001cde:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ce0:	f023 0301 	bic.w	r3, r3, #1
 8001ce4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ce6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ce8:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001cea:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001cec:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001cee:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001cf2:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001cf4:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001cf8:	688b      	ldr	r3, [r1, #8]
 8001cfa:	4323      	orrs	r3, r4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001cfc:	4c0a      	ldr	r4, [pc, #40]	; (8001d28 <TIM_OC1_SetConfig+0x4c>)
 8001cfe:	42a0      	cmp	r0, r4
 8001d00:	d10b      	bne.n	8001d1a <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001d02:	68cc      	ldr	r4, [r1, #12]
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001d04:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001d08:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d0a:	694e      	ldr	r6, [r1, #20]
 8001d0c:	698c      	ldr	r4, [r1, #24]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001d0e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d12:	4334      	orrs	r4, r6
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001d14:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d18:	4322      	orrs	r2, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d1a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001d1c:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d1e:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001d20:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d22:	6203      	str	r3, [r0, #32]
 8001d24:	bd70      	pop	{r4, r5, r6, pc}
 8001d26:	bf00      	nop
 8001d28:	40012c00 	.word	0x40012c00

08001d2c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001d2c:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d2e:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d34:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d36:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d38:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001d3a:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d3c:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001d3e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d42:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8001d44:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001d46:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8001d4a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001d4e:	4d0c      	ldr	r5, [pc, #48]	; (8001d80 <TIM_OC3_SetConfig+0x54>)
 8001d50:	42a8      	cmp	r0, r5
 8001d52:	d10e      	bne.n	8001d72 <TIM_OC3_SetConfig+0x46>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8001d54:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001d56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8001d5a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8001d5e:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001d60:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8001d64:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8001d68:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001d6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8001d6e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d72:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001d74:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001d76:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001d78:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d7a:	6203      	str	r3, [r0, #32]
 8001d7c:	bd30      	pop	{r4, r5, pc}
 8001d7e:	bf00      	nop
 8001d80:	40012c00 	.word	0x40012c00

08001d84 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001d84:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d86:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001d88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d8c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d8e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d90:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001d92:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001d94:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001d96:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001d9a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8001d9e:	688d      	ldr	r5, [r1, #8]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001da0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8001da4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001da8:	4d06      	ldr	r5, [pc, #24]	; (8001dc4 <TIM_OC4_SetConfig+0x40>)
 8001daa:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001dac:	bf02      	ittt	eq
 8001dae:	694d      	ldreq	r5, [r1, #20]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001db0:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001db4:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001db8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001dba:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001dbc:	684a      	ldr	r2, [r1, #4]
 8001dbe:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001dc0:	6203      	str	r3, [r0, #32]
 8001dc2:	bd30      	pop	{r4, r5, pc}
 8001dc4:	40012c00 	.word	0x40012c00

08001dc8 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dc8:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8001dca:	2000      	movs	r0, #0
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	f042 0201 	orr.w	r2, r2, #1
 8001dd2:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	f042 0201 	orr.w	r2, r2, #1
 8001dda:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8001ddc:	4770      	bx	lr

08001dde <HAL_TIM_OC_MspInit>:
 8001dde:	4770      	bx	lr

08001de0 <HAL_TIM_PWM_MspInit>:
 8001de0:	4770      	bx	lr

08001de2 <HAL_TIM_IC_MspInit>:
 8001de2:	4770      	bx	lr

08001de4 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001de4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8001de8:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	f04f 0302 	mov.w	r3, #2
 8001df0:	f000 80b0 	beq.w	8001f54 <HAL_TIM_ConfigClockSource+0x170>

  htim->State = HAL_TIM_STATE_BUSY;
 8001df4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001df8:	6803      	ldr	r3, [r0, #0]
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e00:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e02:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001e06:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001e0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e0c:	680a      	ldr	r2, [r1, #0]
 8001e0e:	2a40      	cmp	r2, #64	; 0x40
 8001e10:	d077      	beq.n	8001f02 <HAL_TIM_ConfigClockSource+0x11e>
 8001e12:	d818      	bhi.n	8001e46 <HAL_TIM_ConfigClockSource+0x62>
 8001e14:	2a10      	cmp	r2, #16
 8001e16:	f000 808b 	beq.w	8001f30 <HAL_TIM_ConfigClockSource+0x14c>
 8001e1a:	d808      	bhi.n	8001e2e <HAL_TIM_ConfigClockSource+0x4a>
 8001e1c:	2a00      	cmp	r2, #0
 8001e1e:	f040 8093 	bne.w	8001f48 <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001e22:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e24:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e28:	f042 0207 	orr.w	r2, r2, #7
 8001e2c:	e08b      	b.n	8001f46 <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8001e2e:	2a20      	cmp	r2, #32
 8001e30:	f000 8084 	beq.w	8001f3c <HAL_TIM_ConfigClockSource+0x158>
 8001e34:	2a30      	cmp	r2, #48	; 0x30
 8001e36:	f040 8087 	bne.w	8001f48 <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001e3a:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e3c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e40:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001e44:	e07f      	b.n	8001f46 <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8001e46:	2a70      	cmp	r2, #112	; 0x70
 8001e48:	d035      	beq.n	8001eb6 <HAL_TIM_ConfigClockSource+0xd2>
 8001e4a:	d81b      	bhi.n	8001e84 <HAL_TIM_ConfigClockSource+0xa0>
 8001e4c:	2a50      	cmp	r2, #80	; 0x50
 8001e4e:	d041      	beq.n	8001ed4 <HAL_TIM_ConfigClockSource+0xf0>
 8001e50:	2a60      	cmp	r2, #96	; 0x60
 8001e52:	d179      	bne.n	8001f48 <HAL_TIM_ConfigClockSource+0x164>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e54:	6a1c      	ldr	r4, [r3, #32]

       /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e56:	684d      	ldr	r5, [r1, #4]
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e58:	f024 0410 	bic.w	r4, r4, #16

       /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e5c:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e5e:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e60:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001e62:	6a1a      	ldr	r2, [r3, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e64:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 8001e6c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12);
 8001e70:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001e74:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e76:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001e78:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e7a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e7e:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001e82:	e060      	b.n	8001f46 <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8001e84:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001e88:	d011      	beq.n	8001eae <HAL_TIM_ConfigClockSource+0xca>
 8001e8a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001e8e:	d15b      	bne.n	8001f48 <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8001e90:	689c      	ldr	r4, [r3, #8]
 8001e92:	688d      	ldr	r5, [r1, #8]
 8001e94:	684a      	ldr	r2, [r1, #4]
 8001e96:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001e9a:	68c9      	ldr	r1, [r1, #12]
 8001e9c:	432a      	orrs	r2, r5
 8001e9e:	4322      	orrs	r2, r4
 8001ea0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ea4:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001eac:	e04b      	b.n	8001f46 <HAL_TIM_ConfigClockSource+0x162>
  {
  case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	f022 0207 	bic.w	r2, r2, #7
 8001eb4:	e047      	b.n	8001f46 <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8001eb6:	689c      	ldr	r4, [r3, #8]
 8001eb8:	688d      	ldr	r5, [r1, #8]
 8001eba:	684a      	ldr	r2, [r1, #4]
 8001ebc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001ec0:	68c9      	ldr	r1, [r1, #12]
 8001ec2:	432a      	orrs	r2, r5
 8001ec4:	4322      	orrs	r2, r4
 8001ec6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001eca:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 8001ecc:	689a      	ldr	r2, [r3, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ece:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001ed2:	e038      	b.n	8001f46 <HAL_TIM_ConfigClockSource+0x162>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ed4:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ed6:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ed8:	684d      	ldr	r5, [r1, #4]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001eda:	f024 0401 	bic.w	r4, r4, #1

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ede:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ee0:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ee2:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ee4:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ee8:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8001eec:	432a      	orrs	r2, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 8001eee:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001ef2:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ef4:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001ef6:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001ef8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001efc:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001f00:	e021      	b.n	8001f46 <HAL_TIM_ConfigClockSource+0x162>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f02:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f04:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f06:	684d      	ldr	r5, [r1, #4]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f08:	f024 0401 	bic.w	r4, r4, #1

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f0c:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f0e:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f10:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f12:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f16:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8001f1a:	432a      	orrs	r2, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 8001f1c:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f20:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f22:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001f24:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f26:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f2a:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001f2e:	e00a      	b.n	8001f46 <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001f30:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f32:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f36:	f042 0217 	orr.w	r2, r2, #23
 8001f3a:	e004      	b.n	8001f46 <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001f3c:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f3e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f42:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001f46:	609a      	str	r2, [r3, #8]
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f54:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8001f56:	bd70      	pop	{r4, r5, r6, pc}

08001f58 <HAL_TIM_OC_DelayElapsedCallback>:
 8001f58:	4770      	bx	lr

08001f5a <HAL_TIM_IC_CaptureCallback>:
 8001f5a:	4770      	bx	lr

08001f5c <HAL_TIM_PWM_PulseFinishedCallback>:
 8001f5c:	4770      	bx	lr

08001f5e <HAL_TIM_TriggerCallback>:
 8001f5e:	4770      	bx	lr

08001f60 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f60:	6803      	ldr	r3, [r0, #0]
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f62:	b510      	push	{r4, lr}
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f64:	691a      	ldr	r2, [r3, #16]
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f66:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f68:	0791      	lsls	r1, r2, #30
 8001f6a:	d514      	bpl.n	8001f96 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	0792      	lsls	r2, r2, #30
 8001f70:	d511      	bpl.n	8001f96 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f72:	f06f 0202 	mvn.w	r2, #2
 8001f76:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001f78:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f7a:	2201      	movs	r2, #1

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001f7c:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f7e:	7602      	strb	r2, [r0, #24]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001f80:	d002      	beq.n	8001f88 <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001f82:	f7ff ffea 	bl	8001f5a <HAL_TIM_IC_CaptureCallback>
 8001f86:	e004      	b.n	8001f92 <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f88:	f7ff ffe6 	bl	8001f58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	f7ff ffe5 	bl	8001f5c <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f92:	2300      	movs	r3, #0
 8001f94:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f96:	6823      	ldr	r3, [r4, #0]
 8001f98:	691a      	ldr	r2, [r3, #16]
 8001f9a:	0750      	lsls	r0, r2, #29
 8001f9c:	d516      	bpl.n	8001fcc <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	0751      	lsls	r1, r2, #29
 8001fa2:	d513      	bpl.n	8001fcc <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fa4:	f06f 0204 	mvn.w	r2, #4
 8001fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001faa:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fac:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001fae:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fb2:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb4:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001fb6:	d002      	beq.n	8001fbe <HAL_TIM_IRQHandler+0x5e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb8:	f7ff ffcf 	bl	8001f5a <HAL_TIM_IC_CaptureCallback>
 8001fbc:	e004      	b.n	8001fc8 <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fbe:	f7ff ffcb 	bl	8001f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	f7ff ffca 	bl	8001f5c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fcc:	6823      	ldr	r3, [r4, #0]
 8001fce:	691a      	ldr	r2, [r3, #16]
 8001fd0:	0712      	lsls	r2, r2, #28
 8001fd2:	d515      	bpl.n	8002000 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001fd4:	68da      	ldr	r2, [r3, #12]
 8001fd6:	0710      	lsls	r0, r2, #28
 8001fd8:	d512      	bpl.n	8002000 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fda:	f06f 0208 	mvn.w	r2, #8
 8001fde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001fe0:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fe2:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001fe4:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fe6:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe8:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001fea:	d002      	beq.n	8001ff2 <HAL_TIM_IRQHandler+0x92>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001fec:	f7ff ffb5 	bl	8001f5a <HAL_TIM_IC_CaptureCallback>
 8001ff0:	e004      	b.n	8001ffc <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff2:	f7ff ffb1 	bl	8001f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff6:	4620      	mov	r0, r4
 8001ff8:	f7ff ffb0 	bl	8001f5c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002000:	6823      	ldr	r3, [r4, #0]
 8002002:	691a      	ldr	r2, [r3, #16]
 8002004:	06d2      	lsls	r2, r2, #27
 8002006:	d516      	bpl.n	8002036 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	06d0      	lsls	r0, r2, #27
 800200c:	d513      	bpl.n	8002036 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800200e:	f06f 0210 	mvn.w	r2, #16
 8002012:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002014:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002016:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002018:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800201c:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800201e:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002020:	d002      	beq.n	8002028 <HAL_TIM_IRQHandler+0xc8>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002022:	f7ff ff9a 	bl	8001f5a <HAL_TIM_IC_CaptureCallback>
 8002026:	e004      	b.n	8002032 <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002028:	f7ff ff96 	bl	8001f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800202c:	4620      	mov	r0, r4
 800202e:	f7ff ff95 	bl	8001f5c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002032:	2300      	movs	r3, #0
 8002034:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002036:	6823      	ldr	r3, [r4, #0]
 8002038:	691a      	ldr	r2, [r3, #16]
 800203a:	07d1      	lsls	r1, r2, #31
 800203c:	d508      	bpl.n	8002050 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	07d2      	lsls	r2, r2, #31
 8002042:	d505      	bpl.n	8002050 <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002044:	f06f 0201 	mvn.w	r2, #1
 8002048:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800204a:	4620      	mov	r0, r4
 800204c:	f000 fd86 	bl	8002b5c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002050:	6823      	ldr	r3, [r4, #0]
 8002052:	691a      	ldr	r2, [r3, #16]
 8002054:	0610      	lsls	r0, r2, #24
 8002056:	d508      	bpl.n	800206a <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	0611      	lsls	r1, r2, #24
 800205c:	d505      	bpl.n	800206a <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800205e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002062:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002064:	4620      	mov	r0, r4
 8002066:	f000 fad8 	bl	800261a <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800206a:	6823      	ldr	r3, [r4, #0]
 800206c:	691a      	ldr	r2, [r3, #16]
 800206e:	0652      	lsls	r2, r2, #25
 8002070:	d508      	bpl.n	8002084 <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	0650      	lsls	r0, r2, #25
 8002076:	d505      	bpl.n	8002084 <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002078:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800207c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800207e:	4620      	mov	r0, r4
 8002080:	f7ff ff6d 	bl	8001f5e <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002084:	6823      	ldr	r3, [r4, #0]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	0691      	lsls	r1, r2, #26
 800208a:	d50a      	bpl.n	80020a2 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	0692      	lsls	r2, r2, #26
 8002090:	d507      	bpl.n	80020a2 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002092:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002096:	4620      	mov	r0, r4
    }
  }
}
 8002098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800209c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800209e:	f000 babb 	b.w	8002618 <HAL_TIMEx_CommutationCallback>
 80020a2:	bd10      	pop	{r4, pc}

080020a4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020a4:	4a1c      	ldr	r2, [pc, #112]	; (8002118 <TIM_Base_SetConfig+0x74>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 80020a6:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020a8:	4290      	cmp	r0, r2
 80020aa:	d00e      	beq.n	80020ca <TIM_Base_SetConfig+0x26>
 80020ac:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80020b0:	d00b      	beq.n	80020ca <TIM_Base_SetConfig+0x26>
 80020b2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80020b6:	4290      	cmp	r0, r2
 80020b8:	d007      	beq.n	80020ca <TIM_Base_SetConfig+0x26>
 80020ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020be:	4290      	cmp	r0, r2
 80020c0:	d003      	beq.n	80020ca <TIM_Base_SetConfig+0x26>
 80020c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020c6:	4290      	cmp	r0, r2
 80020c8:	d119      	bne.n	80020fe <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80020ca:	684a      	ldr	r2, [r1, #4]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80020d0:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020d2:	4a11      	ldr	r2, [pc, #68]	; (8002118 <TIM_Base_SetConfig+0x74>)
 80020d4:	4290      	cmp	r0, r2
 80020d6:	d00e      	beq.n	80020f6 <TIM_Base_SetConfig+0x52>
 80020d8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80020dc:	d00b      	beq.n	80020f6 <TIM_Base_SetConfig+0x52>
 80020de:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80020e2:	4290      	cmp	r0, r2
 80020e4:	d007      	beq.n	80020f6 <TIM_Base_SetConfig+0x52>
 80020e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020ea:	4290      	cmp	r0, r2
 80020ec:	d003      	beq.n	80020f6 <TIM_Base_SetConfig+0x52>
 80020ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020f2:	4290      	cmp	r0, r2
 80020f4:	d103      	bne.n	80020fe <TIM_Base_SetConfig+0x5a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020f6:	68ca      	ldr	r2, [r1, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020fc:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 80020fe:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002100:	688b      	ldr	r3, [r1, #8]
 8002102:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002104:	680b      	ldr	r3, [r1, #0]
 8002106:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002108:	4b03      	ldr	r3, [pc, #12]	; (8002118 <TIM_Base_SetConfig+0x74>)
 800210a:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800210c:	bf04      	itt	eq
 800210e:	690b      	ldreq	r3, [r1, #16]
 8002110:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002112:	2301      	movs	r3, #1
 8002114:	6143      	str	r3, [r0, #20]
 8002116:	4770      	bx	lr
 8002118:	40012c00 	.word	0x40012c00

0800211c <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800211c:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800211e:	4604      	mov	r4, r0
 8002120:	b1a0      	cbz	r0, 800214c <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002122:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002126:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800212a:	b91b      	cbnz	r3, 8002134 <HAL_TIM_Base_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800212c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002130:	f000 fe32 	bl	8002d98 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002134:	2302      	movs	r3, #2
 8002136:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800213a:	6820      	ldr	r0, [r4, #0]
 800213c:	1d21      	adds	r1, r4, #4
 800213e:	f7ff ffb1 	bl	80020a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002142:	2301      	movs	r3, #1
 8002144:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 8002148:	2000      	movs	r0, #0
 800214a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 800214c:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  return HAL_OK;
}
 800214e:	bd10      	pop	{r4, pc}

08002150 <HAL_TIM_OC_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 8002150:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002152:	4604      	mov	r4, r0
 8002154:	b1a0      	cbz	r0, 8002180 <HAL_TIM_OC_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002156:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800215a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800215e:	b91b      	cbnz	r3, 8002168 <HAL_TIM_OC_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002160:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002164:	f7ff fe3b 	bl	8001dde <HAL_TIM_OC_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002168:	2302      	movs	r3, #2
 800216a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800216e:	6820      	ldr	r0, [r4, #0]
 8002170:	1d21      	adds	r1, r4, #4
 8002172:	f7ff ff97 	bl	80020a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002176:	2301      	movs	r3, #1
 8002178:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 800217c:	2000      	movs	r0, #0
 800217e:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002180:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  return HAL_OK;
}
 8002182:	bd10      	pop	{r4, pc}

08002184 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002184:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002186:	4604      	mov	r4, r0
 8002188:	b1a0      	cbz	r0, 80021b4 <HAL_TIM_PWM_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 800218a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800218e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002192:	b91b      	cbnz	r3, 800219c <HAL_TIM_PWM_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002194:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002198:	f7ff fe22 	bl	8001de0 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800219c:	2302      	movs	r3, #2
 800219e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021a2:	6820      	ldr	r0, [r4, #0]
 80021a4:	1d21      	adds	r1, r4, #4
 80021a6:	f7ff ff7d 	bl	80020a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80021aa:	2301      	movs	r3, #1
 80021ac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 80021b0:	2000      	movs	r0, #0
 80021b2:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 80021b4:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  return HAL_OK;
}
 80021b6:	bd10      	pop	{r4, pc}

080021b8 <HAL_TIM_IC_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80021b8:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80021ba:	4604      	mov	r4, r0
 80021bc:	b1a0      	cbz	r0, 80021e8 <HAL_TIM_IC_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 80021be:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80021c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021c6:	b91b      	cbnz	r3, 80021d0 <HAL_TIM_IC_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021c8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80021cc:	f7ff fe09 	bl	8001de2 <HAL_TIM_IC_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80021d0:	2302      	movs	r3, #2
 80021d2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021d6:	6820      	ldr	r0, [r4, #0]
 80021d8:	1d21      	adds	r1, r4, #4
 80021da:	f7ff ff63 	bl	80020a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80021de:	2301      	movs	r3, #1
 80021e0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 80021e4:	2000      	movs	r0, #0
 80021e6:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 80021e8:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  return HAL_OK;
}
 80021ea:	bd10      	pop	{r4, pc}

080021ec <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021ec:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021ee:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021f0:	f023 0310 	bic.w	r3, r3, #16
 80021f4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021f6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021f8:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021fa:	6984      	ldr	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80021fc:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80021fe:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8002202:	ea44 2405 	orr.w	r4, r4, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8002206:	688d      	ldr	r5, [r1, #8]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002208:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 800220c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002210:	4d0b      	ldr	r5, [pc, #44]	; (8002240 <TIM_OC2_SetConfig+0x54>)
 8002212:	42a8      	cmp	r0, r5
 8002214:	d10e      	bne.n	8002234 <TIM_OC2_SetConfig+0x48>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8002216:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002218:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 800221c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002220:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002222:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002226:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800222a:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800222c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002230:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002234:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002236:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002238:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800223a:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800223c:	6203      	str	r3, [r0, #32]
 800223e:	bd30      	pop	{r4, r5, pc}
 8002240:	40012c00 	.word	0x40012c00

08002244 <HAL_TIM_OC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002244:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8002246:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 800224a:	4604      	mov	r4, r0
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800224c:	2b01      	cmp	r3, #1
 800224e:	f04f 0002 	mov.w	r0, #2
 8002252:	d024      	beq.n	800229e <HAL_TIM_OC_ConfigChannel+0x5a>
 8002254:	2301      	movs	r3, #1
 8002256:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800225a:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 800225e:	461d      	mov	r5, r3

  switch (Channel)
 8002260:	2a0c      	cmp	r2, #12
 8002262:	d817      	bhi.n	8002294 <HAL_TIM_OC_ConfigChannel+0x50>
 8002264:	e8df f002 	tbb	[pc, r2]
 8002268:	16161607 	.word	0x16161607
 800226c:	1616160b 	.word	0x1616160b
 8002270:	1616160f 	.word	0x1616160f
 8002274:	13          	.byte	0x13
 8002275:	00          	.byte	0x00
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002276:	6820      	ldr	r0, [r4, #0]
 8002278:	f7ff fd30 	bl	8001cdc <TIM_OC1_SetConfig>
    }
    break;
 800227c:	e00a      	b.n	8002294 <HAL_TIM_OC_ConfigChannel+0x50>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800227e:	6820      	ldr	r0, [r4, #0]
 8002280:	f7ff ffb4 	bl	80021ec <TIM_OC2_SetConfig>
    }
    break;
 8002284:	e006      	b.n	8002294 <HAL_TIM_OC_ConfigChannel+0x50>

    case TIM_CHANNEL_3:
    {
       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002286:	6820      	ldr	r0, [r4, #0]
 8002288:	f7ff fd50 	bl	8001d2c <TIM_OC3_SetConfig>
    }
    break;
 800228c:	e002      	b.n	8002294 <HAL_TIM_OC_ConfigChannel+0x50>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
       /* Configure the TIM Channel 4 in Output Compare */
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 800228e:	6820      	ldr	r0, [r4, #0]
 8002290:	f7ff fd78 	bl	8001d84 <TIM_OC4_SetConfig>
    default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8002294:	2000      	movs	r0, #0
    break;

    default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8002296:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800229a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
}
 800229e:	bd38      	pop	{r3, r4, r5, pc}

080022a0 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 80022a0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80022a2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 80022a6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80022a8:	2b01      	cmp	r3, #1
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 80022aa:	460d      	mov	r5, r1
 80022ac:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80022b0:	d058      	beq.n	8002364 <HAL_TIM_PWM_ConfigChannel+0xc4>
 80022b2:	2301      	movs	r3, #1
 80022b4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 80022b8:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39

  switch (Channel)
 80022bc:	2a0c      	cmp	r2, #12
 80022be:	d84b      	bhi.n	8002358 <HAL_TIM_PWM_ConfigChannel+0xb8>
 80022c0:	e8df f002 	tbb	[pc, r2]
 80022c4:	4a4a4a07 	.word	0x4a4a4a07
 80022c8:	4a4a4a17 	.word	0x4a4a4a17
 80022cc:	4a4a4a29 	.word	0x4a4a4a29
 80022d0:	39          	.byte	0x39
 80022d1:	00          	.byte	0x00
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022d2:	6820      	ldr	r0, [r4, #0]
 80022d4:	f7ff fd02 	bl	8001cdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022d8:	6823      	ldr	r3, [r4, #0]
 80022da:	699a      	ldr	r2, [r3, #24]
 80022dc:	f042 0208 	orr.w	r2, r2, #8
 80022e0:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022e2:	699a      	ldr	r2, [r3, #24]
 80022e4:	f022 0204 	bic.w	r2, r2, #4
 80022e8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022ea:	6999      	ldr	r1, [r3, #24]
 80022ec:	692a      	ldr	r2, [r5, #16]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	e00f      	b.n	8002312 <HAL_TIM_PWM_ConfigChannel+0x72>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022f2:	6820      	ldr	r0, [r4, #0]
 80022f4:	f7ff ff7a 	bl	80021ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022f8:	6823      	ldr	r3, [r4, #0]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80022fa:	6909      	ldr	r1, [r1, #16]
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022fc:	699a      	ldr	r2, [r3, #24]
 80022fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002302:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800230a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800230c:	699a      	ldr	r2, [r3, #24]
 800230e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002312:	619a      	str	r2, [r3, #24]
    }
    break;
 8002314:	e020      	b.n	8002358 <HAL_TIM_PWM_ConfigChannel+0xb8>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002316:	6820      	ldr	r0, [r4, #0]
 8002318:	f7ff fd08 	bl	8001d2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800231c:	6823      	ldr	r3, [r4, #0]
 800231e:	69da      	ldr	r2, [r3, #28]
 8002320:	f042 0208 	orr.w	r2, r2, #8
 8002324:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002326:	69da      	ldr	r2, [r3, #28]
 8002328:	f022 0204 	bic.w	r2, r2, #4
 800232c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800232e:	69d9      	ldr	r1, [r3, #28]
 8002330:	692a      	ldr	r2, [r5, #16]
 8002332:	430a      	orrs	r2, r1
 8002334:	e00f      	b.n	8002356 <HAL_TIM_PWM_ConfigChannel+0xb6>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002336:	6820      	ldr	r0, [r4, #0]
 8002338:	f7ff fd24 	bl	8001d84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800233c:	6823      	ldr	r3, [r4, #0]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800233e:	6909      	ldr	r1, [r1, #16]
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002340:	69da      	ldr	r2, [r3, #28]
 8002342:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002346:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002348:	69da      	ldr	r2, [r3, #28]
 800234a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800234e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002350:	69da      	ldr	r2, [r3, #28]
 8002352:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002356:	61da      	str	r2, [r3, #28]

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 8002358:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 800235a:	2000      	movs	r0, #0

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 800235c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002360:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
}
 8002364:	bd38      	pop	{r3, r4, r5, pc}
	...

08002368 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002368:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800236a:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800236c:	4e14      	ldr	r6, [pc, #80]	; (80023c0 <TIM_TI1_SetConfig+0x58>)
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800236e:	f024 0401 	bic.w	r4, r4, #1
 8002372:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002374:	42b0      	cmp	r0, r6
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
 8002376:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002378:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800237a:	d00e      	beq.n	800239a <TIM_TI1_SetConfig+0x32>
 800237c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002380:	d00b      	beq.n	800239a <TIM_TI1_SetConfig+0x32>
 8002382:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8002386:	42b0      	cmp	r0, r6
 8002388:	d007      	beq.n	800239a <TIM_TI1_SetConfig+0x32>
 800238a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800238e:	42b0      	cmp	r0, r6
 8002390:	d003      	beq.n	800239a <TIM_TI1_SetConfig+0x32>
 8002392:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002396:	42b0      	cmp	r0, r6
 8002398:	d10f      	bne.n	80023ba <TIM_TI1_SetConfig+0x52>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800239a:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800239e:	4322      	orrs	r2, r4
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
 80023a0:	011b      	lsls	r3, r3, #4
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023a2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
 80023a6:	b2db      	uxtb	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023a8:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80023ac:	f001 010a 	and.w	r1, r1, #10
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
 80023b0:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80023b2:	430d      	orrs	r5, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023b4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80023b6:	6205      	str	r5, [r0, #32]
}
 80023b8:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80023ba:	f044 0201 	orr.w	r2, r4, #1
 80023be:	e7ef      	b.n	80023a0 <TIM_TI1_SetConfig+0x38>
 80023c0:	40012c00 	.word	0x40012c00

080023c4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel)
{
 80023c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  __HAL_LOCK(htim);
 80023c6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel)
{
 80023ca:	4605      	mov	r5, r0
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  __HAL_LOCK(htim);
 80023cc:	2b01      	cmp	r3, #1
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel)
{
 80023ce:	460c      	mov	r4, r1
 80023d0:	f04f 0002 	mov.w	r0, #2
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  __HAL_LOCK(htim);
 80023d4:	d07f      	beq.n	80024d6 <HAL_TIM_IC_ConfigChannel+0x112>
 80023d6:	2301      	movs	r3, #1
 80023d8:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80023dc:	f885 0039 	strb.w	r0, [r5, #57]	; 0x39

  if (Channel == TIM_CHANNEL_1)
 80023e0:	b972      	cbnz	r2, 8002400 <HAL_TIM_IC_ConfigChannel+0x3c>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80023e2:	68cb      	ldr	r3, [r1, #12]
 80023e4:	6828      	ldr	r0, [r5, #0]
 80023e6:	c906      	ldmia	r1, {r1, r2}
 80023e8:	f7ff ffbe 	bl	8002368 <TIM_TI1_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80023ec:	682b      	ldr	r3, [r5, #0]
 80023ee:	699a      	ldr	r2, [r3, #24]
 80023f0:	f022 020c 	bic.w	r2, r2, #12
 80023f4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80023f6:	6999      	ldr	r1, [r3, #24]
 80023f8:	68a2      	ldr	r2, [r4, #8]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	619a      	str	r2, [r3, #24]
 80023fe:	e064      	b.n	80024ca <HAL_TIM_IC_ConfigChannel+0x106>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002400:	2a04      	cmp	r2, #4
 8002402:	688e      	ldr	r6, [r1, #8]
 8002404:	682b      	ldr	r3, [r5, #0]
 8002406:	e891 4002 	ldmia.w	r1, {r1, lr}
 800240a:	68e0      	ldr	r0, [r4, #12]
 800240c:	d11f      	bne.n	800244e <HAL_TIM_IC_ConfigChannel+0x8a>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800240e:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
  tmpccmr1 |= (TIM_ICSelection << 8);

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12) & TIM_CCMR1_IC2F);
 8002410:	0300      	lsls	r0, r0, #12
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002412:	f022 0210 	bic.w	r2, r2, #16
 8002416:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002418:	699c      	ldr	r4, [r3, #24]
  tmpccer = TIMx->CCER;
 800241a:	6a1f      	ldr	r7, [r3, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800241c:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8);
 8002420:	ea44 220e 	orr.w	r2, r4, lr, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002424:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12) & TIM_CCMR1_IC2F);
 8002428:	b280      	uxth	r0, r0

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800242a:	0109      	lsls	r1, r1, #4
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
  tmpccmr1 |= (TIM_ICSelection << 8);

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12) & TIM_CCMR1_IC2F);
 800242c:	4310      	orrs	r0, r2

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800242e:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12) & TIM_CCMR1_IC2F);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002432:	f027 02a0 	bic.w	r2, r7, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002436:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002438:	6198      	str	r0, [r3, #24]
  TIMx->CCER = tmpccer;
 800243a:	6219      	str	r1, [r3, #32]
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800243c:	699a      	ldr	r2, [r3, #24]
 800243e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002442:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8);
 8002444:	699a      	ldr	r2, [r3, #24]
 8002446:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 800244a:	619e      	str	r6, [r3, #24]
 800244c:	e03d      	b.n	80024ca <HAL_TIM_IC_ConfigChannel+0x106>
  }
  else if (Channel == TIM_CHANNEL_3)
 800244e:	2a08      	cmp	r2, #8
{
  uint32_t tmpccmr2 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002450:	6a1a      	ldr	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8);
  }
  else if (Channel == TIM_CHANNEL_3)
 8002452:	d11c      	bne.n	800248e <HAL_TIM_IC_ConfigChannel+0xca>
{
  uint32_t tmpccmr2 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002454:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002458:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800245a:	69dc      	ldr	r4, [r3, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
  tmpccmr2 |= TIM_ICSelection;

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);
 800245c:	0100      	lsls	r0, r0, #4
  TIMx->CCER &= ~TIM_CCER_CC3E;
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800245e:	f024 0403 	bic.w	r4, r4, #3
  uint32_t tmpccer = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
 8002462:	6a1f      	ldr	r7, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
  tmpccmr2 |= TIM_ICSelection;
 8002464:	ea4e 0204 	orr.w	r2, lr, r4

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002468:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);
 800246c:	b2c0      	uxtb	r0, r0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800246e:	0209      	lsls	r1, r1, #8
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
  tmpccmr2 |= TIM_ICSelection;

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);
 8002470:	4310      	orrs	r0, r2

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002472:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002476:	f427 6220 	bic.w	r2, r7, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800247a:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800247c:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer;
 800247e:	6219      	str	r1, [r3, #32]
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002480:	69da      	ldr	r2, [r3, #28]
 8002482:	f022 020c 	bic.w	r2, r2, #12
 8002486:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002488:	69da      	ldr	r2, [r3, #28]
 800248a:	4316      	orrs	r6, r2
 800248c:	e01c      	b.n	80024c8 <HAL_TIM_IC_ConfigChannel+0x104>
{
  uint32_t tmpccmr2 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800248e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002492:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002494:	69dc      	ldr	r4, [r3, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
  tmpccmr2 |= (TIM_ICSelection << 8);

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);
 8002496:	0300      	lsls	r0, r0, #12
  TIMx->CCER &= ~TIM_CCER_CC4E;
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002498:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  uint32_t tmpccer = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
 800249c:	6a1f      	ldr	r7, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
  tmpccmr2 |= (TIM_ICSelection << 8);
 800249e:	ea44 220e 	orr.w	r2, r4, lr, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80024a2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);
 80024a6:	b280      	uxth	r0, r0

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80024a8:	0309      	lsls	r1, r1, #12
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
  tmpccmr2 |= (TIM_ICSelection << 8);

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);
 80024aa:	4310      	orrs	r0, r2

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80024ac:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80024b0:	f427 4220 	bic.w	r2, r7, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80024b4:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80024b6:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 80024b8:	6219      	str	r1, [r3, #32]
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80024ba:	69da      	ldr	r2, [r3, #28]
 80024bc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80024c0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8);
 80024c2:	69da      	ldr	r2, [r3, #28]
 80024c4:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 80024c8:	61de      	str	r6, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80024ca:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80024cc:	2000      	movs	r0, #0

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8);
  }

  htim->State = HAL_TIM_STATE_READY;
 80024ce:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80024d2:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38

  return HAL_OK;
}
 80024d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080024d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80024d8:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80024da:	2301      	movs	r3, #1
 80024dc:	6a04      	ldr	r4, [r0, #32]
 80024de:	408b      	lsls	r3, r1
 80024e0:	ea24 0303 	bic.w	r3, r4, r3
 80024e4:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80024e6:	6a03      	ldr	r3, [r0, #32]
 80024e8:	408a      	lsls	r2, r1
 80024ea:	ea42 0103 	orr.w	r1, r2, r3
 80024ee:	6201      	str	r1, [r0, #32]
 80024f0:	bd10      	pop	{r4, pc}
	...

080024f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024f4:	b510      	push	{r4, lr}
 80024f6:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024f8:	2201      	movs	r2, #1
 80024fa:	6800      	ldr	r0, [r0, #0]
 80024fc:	f7ff ffec 	bl	80024d8 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002500:	6823      	ldr	r3, [r4, #0]
 8002502:	4a06      	ldr	r2, [pc, #24]	; (800251c <HAL_TIM_PWM_Start+0x28>)
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8002504:	2000      	movs	r0, #0
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002506:	4293      	cmp	r3, r2
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002508:	bf02      	ittt	eq
 800250a:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800250c:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8002510:	645a      	streq	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	f042 0201 	orr.w	r2, r2, #1
 8002518:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 800251a:	bd10      	pop	{r4, pc}
 800251c:	40012c00 	.word	0x40012c00

08002520 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002520:	b510      	push	{r4, lr}
 8002522:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002524:	2200      	movs	r2, #0
 8002526:	6800      	ldr	r0, [r0, #0]
 8002528:	f7ff ffd6 	bl	80024d8 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800252c:	6823      	ldr	r3, [r4, #0]
 800252e:	4a12      	ldr	r2, [pc, #72]	; (8002578 <HAL_TIM_PWM_Stop+0x58>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d10d      	bne.n	8002550 <HAL_TIM_PWM_Stop+0x30>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8002534:	f241 1211 	movw	r2, #4369	; 0x1111
 8002538:	6a19      	ldr	r1, [r3, #32]
 800253a:	400a      	ands	r2, r1
 800253c:	b942      	cbnz	r2, 8002550 <HAL_TIM_PWM_Stop+0x30>
 800253e:	f240 4244 	movw	r2, #1092	; 0x444
 8002542:	6a19      	ldr	r1, [r3, #32]
 8002544:	400a      	ands	r2, r1
 8002546:	b91a      	cbnz	r2, 8002550 <HAL_TIM_PWM_Stop+0x30>
 8002548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800254a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800254e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002550:	f241 1211 	movw	r2, #4369	; 0x1111
 8002554:	6a19      	ldr	r1, [r3, #32]
 8002556:	400a      	ands	r2, r1
 8002558:	b942      	cbnz	r2, 800256c <HAL_TIM_PWM_Stop+0x4c>
 800255a:	f240 4244 	movw	r2, #1092	; 0x444
 800255e:	6a19      	ldr	r1, [r3, #32]
 8002560:	400a      	ands	r2, r1
 8002562:	b91a      	cbnz	r2, 800256c <HAL_TIM_PWM_Stop+0x4c>
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	f022 0201 	bic.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800256c:	2301      	movs	r3, #1
 800256e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
}
 8002572:	2000      	movs	r0, #0
 8002574:	bd10      	pop	{r4, pc}
 8002576:	bf00      	nop
 8002578:	40012c00 	.word	0x40012c00

0800257c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_IC_Start_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800257c:	b510      	push	{r4, lr}
 800257e:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002580:	290c      	cmp	r1, #12
 8002582:	d81c      	bhi.n	80025be <HAL_TIM_IC_Start_IT+0x42>
 8002584:	e8df f001 	tbb	[pc, r1]
 8002588:	1b1b1b07 	.word	0x1b1b1b07
 800258c:	1b1b1b0c 	.word	0x1b1b1b0c
 8002590:	1b1b1b11 	.word	0x1b1b1b11
 8002594:	16          	.byte	0x16
 8002595:	00          	.byte	0x00
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002596:	6802      	ldr	r2, [r0, #0]
 8002598:	68d3      	ldr	r3, [r2, #12]
 800259a:	f043 0302 	orr.w	r3, r3, #2
 800259e:	e00d      	b.n	80025bc <HAL_TIM_IC_Start_IT+0x40>
    break;

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80025a0:	6802      	ldr	r2, [r0, #0]
 80025a2:	68d3      	ldr	r3, [r2, #12]
 80025a4:	f043 0304 	orr.w	r3, r3, #4
 80025a8:	e008      	b.n	80025bc <HAL_TIM_IC_Start_IT+0x40>
    break;

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80025aa:	6802      	ldr	r2, [r0, #0]
 80025ac:	68d3      	ldr	r3, [r2, #12]
 80025ae:	f043 0308 	orr.w	r3, r3, #8
 80025b2:	e003      	b.n	80025bc <HAL_TIM_IC_Start_IT+0x40>
    break;

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80025b4:	6802      	ldr	r2, [r0, #0]
 80025b6:	68d3      	ldr	r3, [r2, #12]
 80025b8:	f043 0310 	orr.w	r3, r3, #16
 80025bc:	60d3      	str	r3, [r2, #12]

    default:
    break;
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025be:	6820      	ldr	r0, [r4, #0]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f7ff ff89 	bl	80024d8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80025c6:	6822      	ldr	r2, [r4, #0]

  /* Return function status */
  return HAL_OK;
}
 80025c8:	2000      	movs	r0, #0
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80025ca:	6813      	ldr	r3, [r2, #0]
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 80025d2:	bd10      	pop	{r4, pc}

080025d4 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80025d4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80025d8:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80025da:	2b01      	cmp	r3, #1
 80025dc:	f04f 0302 	mov.w	r3, #2
 80025e0:	d018      	beq.n	8002614 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80025e2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80025e6:	6803      	ldr	r3, [r0, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80025ee:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80025f0:	685c      	ldr	r4, [r3, #4]
 80025f2:	680a      	ldr	r2, [r1, #0]
 80025f4:	4322      	orrs	r2, r4
 80025f6:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025fe:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002600:	689c      	ldr	r4, [r3, #8]
 8002602:	684a      	ldr	r2, [r1, #4]
 8002604:	4322      	orrs	r2, r4
 8002606:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002608:	2301      	movs	r3, #1
 800260a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800260e:	2300      	movs	r3, #0
 8002610:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002614:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8002616:	bd10      	pop	{r4, pc}

08002618 <HAL_TIMEx_CommutationCallback>:
 8002618:	4770      	bx	lr

0800261a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800261a:	4770      	bx	lr

0800261c <HAL_CAN_RxCpltCallback>:
	}

}*/
void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef *hcan1)
{
  if ((hcan1->pRxMsg->StdId == 0x321) && (hcan1->pRxMsg->IDE == CAN_ID_STD) && (hcan1->pRxMsg->DLC == 2))
 800261c:	f240 3221 	movw	r2, #801	; 0x321
 8002620:	6b43      	ldr	r3, [r0, #52]	; 0x34
		}
	}

}*/
void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef *hcan1)
{
 8002622:	b510      	push	{r4, lr}
  if ((hcan1->pRxMsg->StdId == 0x321) && (hcan1->pRxMsg->IDE == CAN_ID_STD) && (hcan1->pRxMsg->DLC == 2))
 8002624:	6819      	ldr	r1, [r3, #0]
		}
	}

}*/
void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef *hcan1)
{
 8002626:	4604      	mov	r4, r0
  if ((hcan1->pRxMsg->StdId == 0x321) && (hcan1->pRxMsg->IDE == CAN_ID_STD) && (hcan1->pRxMsg->DLC == 2))
 8002628:	4291      	cmp	r1, r2
 800262a:	d108      	bne.n	800263e <HAL_CAN_RxCpltCallback+0x22>
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	b932      	cbnz	r2, 800263e <HAL_CAN_RxCpltCallback+0x22>
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d103      	bne.n	800263e <HAL_CAN_RxCpltCallback+0x22>
  {
	  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8002636:	2140      	movs	r1, #64	; 0x40
 8002638:	4804      	ldr	r0, [pc, #16]	; (800264c <HAL_CAN_RxCpltCallback+0x30>)
 800263a:	f7fe fe2b 	bl	8001294 <HAL_GPIO_TogglePin>
	  //LED_Display(CanHandle->pRxMsg->Data[0]);
    //ubKeyNumber = CanHandle->pRxMsg->Data[0];
  }

  /* Receive */
  if (HAL_CAN_Receive_IT(hcan1, CAN_FIFO0) != HAL_OK)
 800263e:	2100      	movs	r1, #0
 8002640:	4620      	mov	r0, r4
 8002642:	f7fe fb6a 	bl	8000d1a <HAL_CAN_Receive_IT>
 8002646:	b100      	cbz	r0, 800264a <HAL_CAN_RxCpltCallback+0x2e>
 8002648:	e7fe      	b.n	8002648 <HAL_CAN_RxCpltCallback+0x2c>
 800264a:	bd10      	pop	{r4, pc}
 800264c:	40011000 	.word	0x40011000

08002650 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002650:	b530      	push	{r4, r5, lr}
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002652:	f44f 3280 	mov.w	r2, #65536	; 0x10000
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002656:	b09d      	sub	sp, #116	; 0x74
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002658:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 800265a:	2300      	movs	r3, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800265c:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800265e:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002660:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002662:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002664:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002668:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800266a:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800266c:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 800266e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002670:	9516      	str	r5, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002672:	9218      	str	r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8002674:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002676:	f7fe fe11 	bl	800129c <HAL_RCC_OscConfig>
 800267a:	b100      	cbz	r0, 800267e <SystemClock_Config+0x2e>
 800267c:	e7fe      	b.n	800267c <SystemClock_Config+0x2c>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800267e:	230f      	movs	r3, #15
 8002680:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002682:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002684:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002688:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800268a:	4629      	mov	r1, r5
 800268c:	a801      	add	r0, sp, #4

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800268e:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002690:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002692:	f7ff f985 	bl	80019a0 <HAL_RCC_ClockConfig>
 8002696:	b100      	cbz	r0, 800269a <SystemClock_Config+0x4a>
 8002698:	e7fe      	b.n	8002698 <SystemClock_Config+0x48>
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800269a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800269e:	a806      	add	r0, sp, #24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80026a0:	9506      	str	r5, [sp, #24]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80026a2:	9308      	str	r3, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026a4:	f7ff fa34 	bl	8001b10 <HAL_RCCEx_PeriphCLKConfig>
 80026a8:	4605      	mov	r5, r0
 80026aa:	b100      	cbz	r0, 80026ae <SystemClock_Config+0x5e>
 80026ac:	e7fe      	b.n	80026ac <SystemClock_Config+0x5c>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80026ae:	f7ff fa29 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 80026b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026b6:	fbb0 f0f3 	udiv	r0, r0, r3
 80026ba:	f7fe fce7 	bl	800108c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80026be:	2004      	movs	r0, #4
 80026c0:	f7fe fcfa 	bl	80010b8 <HAL_SYSTICK_CLKSourceConfig>
 80026c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80026c8:	fa93 f3a3 	rbit	r3, r3

    /**Configure the Systick interrupt time 
    */
  __HAL_RCC_PLLI2S_ENABLE();
 80026cc:	fab3 f383 	clz	r3, r3
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80026d6:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80026da:	601c      	str	r4, [r3, #0]

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80026dc:	462a      	mov	r2, r5
 80026de:	4629      	mov	r1, r5
 80026e0:	f04f 30ff 	mov.w	r0, #4294967295
 80026e4:	f7fe fc92 	bl	800100c <HAL_NVIC_SetPriority>
}
 80026e8:	b01d      	add	sp, #116	; 0x74
 80026ea:	bd30      	pop	{r4, r5, pc}

080026ec <init>:
	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
	  f_inv = (f_inv*39.0+((float)TIM4->CNT)*2.0/12800.0)/40.0;
	  TIM4->ARR = (uint32_t)round(12800.0*f_inv);
	  count=-1;
}
void init(void){
 80026ec:	b510      	push	{r4, lr}

	//timer 2
	//HAL_TIM_Base_MspInit(&htim2);
	HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 80026ee:	4c23      	ldr	r4, [pc, #140]	; (800277c <init+0x90>)
 80026f0:	2100      	movs	r1, #0
 80026f2:	4620      	mov	r0, r4
 80026f4:	f7ff ff42 	bl	800257c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_2);
 80026f8:	2104      	movs	r1, #4
 80026fa:	4620      	mov	r0, r4
 80026fc:	f7ff ff3e 	bl	800257c <HAL_TIM_IC_Start_IT>
	//HAL_TIM_Base_Start_IT(&htim2);
	//HAL_NVIC_EnableIRQ(TIM2_IRQn);

	pwm_in.COUNT_TO_MKS = ((float)TIM2->PSC)/72.0;
 8002700:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002704:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002706:	f7fd fe43 	bl	8000390 <__aeabi_ui2f>
 800270a:	491d      	ldr	r1, [pc, #116]	; (8002780 <init+0x94>)
 800270c:	f7fd ff4c 	bl	80005a8 <__aeabi_fdiv>
	 // TIMER3 16 khz PWM
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8002710:	4c1c      	ldr	r4, [pc, #112]	; (8002784 <init+0x98>)
	HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
	HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_2);
	//HAL_TIM_Base_Start_IT(&htim2);
	//HAL_NVIC_EnableIRQ(TIM2_IRQn);

	pwm_in.COUNT_TO_MKS = ((float)TIM2->PSC)/72.0;
 8002712:	4b1d      	ldr	r3, [pc, #116]	; (8002788 <init+0x9c>)
	 // TIMER3 16 khz PWM
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8002714:	2104      	movs	r1, #4
	HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
	HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_2);
	//HAL_TIM_Base_Start_IT(&htim2);
	//HAL_NVIC_EnableIRQ(TIM2_IRQn);

	pwm_in.COUNT_TO_MKS = ((float)TIM2->PSC)/72.0;
 8002716:	6098      	str	r0, [r3, #8]
	 // TIMER3 16 khz PWM
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8002718:	4620      	mov	r0, r4
 800271a:	f7ff feeb 	bl	80024f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 800271e:	2108      	movs	r1, #8
 8002720:	4620      	mov	r0, r4
 8002722:	f7ff fee7 	bl	80024f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 8002726:	210c      	movs	r1, #12
 8002728:	4620      	mov	r0, r4
 800272a:	f7ff fee3 	bl	80024f4 <HAL_TIM_PWM_Start>
	  //HAL_NVIC_EnableIRQ(TIM3_IRQn);

	//  dt = (float)(htim3.Init.Prescaler+1)*(float)(htim3.Init.Period)/64000000.0;
	  //
	 // HAL_TIM_Base_MspInit(&htim4);
	  HAL_TIM_Base_Start_IT(&htim4);
 800272e:	4817      	ldr	r0, [pc, #92]	; (800278c <init+0xa0>)
 8002730:	f7ff fb4a 	bl	8001dc8 <HAL_TIM_Base_Start_IT>
	  //HAL_TIM_IC_Start(&htim4,TIM_CHANNEL_1);
	  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002734:	201e      	movs	r0, #30
 8002736:	f7fe fc9d 	bl	8001074 <HAL_NVIC_EnableIRQ>


	  adc1ch[0].Channel = ADC_CHANNEL_2;//B
 800273a:	4b15      	ldr	r3, [pc, #84]	; (8002790 <init+0xa4>)
	  adc1ch[0].Rank = 1;
	  adc1ch[0].SamplingTime = ADC_SAMPLETIME_1CYCLE_5;

	  adc1ch[1].Channel = ADC_CHANNEL_3;//C
 800273c:	2003      	movs	r0, #3
	  HAL_TIM_Base_Start_IT(&htim4);
	  //HAL_TIM_IC_Start(&htim4,TIM_CHANNEL_1);
	  HAL_NVIC_EnableIRQ(TIM4_IRQn);


	  adc1ch[0].Channel = ADC_CHANNEL_2;//B
 800273e:	2202      	movs	r2, #2
	  adc1ch[0].Rank = 1;
	  adc1ch[0].SamplingTime = ADC_SAMPLETIME_1CYCLE_5;

	  adc1ch[1].Channel = ADC_CHANNEL_3;//C
 8002740:	60d8      	str	r0, [r3, #12]

	  adc1ch[2].Channel = ADC_CHANNEL_1;//A
	  adc1ch[2].Rank = 1;
	  adc1ch[2].SamplingTime = ADC_SAMPLETIME_1CYCLE_5;

	  adc1ch[3].Channel = ADC_CHANNEL_4;//CNT
 8002742:	2004      	movs	r0, #4
	  //HAL_TIM_IC_Start(&htim4,TIM_CHANNEL_1);
	  HAL_NVIC_EnableIRQ(TIM4_IRQn);


	  adc1ch[0].Channel = ADC_CHANNEL_2;//B
	  adc1ch[0].Rank = 1;
 8002744:	2101      	movs	r1, #1
	  HAL_TIM_Base_Start_IT(&htim4);
	  //HAL_TIM_IC_Start(&htim4,TIM_CHANNEL_1);
	  HAL_NVIC_EnableIRQ(TIM4_IRQn);


	  adc1ch[0].Channel = ADC_CHANNEL_2;//B
 8002746:	601a      	str	r2, [r3, #0]

	  adc1ch[2].Channel = ADC_CHANNEL_1;//A
	  adc1ch[2].Rank = 1;
	  adc1ch[2].SamplingTime = ADC_SAMPLETIME_1CYCLE_5;

	  adc1ch[3].Channel = ADC_CHANNEL_4;//CNT
 8002748:	6258      	str	r0, [r3, #36]	; 0x24
	  HAL_NVIC_EnableIRQ(TIM4_IRQn);


	  adc1ch[0].Channel = ADC_CHANNEL_2;//B
	  adc1ch[0].Rank = 1;
	  adc1ch[0].SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800274a:	2200      	movs	r2, #0

	  adc1ch[4].Channel = ADC_CHANNEL_0;//pot
	  adc1ch[4].Rank = 1;
	  adc1ch[4].SamplingTime = ADC_SAMPLETIME_1CYCLE_5;

	  adc1ch[5].Channel = ADC_CHANNEL_6;//cur
 800274c:	2006      	movs	r0, #6
 800274e:	63d8      	str	r0, [r3, #60]	; 0x3c
	  //HAL_TIM_IC_Start(&htim4,TIM_CHANNEL_1);
	  HAL_NVIC_EnableIRQ(TIM4_IRQn);


	  adc1ch[0].Channel = ADC_CHANNEL_2;//B
	  adc1ch[0].Rank = 1;
 8002750:	6059      	str	r1, [r3, #4]
	  adc1ch[0].SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002752:	609a      	str	r2, [r3, #8]

	  adc1ch[1].Channel = ADC_CHANNEL_3;//C
	  adc1ch[1].Rank = 1;
 8002754:	6119      	str	r1, [r3, #16]
	  adc1ch[1].SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002756:	615a      	str	r2, [r3, #20]

	  adc1ch[2].Channel = ADC_CHANNEL_1;//A
 8002758:	6199      	str	r1, [r3, #24]
	  adc1ch[2].Rank = 1;
 800275a:	61d9      	str	r1, [r3, #28]
	  adc1ch[2].SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800275c:	621a      	str	r2, [r3, #32]

	  adc1ch[3].Channel = ADC_CHANNEL_4;//CNT
	  adc1ch[3].Rank = 1;
 800275e:	6299      	str	r1, [r3, #40]	; 0x28
	  adc1ch[3].SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002760:	62da      	str	r2, [r3, #44]	; 0x2c

	  adc1ch[4].Channel = ADC_CHANNEL_0;//pot
 8002762:	631a      	str	r2, [r3, #48]	; 0x30
	  adc1ch[4].Rank = 1;
 8002764:	6359      	str	r1, [r3, #52]	; 0x34
	  adc1ch[4].SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002766:	639a      	str	r2, [r3, #56]	; 0x38

	  adc1ch[5].Channel = ADC_CHANNEL_6;//cur
	  adc1ch[5].Rank = 1;
 8002768:	6419      	str	r1, [r3, #64]	; 0x40
	  adc1ch[5].SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800276a:	645a      	str	r2, [r3, #68]	; 0x44

	  //ADC1
	  //HAL_ADC_MspInit(&hadc1);
	  HAL_ADC_Start(&hadc1);
 800276c:	4809      	ldr	r0, [pc, #36]	; (8002794 <init+0xa8>)
 800276e:	f7fe f93f 	bl	80009f0 <HAL_ADC_Start>
	  PlaySound(3,100);
	  PlaySound(100,100);
	  PlaySound(3,100);
	  PlaySound(100,100);
	  PlaySound(1,100);*/
}
 8002772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	  //ADC1
	  //HAL_ADC_MspInit(&hadc1);
	  HAL_ADC_Start(&hadc1);
	  //adc2
	  HAL_ADC_MspInit(&hadc2);
 8002776:	4808      	ldr	r0, [pc, #32]	; (8002798 <init+0xac>)
 8002778:	f000 ba90 	b.w	8002c9c <HAL_ADC_MspInit>
 800277c:	200001c4 	.word	0x200001c4
 8002780:	42900000 	.word	0x42900000
 8002784:	200000ec 	.word	0x200000ec
 8002788:	200001b4 	.word	0x200001b4
 800278c:	20000080 	.word	0x20000080
 8002790:	20000128 	.word	0x20000128
 8002794:	20000170 	.word	0x20000170
 8002798:	200000bc 	.word	0x200000bc

0800279c <main>:
  }
}
/* USER CODE END 0 */

int main(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b092      	sub	sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027a0:	f7fe f800 	bl	80007a4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80027a4:	f7ff ff54 	bl	8002650 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027a8:	4b98      	ldr	r3, [pc, #608]	; (8002a0c <main+0x270>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 80027aa:	2140      	movs	r1, #64	; 0x40
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ac:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 80027ae:	4898      	ldr	r0, [pc, #608]	; (8002a10 <main+0x274>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027b0:	f042 0220 	orr.w	r2, r2, #32
 80027b4:	619a      	str	r2, [r3, #24]
 80027b6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, AH_Pin|BH_Pin|CH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027b8:	2403      	movs	r4, #3
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ba:	f002 0220 	and.w	r2, r2, #32
 80027be:	9201      	str	r2, [sp, #4]
 80027c0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c2:	699a      	ldr	r2, [r3, #24]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AH_Pin|BH_Pin|CH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027c4:	2601      	movs	r6, #1

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c6:	f042 0204 	orr.w	r2, r2, #4
 80027ca:	619a      	str	r2, [r3, #24]
 80027cc:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ce:	2500      	movs	r5, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d0:	f002 0204 	and.w	r2, r2, #4
 80027d4:	9202      	str	r2, [sp, #8]
 80027d6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d8:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80027da:	2702      	movs	r7, #2
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027dc:	f042 0208 	orr.w	r2, r2, #8
 80027e0:	619a      	str	r2, [r3, #24]
 80027e2:	699a      	ldr	r2, [r3, #24]
 80027e4:	f002 0208 	and.w	r2, r2, #8
 80027e8:	9203      	str	r2, [sp, #12]
 80027ea:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ec:	699a      	ldr	r2, [r3, #24]
 80027ee:	f042 0210 	orr.w	r2, r2, #16
 80027f2:	619a      	str	r2, [r3, #24]
 80027f4:	699b      	ldr	r3, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 80027f6:	2201      	movs	r2, #1

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027f8:	f003 0310 	and.w	r3, r3, #16
 80027fc:	9304      	str	r3, [sp, #16]
 80027fe:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 8002800:	f7fe fd44 	bl	800128c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AH_Pin|BH_Pin|CH_Pin, GPIO_PIN_RESET);
 8002804:	2200      	movs	r2, #0
 8002806:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800280a:	4882      	ldr	r0, [pc, #520]	; (8002a14 <main+0x278>)
 800280c:	f7fe fd3e 	bl	800128c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 8002810:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8002812:	a90b      	add	r1, sp, #44	; 0x2c
 8002814:	487e      	ldr	r0, [pc, #504]	; (8002a10 <main+0x274>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AH_Pin|BH_Pin|CH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 8002816:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002818:	940e      	str	r4, [sp, #56]	; 0x38
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AH_Pin|BH_Pin|CH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800281a:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 800281c:	f7fe fc5e 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pins : AH_Pin BH_Pin CH_Pin */
  GPIO_InitStruct.Pin = AH_Pin|BH_Pin|CH_Pin;
 8002820:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002824:	a90b      	add	r1, sp, #44	; 0x2c
 8002826:	487b      	ldr	r0, [pc, #492]	; (8002a14 <main+0x278>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : AH_Pin BH_Pin CH_Pin */
  GPIO_InitStruct.Pin = AH_Pin|BH_Pin|CH_Pin;
 8002828:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800282a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : AH_Pin BH_Pin CH_Pin */
  GPIO_InitStruct.Pin = AH_Pin|BH_Pin|CH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800282c:	960c      	str	r6, [sp, #48]	; 0x30

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_IC_InitTypeDef sConfigIC;

  htim2.Instance = TIM2;
 800282e:	4c7a      	ldr	r4, [pc, #488]	; (8002a18 <main+0x27c>)

  /*Configure GPIO pins : AH_Pin BH_Pin CH_Pin */
  GPIO_InitStruct.Pin = AH_Pin|BH_Pin|CH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002830:	f7fe fc54 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002834:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002836:	a90b      	add	r1, sp, #44	; 0x2c
 8002838:	4878      	ldr	r0, [pc, #480]	; (8002a1c <main+0x280>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800283a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800283c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800283e:	970d      	str	r7, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002840:	f7fe fc4c 	bl	80010dc <HAL_GPIO_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_IC_InitTypeDef sConfigIC;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 36;
 8002844:	2324      	movs	r3, #36	; 0x24
 8002846:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800284a:	e884 000a 	stmia.w	r4, {r1, r3}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 40000;
 800284e:	f649 4340 	movw	r3, #40000	; 0x9c40
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002852:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_IC_InitTypeDef sConfigIC;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 36;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002854:	60a5      	str	r5, [r4, #8]
  htim2.Init.Period = 40000;
 8002856:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002858:	6125      	str	r5, [r4, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800285a:	f7ff fc5f 	bl	800211c <HAL_TIM_Base_Init>
 800285e:	b100      	cbz	r0, 8002862 <main+0xc6>
 8002860:	e7fe      	b.n	8002860 <main+0xc4>
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002862:	ad12      	add	r5, sp, #72	; 0x48
 8002864:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 8002868:	f845 8d2c 	str.w	r8, [r5, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800286c:	4629      	mov	r1, r5
 800286e:	4620      	mov	r0, r4
 8002870:	f7ff fab8 	bl	8001de4 <HAL_TIM_ConfigClockSource>
 8002874:	b100      	cbz	r0, 8002878 <main+0xdc>
 8002876:	e7fe      	b.n	8002876 <main+0xda>
  {
    Error_Handler();
  }

  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002878:	4620      	mov	r0, r4
 800287a:	f7ff fc9d 	bl	80021b8 <HAL_TIM_IC_Init>
 800287e:	b100      	cbz	r0, 8002882 <main+0xe6>
 8002880:	e7fe      	b.n	8002880 <main+0xe4>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002882:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002884:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002886:	a905      	add	r1, sp, #20
 8002888:	4620      	mov	r0, r4
 800288a:	f7ff fea3 	bl	80025d4 <HAL_TIMEx_MasterConfigSynchronization>
 800288e:	4602      	mov	r2, r0
 8002890:	b100      	cbz	r0, 8002894 <main+0xf8>
 8002892:	e7fe      	b.n	8002892 <main+0xf6>
  {
    Error_Handler();
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002894:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002896:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigIC.ICFilter = 0;
 8002898:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800289a:	a90b      	add	r1, sp, #44	; 0x2c
 800289c:	4620      	mov	r0, r4
  {
    Error_Handler();
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800289e:	960c      	str	r6, [sp, #48]	; 0x30
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80028a0:	f7ff fd90 	bl	80023c4 <HAL_TIM_IC_ConfigChannel>
 80028a4:	b100      	cbz	r0, 80028a8 <main+0x10c>
 80028a6:	e7fe      	b.n	80028a6 <main+0x10a>
    Error_Handler();
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80028a8:	2204      	movs	r2, #4
 80028aa:	a90b      	add	r1, sp, #44	; 0x2c
 80028ac:	4620      	mov	r0, r4
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80028ae:	970b      	str	r7, [sp, #44]	; 0x2c
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80028b0:	970c      	str	r7, [sp, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80028b2:	f7ff fd87 	bl	80023c4 <HAL_TIM_IC_ConfigChannel>
 80028b6:	b100      	cbz	r0, 80028ba <main+0x11e>
 80028b8:	e7fe      	b.n	80028b8 <main+0x11c>

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
 80028ba:	4c59      	ldr	r4, [pc, #356]	; (8002a20 <main+0x284>)
 80028bc:	4b59      	ldr	r3, [pc, #356]	; (8002a24 <main+0x288>)
  htim3.Init.Prescaler = 1;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028be:	60a0      	str	r0, [r4, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 1;
 80028c0:	e884 0048 	stmia.w	r4, {r3, r6}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 2000;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028c4:	6120      	str	r0, [r4, #16]
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 1;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 2000;
 80028c6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80028ca:	4620      	mov	r0, r4
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 1;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 2000;
 80028cc:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80028ce:	f7ff fc25 	bl	800211c <HAL_TIM_Base_Init>
 80028d2:	b100      	cbz	r0, 80028d6 <main+0x13a>
 80028d4:	e7fe      	b.n	80028d4 <main+0x138>
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80028d6:	4629      	mov	r1, r5
 80028d8:	4620      	mov	r0, r4
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028da:	f8cd 801c 	str.w	r8, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80028de:	f7ff fa81 	bl	8001de4 <HAL_TIM_ConfigClockSource>
 80028e2:	b100      	cbz	r0, 80028e6 <main+0x14a>
 80028e4:	e7fe      	b.n	80028e4 <main+0x148>
  {
    Error_Handler();
  }

  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80028e6:	4620      	mov	r0, r4
 80028e8:	f7ff fc32 	bl	8002150 <HAL_TIM_OC_Init>
 80028ec:	b100      	cbz	r0, 80028f0 <main+0x154>
 80028ee:	e7fe      	b.n	80028ee <main+0x152>
  {
    Error_Handler();
  }

  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80028f0:	4620      	mov	r0, r4
 80028f2:	f7ff fc47 	bl	8002184 <HAL_TIM_PWM_Init>
 80028f6:	b100      	cbz	r0, 80028fa <main+0x15e>
 80028f8:	e7fe      	b.n	80028f8 <main+0x15c>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028fa:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028fc:	a905      	add	r1, sp, #20
 80028fe:	4848      	ldr	r0, [pc, #288]	; (8002a20 <main+0x284>)
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002900:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002902:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002904:	f7ff fe66 	bl	80025d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002908:	4602      	mov	r2, r0
 800290a:	b100      	cbz	r0, 800290e <main+0x172>
 800290c:	e7fe      	b.n	800290c <main+0x170>
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800290e:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 500;
 8002910:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002914:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002916:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002918:	a90b      	add	r1, sp, #44	; 0x2c
 800291a:	4841      	ldr	r0, [pc, #260]	; (8002a20 <main+0x284>)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_TIMING;
  sConfigOC.Pulse = 500;
 800291c:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800291e:	f7ff fc91 	bl	8002244 <HAL_TIM_OC_ConfigChannel>
 8002922:	b100      	cbz	r0, 8002926 <main+0x18a>
 8002924:	e7fe      	b.n	8002924 <main+0x188>
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002926:	2360      	movs	r3, #96	; 0x60
 8002928:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 200;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800292a:	2204      	movs	r2, #4
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 200;
 800292c:	23c8      	movs	r3, #200	; 0xc8
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800292e:	a90b      	add	r1, sp, #44	; 0x2c
 8002930:	483b      	ldr	r0, [pc, #236]	; (8002a20 <main+0x284>)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 200;
 8002932:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002934:	f7ff fcb4 	bl	80022a0 <HAL_TIM_PWM_ConfigChannel>
 8002938:	b100      	cbz	r0, 800293c <main+0x1a0>
 800293a:	e7fe      	b.n	800293a <main+0x19e>
  {
    Error_Handler();
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800293c:	2208      	movs	r2, #8
 800293e:	a90b      	add	r1, sp, #44	; 0x2c
 8002940:	4837      	ldr	r0, [pc, #220]	; (8002a20 <main+0x284>)
 8002942:	f7ff fcad 	bl	80022a0 <HAL_TIM_PWM_ConfigChannel>
 8002946:	b100      	cbz	r0, 800294a <main+0x1ae>
 8002948:	e7fe      	b.n	8002948 <main+0x1ac>
  {
    Error_Handler();
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800294a:	220c      	movs	r2, #12
 800294c:	a90b      	add	r1, sp, #44	; 0x2c
 800294e:	4834      	ldr	r0, [pc, #208]	; (8002a20 <main+0x284>)
 8002950:	f7ff fca6 	bl	80022a0 <HAL_TIM_PWM_ConfigChannel>
 8002954:	4606      	mov	r6, r0
 8002956:	b100      	cbz	r0, 800295a <main+0x1be>
 8002958:	e7fe      	b.n	8002958 <main+0x1bc>
  {
    Error_Handler();
  }

  HAL_TIM_MspPostInit(&htim3);
 800295a:	4831      	ldr	r0, [pc, #196]	; (8002a20 <main+0x284>)
 800295c:	f000 fa64 	bl	8002e28 <HAL_TIM_MspPostInit>
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
 8002960:	4c31      	ldr	r4, [pc, #196]	; (8002a28 <main+0x28c>)
  htim4.Init.Prescaler = 16;
 8002962:	4a32      	ldr	r2, [pc, #200]	; (8002a2c <main+0x290>)
 8002964:	2310      	movs	r3, #16
 8002966:	e884 000c 	stmia.w	r4, {r2, r3}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 20000;
 800296a:	f644 6320 	movw	r3, #20000	; 0x4e20
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800296e:	4620      	mov	r0, r4
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 16;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002970:	60a6      	str	r6, [r4, #8]
  htim4.Init.Period = 20000;
 8002972:	60e3      	str	r3, [r4, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002974:	6126      	str	r6, [r4, #16]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002976:	f7ff fbd1 	bl	800211c <HAL_TIM_Base_Init>
 800297a:	b100      	cbz	r0, 800297e <main+0x1e2>
 800297c:	e7fe      	b.n	800297c <main+0x1e0>
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800297e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002982:	a90b      	add	r1, sp, #44	; 0x2c
 8002984:	4620      	mov	r0, r4
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002986:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002988:	f7ff fa2c 	bl	8001de4 <HAL_TIM_ConfigClockSource>
 800298c:	b100      	cbz	r0, 8002990 <main+0x1f4>
 800298e:	e7fe      	b.n	800298e <main+0x1f2>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002990:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002992:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002994:	4629      	mov	r1, r5
 8002996:	4620      	mov	r0, r4
 8002998:	f7ff fe1c 	bl	80025d4 <HAL_TIMEx_MasterConfigSynchronization>
 800299c:	b100      	cbz	r0, 80029a0 <main+0x204>
 800299e:	e7fe      	b.n	800299e <main+0x202>

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 80029a0:	4c23      	ldr	r4, [pc, #140]	; (8002a30 <main+0x294>)
 80029a2:	4b24      	ldr	r3, [pc, #144]	; (8002a34 <main+0x298>)
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 80029a4:	2501      	movs	r5, #1

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 80029a6:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80029a8:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80029aa:	6160      	str	r0, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029ac:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029b0:	6060      	str	r0, [r4, #4]
  hadc1.Init.NbrOfConversion = 1;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029b2:	4620      	mov	r0, r4

    /**Common config 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 80029b4:	60e5      	str	r5, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029b6:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 80029b8:	6125      	str	r5, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029ba:	f7fe f89d 	bl	8000af8 <HAL_ADC_Init>
 80029be:	b100      	cbz	r0, 80029c2 <main+0x226>
 80029c0:	e7fe      	b.n	80029c0 <main+0x224>
    Error_Handler();
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_4;
 80029c2:	2304      	movs	r3, #4
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80029c4:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029c6:	a90b      	add	r1, sp, #44	; 0x2c
 80029c8:	4620      	mov	r0, r4
    Error_Handler();
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_4;
 80029ca:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = 1;
 80029cc:	950c      	str	r5, [sp, #48]	; 0x30
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029ce:	f7fd ff17 	bl	8000800 <HAL_ADC_ConfigChannel>
 80029d2:	b100      	cbz	r0, 80029d6 <main+0x23a>
 80029d4:	e7fe      	b.n	80029d4 <main+0x238>

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc2.Instance = ADC2;
 80029d6:	4c18      	ldr	r4, [pc, #96]	; (8002a38 <main+0x29c>)
 80029d8:	4b18      	ldr	r3, [pc, #96]	; (8002a3c <main+0x2a0>)
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029da:	f44f 2260 	mov.w	r2, #917504	; 0xe0000

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc2.Instance = ADC2;
 80029de:	6023      	str	r3, [r4, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
 80029e0:	2501      	movs	r5, #1
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc2.Instance = ADC2;
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80029e2:	2300      	movs	r3, #0
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80029e4:	4620      	mov	r0, r4
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc2.Instance = ADC2;
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80029e6:	60a3      	str	r3, [r4, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80029e8:	60e3      	str	r3, [r4, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80029ea:	6163      	str	r3, [r4, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029ec:	61e2      	str	r2, [r4, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029ee:	6063      	str	r3, [r4, #4]
  hadc2.Init.NbrOfConversion = 1;
 80029f0:	6125      	str	r5, [r4, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80029f2:	f7fe f881 	bl	8000af8 <HAL_ADC_Init>
 80029f6:	b100      	cbz	r0, 80029fa <main+0x25e>
 80029f8:	e7fe      	b.n	80029f8 <main+0x25c>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80029fa:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80029fc:	a90b      	add	r1, sp, #44	; 0x2c
 80029fe:	4620      	mov	r0, r4
    Error_Handler();
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 8002a00:	950b      	str	r5, [sp, #44]	; 0x2c
  sConfig.Rank = 1;
 8002a02:	950c      	str	r5, [sp, #48]	; 0x30
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002a04:	f7fd fefc 	bl	8000800 <HAL_ADC_ConfigChannel>
 8002a08:	b1d0      	cbz	r0, 8002a40 <main+0x2a4>
 8002a0a:	e7fe      	b.n	8002a0a <main+0x26e>
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40011000 	.word	0x40011000
 8002a14:	40010800 	.word	0x40010800
 8002a18:	200001c4 	.word	0x200001c4
 8002a1c:	40010c00 	.word	0x40010c00
 8002a20:	200000ec 	.word	0x200000ec
 8002a24:	40000400 	.word	0x40000400
 8002a28:	20000080 	.word	0x20000080
 8002a2c:	40000800 	.word	0x40000800
 8002a30:	20000170 	.word	0x20000170
 8002a34:	40012400 	.word	0x40012400
 8002a38:	200000bc 	.word	0x200000bc
 8002a3c:	40012800 	.word	0x40012800

/* CAN1 init function */
static void MX_CAN1_Init(void)
{

  hcan1.Instance = CAN1;
 8002a40:	4b18      	ldr	r3, [pc, #96]	; (8002aa4 <main+0x308>)
  hcan1.Init.Prescaler = 100;
 8002a42:	4a19      	ldr	r2, [pc, #100]	; (8002aa8 <main+0x30c>)
 8002a44:	2464      	movs	r4, #100	; 0x64
 8002a46:	e883 0014 	stmia.w	r3, {r2, r4}
  hcan1.Init.Mode = CAN_MODE_NORMAL;
  hcan1.Init.SJW = CAN_SJW_1TQ;
  hcan1.Init.BS1 = CAN_BS1_6TQ;
 8002a4a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
static void MX_CAN1_Init(void)
{

  hcan1.Instance = CAN1;
  hcan1.Init.Prescaler = 100;
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002a4e:	6098      	str	r0, [r3, #8]
  hcan1.Init.SJW = CAN_SJW_1TQ;
 8002a50:	60d8      	str	r0, [r3, #12]
  hcan1.Init.BS1 = CAN_BS1_6TQ;
 8002a52:	611a      	str	r2, [r3, #16]
  hcan1.Init.BS2 = CAN_BS2_8TQ;
  hcan1.Init.TTCM = DISABLE;
 8002a54:	6198      	str	r0, [r3, #24]
  hcan1.Instance = CAN1;
  hcan1.Init.Prescaler = 100;
  hcan1.Init.Mode = CAN_MODE_NORMAL;
  hcan1.Init.SJW = CAN_SJW_1TQ;
  hcan1.Init.BS1 = CAN_BS1_6TQ;
  hcan1.Init.BS2 = CAN_BS2_8TQ;
 8002a56:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
  hcan1.Init.TTCM = DISABLE;
  hcan1.Init.ABOM = DISABLE;
 8002a5a:	61d8      	str	r0, [r3, #28]
  hcan1.Init.AWUM = DISABLE;
 8002a5c:	6218      	str	r0, [r3, #32]
  hcan1.Init.NART = DISABLE;
 8002a5e:	6258      	str	r0, [r3, #36]	; 0x24
  hcan1.Init.RFLM = DISABLE;
 8002a60:	6298      	str	r0, [r3, #40]	; 0x28
  hcan1.Init.TXFP = DISABLE;
 8002a62:	62d8      	str	r0, [r3, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002a64:	4618      	mov	r0, r3
  hcan1.Instance = CAN1;
  hcan1.Init.Prescaler = 100;
  hcan1.Init.Mode = CAN_MODE_NORMAL;
  hcan1.Init.SJW = CAN_SJW_1TQ;
  hcan1.Init.BS1 = CAN_BS1_6TQ;
  hcan1.Init.BS2 = CAN_BS2_8TQ;
 8002a66:	615a      	str	r2, [r3, #20]
  hcan1.Init.ABOM = DISABLE;
  hcan1.Init.AWUM = DISABLE;
  hcan1.Init.NART = DISABLE;
  hcan1.Init.RFLM = DISABLE;
  hcan1.Init.TXFP = DISABLE;
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002a68:	f7fe f8da 	bl	8000c20 <HAL_CAN_Init>
 8002a6c:	b100      	cbz	r0, 8002a70 <main+0x2d4>
 8002a6e:	e7fe      	b.n	8002a6e <main+0x2d2>
      if (HAL_CAN_Receive_IT(&hcan1, CAN_FIFO0) != HAL_OK)
        {
          Error_Handler();
        }*/

  init();
 8002a70:	f7ff fe3c 	bl	80026ec <init>


  f=1.1;
 8002a74:	4a0d      	ldr	r2, [pc, #52]	; (8002aac <main+0x310>)
 8002a76:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <main+0x314>)
  f_inv =  1/(f*POLES*STATES);
  TIM4->ARR = (uint32_t)round(1280000.0*f_inv);
  //TIM3->CCR1 = 350;
  TIM3->CCR2 = TIM3->CCR3 = TIM3->CCR4 = 600;
  HAL_Delay(100);
 8002a78:	4620      	mov	r0, r4
        }*/

  init();


  f=1.1;
 8002a7a:	601a      	str	r2, [r3, #0]
  f_inv =  1/(f*POLES*STATES);
 8002a7c:	4a0d      	ldr	r2, [pc, #52]	; (8002ab4 <main+0x318>)
 8002a7e:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <main+0x31c>)
 8002a80:	601a      	str	r2, [r3, #0]
  TIM4->ARR = (uint32_t)round(1280000.0*f_inv);
 8002a82:	f244 42df 	movw	r2, #17631	; 0x44df
 8002a86:	4b0d      	ldr	r3, [pc, #52]	; (8002abc <main+0x320>)
 8002a88:	62da      	str	r2, [r3, #44]	; 0x2c
  //TIM3->CCR1 = 350;
  TIM3->CCR2 = TIM3->CCR3 = TIM3->CCR4 = 600;
 8002a8a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002a8e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002a92:	641a      	str	r2, [r3, #64]	; 0x40
 8002a94:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a96:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(100);
 8002a98:	f7fd fea4 	bl	80007e4 <HAL_Delay>

  pwm_in.smooth = 0;
 8002a9c:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <main+0x324>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	e7fe      	b.n	8002aa2 <main+0x306>
 8002aa4:	20000200 	.word	0x20000200
 8002aa8:	40006400 	.word	0x40006400
 8002aac:	3f8ccccd 	.word	0x3f8ccccd
 8002ab0:	20000004 	.word	0x20000004
 8002ab4:	3c61acc8 	.word	0x3c61acc8
 8002ab8:	20000034 	.word	0x20000034
 8002abc:	40000800 	.word	0x40000800
 8002ac0:	200001b4 	.word	0x200001b4

08002ac4 <StartAnalogADC2>:
	HAL_ADC_ConfigChannel(&hadc1, &adc1ch[ch]);//A4 / B
	HAL_ADC_Start(&hadc1);
	while( __HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOC)==0 ){}
	return HAL_ADC_GetValue(&hadc1);
}
void StartAnalogADC2( int ch ){
 8002ac4:	b510      	push	{r4, lr}
	HAL_ADC_ConfigChannel(&hadc2, &adc1ch[ch]);
 8002ac6:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <StartAnalogADC2+0x1c>)
 8002ac8:	4c06      	ldr	r4, [pc, #24]	; (8002ae4 <StartAnalogADC2+0x20>)
 8002aca:	210c      	movs	r1, #12
 8002acc:	fb01 3100 	mla	r1, r1, r0, r3
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	f7fd fe95 	bl	8000800 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc2);
 8002ad6:	4620      	mov	r0, r4
}
 8002ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	while( __HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOC)==0 ){}
	return HAL_ADC_GetValue(&hadc1);
}
void StartAnalogADC2( int ch ){
	HAL_ADC_ConfigChannel(&hadc2, &adc1ch[ch]);
	HAL_ADC_Start(&hadc2);
 8002adc:	f7fd bf88 	b.w	80009f0 <HAL_ADC_Start>
 8002ae0:	20000128 	.word	0x20000128
 8002ae4:	200000bc 	.word	0x200000bc

08002ae8 <SetControlHIGH>:
void ResetControlHIGH(void){
	HAL_GPIO_WritePin(AH_GPIO_Port, AH_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(BH_GPIO_Port, BH_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(CH_GPIO_Port, CH_Pin, GPIO_PIN_RESET);
}
void SetControlHIGH(GPIO_PinState ah,GPIO_PinState al,GPIO_PinState bh,GPIO_PinState bl,GPIO_PinState ch,GPIO_PinState cl){
 8002ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002aec:	4690      	mov	r8, r2
 8002aee:	460e      	mov	r6, r1
	HAL_GPIO_WritePin(AH_GPIO_Port, AH_Pin, ah);
 8002af0:	4602      	mov	r2, r0
void ResetControlHIGH(void){
	HAL_GPIO_WritePin(AH_GPIO_Port, AH_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(BH_GPIO_Port, BH_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(CH_GPIO_Port, CH_Pin, GPIO_PIN_RESET);
}
void SetControlHIGH(GPIO_PinState ah,GPIO_PinState al,GPIO_PinState bh,GPIO_PinState bl,GPIO_PinState ch,GPIO_PinState cl){
 8002af2:	f89d 7018 	ldrb.w	r7, [sp, #24]
	HAL_GPIO_WritePin(AH_GPIO_Port, AH_Pin, ah);
 8002af6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002afa:	4816      	ldr	r0, [pc, #88]	; (8002b54 <SetControlHIGH+0x6c>)
void ResetControlHIGH(void){
	HAL_GPIO_WritePin(AH_GPIO_Port, AH_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(BH_GPIO_Port, BH_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(CH_GPIO_Port, CH_Pin, GPIO_PIN_RESET);
}
void SetControlHIGH(GPIO_PinState ah,GPIO_PinState al,GPIO_PinState bh,GPIO_PinState bl,GPIO_PinState ch,GPIO_PinState cl){
 8002afc:	461d      	mov	r5, r3
 8002afe:	f89d 401c 	ldrb.w	r4, [sp, #28]
	HAL_GPIO_WritePin(AH_GPIO_Port, AH_Pin, ah);
 8002b02:	f7fe fbc3 	bl	800128c <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(AL_GPIO_Port, AL_Pin, al);
	HAL_GPIO_WritePin(BH_GPIO_Port, BH_Pin, bh);
 8002b06:	4642      	mov	r2, r8
 8002b08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b0c:	4811      	ldr	r0, [pc, #68]	; (8002b54 <SetControlHIGH+0x6c>)
 8002b0e:	f7fe fbbd 	bl	800128c <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, bl);
	HAL_GPIO_WritePin(CH_GPIO_Port, CH_Pin, ch);
 8002b12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b16:	480f      	ldr	r0, [pc, #60]	; (8002b54 <SetControlHIGH+0x6c>)
 8002b18:	463a      	mov	r2, r7
 8002b1a:	f7fe fbb7 	bl	800128c <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(CL_GPIO_Port, CL_Pin, cl);

	if(al)HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);else HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
 8002b1e:	2104      	movs	r1, #4
 8002b20:	480d      	ldr	r0, [pc, #52]	; (8002b58 <SetControlHIGH+0x70>)
 8002b22:	b116      	cbz	r6, 8002b2a <SetControlHIGH+0x42>
 8002b24:	f7ff fce6 	bl	80024f4 <HAL_TIM_PWM_Start>
 8002b28:	e001      	b.n	8002b2e <SetControlHIGH+0x46>
 8002b2a:	f7ff fcf9 	bl	8002520 <HAL_TIM_PWM_Stop>
	if(bl)HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);else HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
 8002b2e:	2108      	movs	r1, #8
 8002b30:	4809      	ldr	r0, [pc, #36]	; (8002b58 <SetControlHIGH+0x70>)
 8002b32:	b115      	cbz	r5, 8002b3a <SetControlHIGH+0x52>
 8002b34:	f7ff fcde 	bl	80024f4 <HAL_TIM_PWM_Start>
 8002b38:	e001      	b.n	8002b3e <SetControlHIGH+0x56>
 8002b3a:	f7ff fcf1 	bl	8002520 <HAL_TIM_PWM_Stop>
	if(cl)HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);else HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_4);
 8002b3e:	210c      	movs	r1, #12
 8002b40:	4805      	ldr	r0, [pc, #20]	; (8002b58 <SetControlHIGH+0x70>)
 8002b42:	b11c      	cbz	r4, 8002b4c <SetControlHIGH+0x64>

}
 8002b44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_GPIO_WritePin(CH_GPIO_Port, CH_Pin, ch);
	//HAL_GPIO_WritePin(CL_GPIO_Port, CL_Pin, cl);

	if(al)HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);else HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
	if(bl)HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);else HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
	if(cl)HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);else HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_4);
 8002b48:	f7ff bcd4 	b.w	80024f4 <HAL_TIM_PWM_Start>

}
 8002b4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_GPIO_WritePin(CH_GPIO_Port, CH_Pin, ch);
	//HAL_GPIO_WritePin(CL_GPIO_Port, CL_Pin, cl);

	if(al)HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);else HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
	if(bl)HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);else HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_3);
	if(cl)HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);else HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_4);
 8002b50:	f7ff bce6 	b.w	8002520 <HAL_TIM_PWM_Stop>
 8002b54:	40010800 	.word	0x40010800
 8002b58:	200000ec 	.word	0x200000ec

08002b5c <HAL_TIM_PeriodElapsedCallback>:
						case 3:SetControlLOW(0,0,0,1,1,0);break;
						case 4:SetControlLOW(1,0,0,1,0,0);break;
						case 5:SetControlLOW(1,0,0,0,0,1);break;
		}
	}*/
	if (htim->Instance==TIM4) //check if the interrupt comes from TIM3
 8002b5c:	6802      	ldr	r2, [r0, #0]
 8002b5e:	4b28      	ldr	r3, [pc, #160]	; (8002c00 <HAL_TIM_PeriodElapsedCallback+0xa4>)

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b60:	b573      	push	{r0, r1, r4, r5, r6, lr}
						case 3:SetControlLOW(0,0,0,1,1,0);break;
						case 4:SetControlLOW(1,0,0,1,0,0);break;
						case 5:SetControlLOW(1,0,0,0,0,1);break;
		}
	}*/
	if (htim->Instance==TIM4) //check if the interrupt comes from TIM3
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d14a      	bne.n	8002bfc <HAL_TIM_PeriodElapsedCallback+0xa0>
	{
		count=-1;
 8002b66:	4e27      	ldr	r6, [pc, #156]	; (8002c04 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002b68:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6c:	6033      	str	r3, [r6, #0]
		phase++;
 8002b6e:	4b26      	ldr	r3, [pc, #152]	; (8002c08 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002b70:	2400      	movs	r4, #0
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4d25      	ldr	r5, [pc, #148]	; (8002c0c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002b76:	3201      	adds	r2, #1
		if(phase>=6)
 8002b78:	2a05      	cmp	r2, #5
			phase=0;
 8002b7a:	bfc8      	it	gt
 8002b7c:	2200      	movgt	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
		switch(phase){
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2b05      	cmp	r3, #5
 8002b84:	d835      	bhi.n	8002bf2 <HAL_TIM_PeriodElapsedCallback+0x96>
 8002b86:	e8df f003 	tbb	[pc, r3]
 8002b8a:	0a03      	.short	0x0a03
 8002b8c:	2b261c15 	.word	0x2b261c15
									case 0:SetControlHIGH(0,0,1,0,0,1);ch=2;break;
 8002b90:	2300      	movs	r3, #0
 8002b92:	2201      	movs	r2, #1
 8002b94:	9201      	str	r2, [sp, #4]
 8002b96:	9400      	str	r4, [sp, #0]
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	e017      	b.n	8002bce <HAL_TIM_PeriodElapsedCallback+0x72>
									case 1:SetControlHIGH(0,1,1,0,0,0);ch=1;break;
 8002b9e:	9401      	str	r4, [sp, #4]
 8002ba0:	9400      	str	r4, [sp, #0]
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	4611      	mov	r1, r2
 8002baa:	f7ff ff9d 	bl	8002ae8 <SetControlHIGH>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	602b      	str	r3, [r5, #0]
 8002bb2:	e01e      	b.n	8002bf2 <HAL_TIM_PeriodElapsedCallback+0x96>
									case 2:SetControlHIGH(0,1,0,0,1,0);ch=0;break;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	9401      	str	r4, [sp, #4]
 8002bba:	9100      	str	r1, [sp, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	e014      	b.n	8002bec <HAL_TIM_PeriodElapsedCallback+0x90>
									case 3:SetControlHIGH(0,0,0,1,1,0);ch=2;break;
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	2301      	movs	r3, #1
 8002bca:	9401      	str	r4, [sp, #4]
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	f7ff ff8b 	bl	8002ae8 <SetControlHIGH>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	e7ec      	b.n	8002bb0 <HAL_TIM_PeriodElapsedCallback+0x54>
									case 4:SetControlHIGH(1,0,0,1,0,0);ch=1;break;
 8002bd6:	9401      	str	r4, [sp, #4]
 8002bd8:	9400      	str	r4, [sp, #0]
 8002bda:	2301      	movs	r3, #1
 8002bdc:	2200      	movs	r2, #0
 8002bde:	e7e2      	b.n	8002ba6 <HAL_TIM_PeriodElapsedCallback+0x4a>
									case 5:SetControlHIGH(1,0,0,0,0,1);ch=0;break;
 8002be0:	2300      	movs	r3, #0
 8002be2:	461a      	mov	r2, r3
 8002be4:	4619      	mov	r1, r3
 8002be6:	2001      	movs	r0, #1
 8002be8:	9001      	str	r0, [sp, #4]
 8002bea:	9400      	str	r4, [sp, #0]
 8002bec:	f7ff ff7c 	bl	8002ae8 <SetControlHIGH>
 8002bf0:	602c      	str	r4, [r5, #0]
		}
		StartAnalogADC2(ch);
 8002bf2:	6828      	ldr	r0, [r5, #0]
 8002bf4:	f7ff ff66 	bl	8002ac4 <StartAnalogADC2>
		count=0;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	6033      	str	r3, [r6, #0]
	}
}
 8002bfc:	b002      	add	sp, #8
 8002bfe:	bd70      	pop	{r4, r5, r6, pc}
 8002c00:	40000800 	.word	0x40000800
 8002c04:	20000030 	.word	0x20000030
 8002c08:	2000002c 	.word	0x2000002c
 8002c0c:	20000008 	.word	0x20000008

08002c10 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c10:	4b20      	ldr	r3, [pc, #128]	; (8002c94 <HAL_MspInit+0x84>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c12:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c14:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c16:	2003      	movs	r0, #3
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c18:	f042 0201 	orr.w	r2, r2, #1
 8002c1c:	619a      	str	r2, [r3, #24]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	9301      	str	r3, [sp, #4]
 8002c26:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c28:	f7fe f9de 	bl	8000fe8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	4611      	mov	r1, r2
 8002c30:	f06f 000b 	mvn.w	r0, #11
 8002c34:	f7fe f9ea 	bl	800100c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002c38:	2200      	movs	r2, #0
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	f06f 000a 	mvn.w	r0, #10
 8002c40:	f7fe f9e4 	bl	800100c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002c44:	2200      	movs	r2, #0
 8002c46:	4611      	mov	r1, r2
 8002c48:	f06f 0009 	mvn.w	r0, #9
 8002c4c:	f7fe f9de 	bl	800100c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002c50:	2200      	movs	r2, #0
 8002c52:	4611      	mov	r1, r2
 8002c54:	f06f 0004 	mvn.w	r0, #4
 8002c58:	f7fe f9d8 	bl	800100c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	4611      	mov	r1, r2
 8002c60:	f06f 0003 	mvn.w	r0, #3
 8002c64:	f7fe f9d2 	bl	800100c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002c68:	2200      	movs	r2, #0
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	f06f 0001 	mvn.w	r0, #1
 8002c70:	f7fe f9cc 	bl	800100c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002c74:	2200      	movs	r2, #0
 8002c76:	4611      	mov	r1, r2
 8002c78:	f04f 30ff 	mov.w	r0, #4294967295
 8002c7c:	f7fe f9c6 	bl	800100c <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c80:	4a05      	ldr	r2, [pc, #20]	; (8002c98 <HAL_MspInit+0x88>)
 8002c82:	6853      	ldr	r3, [r2, #4]
 8002c84:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c8e:	b003      	add	sp, #12
 8002c90:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40010000 	.word	0x40010000

08002c9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8002c9e:	6803      	ldr	r3, [r0, #0]
 8002ca0:	4a13      	ldr	r2, [pc, #76]	; (8002cf0 <HAL_ADC_MspInit+0x54>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d10b      	bne.n	8002cbe <HAL_ADC_MspInit+0x22>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ca6:	4b13      	ldr	r3, [pc, #76]	; (8002cf4 <HAL_ADC_MspInit+0x58>)
 8002ca8:	699a      	ldr	r2, [r3, #24]
 8002caa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cae:	619a      	str	r2, [r3, #24]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	9b00      	ldr	r3, [sp, #0]
  
    /**ADC1 GPIO Configuration    
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = SENSE_CENTER_Pin;
 8002cba:	2310      	movs	r3, #16
 8002cbc:	e00d      	b.n	8002cda <HAL_ADC_MspInit+0x3e>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8002cbe:	4a0e      	ldr	r2, [pc, #56]	; (8002cf8 <HAL_ADC_MspInit+0x5c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d111      	bne.n	8002ce8 <HAL_ADC_MspInit+0x4c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_ADC_MspInit+0x58>)
 8002cc6:	699a      	ldr	r2, [r3, #24]
 8002cc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ccc:	619a      	str	r2, [r3, #24]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd4:	9301      	str	r3, [sp, #4]
 8002cd6:	9b01      	ldr	r3, [sp, #4]
    /**ADC2 GPIO Configuration    
    PA1     ------> ADC2_IN1
    PA2     ------> ADC2_IN2
    PA3     ------> ADC2_IN3 
    */
    GPIO_InitStruct.Pin = SENSE_A_Pin|SENSE_B_Pin|SECNSE_C_Pin;
 8002cd8:	230e      	movs	r3, #14
 8002cda:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cdc:	a902      	add	r1, sp, #8
    PA1     ------> ADC2_IN1
    PA2     ------> ADC2_IN2
    PA3     ------> ADC2_IN3 
    */
    GPIO_InitStruct.Pin = SENSE_A_Pin|SENSE_B_Pin|SECNSE_C_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cde:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce0:	4806      	ldr	r0, [pc, #24]	; (8002cfc <HAL_ADC_MspInit+0x60>)
    PA1     ------> ADC2_IN1
    PA2     ------> ADC2_IN2
    PA3     ------> ADC2_IN3 
    */
    GPIO_InitStruct.Pin = SENSE_A_Pin|SENSE_B_Pin|SECNSE_C_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ce2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce4:	f7fe f9fa 	bl	80010dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002ce8:	b007      	add	sp, #28
 8002cea:	f85d fb04 	ldr.w	pc, [sp], #4
 8002cee:	bf00      	nop
 8002cf0:	40012400 	.word	0x40012400
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40012800 	.word	0x40012800
 8002cfc:	40010800 	.word	0x40010800

08002d00 <HAL_CAN_MspInit>:
  }

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002d00:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN1)
 8002d02:	6802      	ldr	r2, [r0, #0]
 8002d04:	4b22      	ldr	r3, [pc, #136]	; (8002d90 <HAL_CAN_MspInit+0x90>)
  }

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002d06:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN1)
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d13f      	bne.n	8002d8c <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002d0c:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8002d10:	69da      	ldr	r2, [r3, #28]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d12:	2400      	movs	r4, #0
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002d14:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002d18:	61da      	str	r2, [r3, #28]
 8002d1a:	69db      	ldr	r3, [r3, #28]
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d1c:	a902      	add	r1, sp, #8
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d22:	9301      	str	r3, [sp, #4]
 8002d24:	9b01      	ldr	r3, [sp, #4]
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d26:	481b      	ldr	r0, [pc, #108]	; (8002d94 <HAL_CAN_MspInit+0x94>)
  
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002d28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d2c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d2e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d30:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d32:	f7fe f9d3 	bl	80010dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d3a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d40:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d42:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d44:	4813      	ldr	r0, [pc, #76]	; (8002d94 <HAL_CAN_MspInit+0x94>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d46:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d48:	f7fe f9c8 	bl	80010dc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8002d4c:	4622      	mov	r2, r4
 8002d4e:	4621      	mov	r1, r4
 8002d50:	2013      	movs	r0, #19
 8002d52:	f7fe f95b 	bl	800100c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002d56:	2013      	movs	r0, #19
 8002d58:	f7fe f98c 	bl	8001074 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002d5c:	4622      	mov	r2, r4
 8002d5e:	4621      	mov	r1, r4
 8002d60:	2014      	movs	r0, #20
 8002d62:	f7fe f953 	bl	800100c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002d66:	2014      	movs	r0, #20
 8002d68:	f7fe f984 	bl	8001074 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8002d6c:	4622      	mov	r2, r4
 8002d6e:	4621      	mov	r1, r4
 8002d70:	2015      	movs	r0, #21
 8002d72:	f7fe f94b 	bl	800100c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002d76:	2015      	movs	r0, #21
 8002d78:	f7fe f97c 	bl	8001074 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8002d7c:	2016      	movs	r0, #22
 8002d7e:	4622      	mov	r2, r4
 8002d80:	4621      	mov	r1, r4
 8002d82:	f7fe f943 	bl	800100c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8002d86:	2016      	movs	r0, #22
 8002d88:	f7fe f974 	bl	8001074 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002d8c:	b006      	add	sp, #24
 8002d8e:	bd10      	pop	{r4, pc}
 8002d90:	40006400 	.word	0x40006400
 8002d94:	40010800 	.word	0x40010800

08002d98 <HAL_TIM_Base_MspInit>:
  /* USER CODE END CAN1_MspDeInit 1 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM2)
 8002d9a:	6803      	ldr	r3, [r0, #0]
 8002d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da0:	d114      	bne.n	8002dcc <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002da2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002da6:	69da      	ldr	r2, [r3, #28]
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = PWM_IN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(PWM_IN_GPIO_Port, &GPIO_InitStruct);
 8002da8:	a902      	add	r1, sp, #8
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002daa:	f042 0201 	orr.w	r2, r2, #1
 8002dae:	61da      	str	r2, [r3, #28]
 8002db0:	69db      	ldr	r3, [r3, #28]
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = PWM_IN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(PWM_IN_GPIO_Port, &GPIO_InitStruct);
 8002db2:	4819      	ldr	r0, [pc, #100]	; (8002e18 <HAL_TIM_Base_MspInit+0x80>)
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	9b00      	ldr	r3, [sp, #0]
  
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = PWM_IN_Pin;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(PWM_IN_GPIO_Port, &GPIO_InitStruct);
 8002dc6:	f7fe f989 	bl	80010dc <HAL_GPIO_Init>
 8002dca:	e022      	b.n	8002e12 <HAL_TIM_Base_MspInit+0x7a>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8002dcc:	4a13      	ldr	r2, [pc, #76]	; (8002e1c <HAL_TIM_Base_MspInit+0x84>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d10a      	bne.n	8002de8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002dd2:	4b13      	ldr	r3, [pc, #76]	; (8002e20 <HAL_TIM_Base_MspInit+0x88>)
 8002dd4:	69da      	ldr	r2, [r3, #28]
 8002dd6:	f042 0202 	orr.w	r2, r2, #2
 8002dda:	61da      	str	r2, [r3, #28]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	9301      	str	r3, [sp, #4]
 8002de4:	9b01      	ldr	r3, [sp, #4]
 8002de6:	e014      	b.n	8002e12 <HAL_TIM_Base_MspInit+0x7a>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8002de8:	4a0e      	ldr	r2, [pc, #56]	; (8002e24 <HAL_TIM_Base_MspInit+0x8c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d111      	bne.n	8002e12 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002dee:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <HAL_TIM_Base_MspInit+0x88>)
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002df0:	201e      	movs	r0, #30
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002df2:	69da      	ldr	r2, [r3, #28]
 8002df4:	f042 0204 	orr.w	r2, r2, #4
 8002df8:	61da      	str	r2, [r3, #28]
 8002dfa:	69db      	ldr	r3, [r3, #28]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002dfc:	2200      	movs	r2, #0
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	9302      	str	r3, [sp, #8]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002e04:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e06:	9b02      	ldr	r3, [sp, #8]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002e08:	f7fe f900 	bl	800100c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002e0c:	201e      	movs	r0, #30
 8002e0e:	f7fe f931 	bl	8001074 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002e12:	b007      	add	sp, #28
 8002e14:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e18:	40010800 	.word	0x40010800
 8002e1c:	40000400 	.word	0x40000400
 8002e20:	40021000 	.word	0x40021000
 8002e24:	40000800 	.word	0x40000800

08002e28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e28:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM3)
 8002e2a:	6802      	ldr	r2, [r0, #0]
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <HAL_TIM_MspPostInit+0x30>)
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d110      	bne.n	8002e54 <HAL_TIM_MspPostInit+0x2c>
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = AL_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e32:	2402      	movs	r4, #2
 8002e34:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(AL_GPIO_Port, &GPIO_InitStruct);
 8002e36:	4669      	mov	r1, sp
 8002e38:	4808      	ldr	r0, [pc, #32]	; (8002e5c <HAL_TIM_MspPostInit+0x34>)
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = AL_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3a:	e88d 0018 	stmia.w	sp, {r3, r4}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3e:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(AL_GPIO_Port, &GPIO_InitStruct);
 8002e40:	f7fe f94c 	bl	80010dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BL_Pin|CL_Pin;
 8002e44:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e46:	4669      	mov	r1, sp
 8002e48:	4805      	ldr	r0, [pc, #20]	; (8002e60 <HAL_TIM_MspPostInit+0x38>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(AL_GPIO_Port, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = BL_Pin|CL_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4a:	e88d 0018 	stmia.w	sp, {r3, r4}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4e:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e50:	f7fe f944 	bl	80010dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002e54:	b004      	add	sp, #16
 8002e56:	bd10      	pop	{r4, pc}
 8002e58:	40000400 	.word	0x40000400
 8002e5c:	40010800 	.word	0x40010800
 8002e60:	40010c00 	.word	0x40010c00

08002e64 <NMI_Handler>:
 8002e64:	4770      	bx	lr

08002e66 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002e66:	e7fe      	b.n	8002e66 <HardFault_Handler>

08002e68 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002e68:	e7fe      	b.n	8002e68 <MemManage_Handler>

08002e6a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002e6a:	e7fe      	b.n	8002e6a <BusFault_Handler>

08002e6c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002e6c:	e7fe      	b.n	8002e6c <UsageFault_Handler>

08002e6e <SVC_Handler>:
 8002e6e:	4770      	bx	lr

08002e70 <DebugMon_Handler>:
 8002e70:	4770      	bx	lr

08002e72 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002e72:	4770      	bx	lr

08002e74 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002e74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e76:	f7fd fca7 	bl	80007c8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 8002e7e:	f7fe b928 	b.w	80010d2 <HAL_SYSTICK_IRQHandler>
	...

08002e84 <CAN1_SCE_IRQHandler>:
void CAN1_SCE_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002e84:	4801      	ldr	r0, [pc, #4]	; (8002e8c <CAN1_SCE_IRQHandler+0x8>)
 8002e86:	f7fd bff9 	b.w	8000e7c <HAL_CAN_IRQHandler>
 8002e8a:	bf00      	nop
 8002e8c:	20000200 	.word	0x20000200

08002e90 <CAN1_RX1_IRQHandler>:
 8002e90:	f7ff bff8 	b.w	8002e84 <CAN1_SCE_IRQHandler>

08002e94 <CAN1_RX0_IRQHandler>:
 8002e94:	f7ff bff6 	b.w	8002e84 <CAN1_SCE_IRQHandler>

08002e98 <CAN1_TX_IRQHandler>:
 8002e98:	f7ff bff4 	b.w	8002e84 <CAN1_SCE_IRQHandler>

08002e9c <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002e9c:	4801      	ldr	r0, [pc, #4]	; (8002ea4 <TIM4_IRQHandler+0x8>)
 8002e9e:	f7ff b85f 	b.w	8001f60 <HAL_TIM_IRQHandler>
 8002ea2:	bf00      	nop
 8002ea4:	20000080 	.word	0x20000080

08002ea8 <_init>:
 8002ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eaa:	bf00      	nop
 8002eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eae:	bc08      	pop	{r3}
 8002eb0:	469e      	mov	lr, r3
 8002eb2:	4770      	bx	lr

08002eb4 <_fini>:
 8002eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb6:	bf00      	nop
 8002eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eba:	bc08      	pop	{r3}
 8002ebc:	469e      	mov	lr, r3
 8002ebe:	4770      	bx	lr
